{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/Gallery/index.md","hash":"27dd226ef8c1e27b5082bf244946499b18a62319","modified":1629421503499},{"_id":"source/_data/link.yml","hash":"23c8507157ebe59a3eaf402af327906510592a85","modified":1629421503500},{"_id":"source/_posts/搭建教程.md","hash":"4a50d0ca8424f75d266a407b8f3a6f04d597cd24","modified":1629421503502},{"_id":"source/about/index.md","hash":"9ae91bc571a77e336825b28c1258bb9e21d4f917","modified":1629421503503},{"_id":"source/archives/index.md","hash":"105726e1f512a2e84d0f7e7ba4a0c1c7575abc30","modified":1629421503504},{"_id":"source/categories/index.md","hash":"f51fa379edc8652aef5745632e629a33aeab5c41","modified":1629421503504},{"_id":"source/link/index.md","hash":"19c696dc344d8be774a13bf2ab79b8ccd43dffea","modified":1629421503505},{"_id":"source/music/index.md","hash":"8f146c803c91b7848bf026e1b777e38369d8d97d","modified":1629421503507},{"_id":"source/movies/index.md","hash":"a892e7431149b102a341fc36dc5827da7e5ad1cb","modified":1629421503506},{"_id":"source/tags/index.md","hash":"e299247d2ac2020a196df9f9def787840cfd3ea3","modified":1629421503530},{"_id":"source/_posts/androidDrawable.md","hash":"e38870db90c83b1518d876bd3587e6f407724953","modified":1629421503501},{"_id":"source/_data/_config.butterfly.yml","hash":"1223f1dabde5c04f4a81e635a1af9b1d6f682d9f","modified":1629421503500},{"_id":"source/_posts/javaWeb笔记.md","hash":"fbdc38a80b124864c76163d365c63d404875a7b1","modified":1629421503502},{"_id":"themes/Butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1629427156545},{"_id":"themes/Butterfly/README.md","hash":"1d91febda6688b45dcbde44c2f75110116a2444c","modified":1629427156545},{"_id":"themes/Butterfly/_config.yml","hash":"3ea1181173da0a73bc43f257d4be38b3340b18e3","modified":1629427379865},{"_id":"themes/Butterfly/package.json","hash":"82947e8929ef73b4f63877556ed4443039cbadf0","modified":1629427156577},{"_id":"themes/Butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1629427156545},{"_id":"themes/Butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1629427156545},{"_id":"themes/Butterfly/README_CN.md","hash":"bd02e8bb4dcab946a22ede9f667b43908917cc9c","modified":1629427156545},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1629427156545},{"_id":"themes/Butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1629427156545},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1629427156545},{"_id":"themes/Butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1629427156545},{"_id":"themes/Butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1629427156577},{"_id":"themes/Butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1629427156577},{"_id":"themes/Butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1629427156545},{"_id":"themes/Butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1629427156577},{"_id":"themes/Butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1629427156545},{"_id":"themes/Butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1629427156577},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/404.pug","hash":"3cdc5e32d0f1e5866bcf86f94a0d76aaf7142937","modified":1629427156545},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1629427156545},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"1fa780da96774efde891a7271e05bf08181f48c2","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"72f66c4f3220ef16abd1739492972a22dcc99751","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1629427156561},{"_id":"themes/Butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1629427156577},{"_id":"themes/Butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1629427156592},{"_id":"themes/Butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1629427156592},{"_id":"themes/Butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1629427156592},{"_id":"themes/Butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1629427156592},{"_id":"themes/Butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1629427156592},{"_id":"themes/Butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1629427156592},{"_id":"themes/Butterfly/scripts/helpers/inject_head_js.js","hash":"98ab13a60413d68bd9d02d54d121c66a6d4634d2","modified":1629427156592},{"_id":"themes/Butterfly/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1629427156592},{"_id":"themes/Butterfly/scripts/helpers/related_post.js","hash":"51112d3db07f87034422ff4acc69ca2eb4215b4e","modified":1629427156592},{"_id":"themes/Butterfly/scripts/tag/gallery.js","hash":"00211af801a42f08a80f63ffad45699834a412fc","modified":1629427156592},{"_id":"themes/Butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1629427156592},{"_id":"themes/Butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1629427156592},{"_id":"themes/Butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1629427156592},{"_id":"themes/Butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1629427156592},{"_id":"themes/Butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1629427156592},{"_id":"themes/Butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1629427156592},{"_id":"themes/Butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1629427156592},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"2cf68619af17ece9acea71aa2cb06737097890a5","modified":1629427156561},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1629427156608},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1629427156608},{"_id":"themes/Butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1629427156608},{"_id":"themes/Butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1629427156608},{"_id":"themes/Butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1629427156608},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1629427156608},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1629427156545},{"_id":"themes/Butterfly/source/js/utils.js","hash":"1b8bf1e6d50fa8ffe2aff7548b141cab72540ba0","modified":1629427156608},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1629427156608},{"_id":"themes/Butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/head/config_site.pug","hash":"b27b7ba90b209de29eeb64d5ac6eb93b86f5d784","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1629427156545},{"_id":"themes/Butterfly/source/js/main.js","hash":"26fc5478c1d656443bc620cff8382801d4331bf3","modified":1629427156608},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/header/post-info.pug","hash":"3b0b2053fe9f08cbc21b3baa53163adc2f76c19a","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1629427156545},{"_id":"themes/Butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/page/flink.pug","hash":"c2c25db0678ef31ba495a521522036de1878e06c","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/pjax.pug","hash":"ad59dcce32e4e67066303a1ffd1dd95874d9953e","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/subtitle.pug","hash":"5896c1b48ead4142f92223f31ae73ad04321eb97","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"8de5b5342082715047e2457f505bd5d74db5f89f","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_newest_comment.pug","hash":"0f1a5c356c1ffd47ff49e153226e2d670dc61057","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"ee7c9c6b66798eabbc0f6e6844f40c80e8a9c3fb","modified":1629427156577},{"_id":"themes/Butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"f8197fed53d62c30e52cce6999fbe1911dc9377c","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"48e013802b713c02406c80c32c2609976399551c","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"23ea60f8becc91f6e9f6cfb1cbfd25689c263b9c","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"dd71e34edece4e06b59e941fb3cc5ad9a3ad09cf","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"7d9cd3d9ab09402682e0cd8d360ee907b8d5267a","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"9b4bb5bfbf670222ee3a846be14be00d7829c890","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_layout/third-party.styl","hash":"943aa34c83c87d0225db65ae90621870472972fa","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_page/404.styl","hash":"87c576a3361f30eefafec27a872ad76e9fbb2765","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_page/flink.styl","hash":"48ad198d0ea97a25db4d2a3e587a16ef41617c0b","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_page/common.styl","hash":"5e5c1d6d104cc15314ae365d0da7cb07334a6457","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"e65ed98056e6c91e622f94bad5283d00fdb22142","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"fa2985afd08556b25f5f1a01bc1a7c76b294a962","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"25ac939fc57346de07ba9e15a1a760b492baefd7","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_tags/gallery.styl","hash":"b2698657f4c89393067c20365d0b8cb34772a355","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1629427156608},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1629427156608},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1629427156608},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1629427156561},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1629427156608},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"f3db5c5e738e097a191dc0de59c61d3e1444f7c3","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"b22ed23c78fb372cbdc4cfd3f733beb2ebea5d74","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0bf6a47e804fb793b40f82690a24816b902edd41","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"9ddfac9ae7071ecd982ca3808dcfd4d2d6098f33","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/waline.pug","hash":"0bf1c53b914443c66be5077ff09cfc218f111e11","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/comments/valine.pug","hash":"d1ac48307e4999be08c63c673e98fe3fcee5bfce","modified":1629427156561},{"_id":"themes/Butterfly/layout/includes/third-party/math/katex.pug","hash":"266caf985dc0703ff81b871b8f8d206f57db6e79","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"8890becd8220c57db2c7451409710942c103a7f4","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/math/mathjax.pug","hash":"87e40f0c315407ab88571a2b3450d640f15c96bc","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0ad766ae491e6fcba2ef3d136a7af6158cd4153e","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"83103bad0db195bce095330c4a84e7529bbd40dd","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1629427156577},{"_id":"themes/Butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1629427156577},{"_id":"themes/Butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1629427156592},{"_id":"themes/Butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1629427156577},{"_id":"themes/Butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1629427156592},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1629427156592},{"_id":"public/Gallery/index.html","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1629427733721},{"_id":"public/about/index.html","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1629427733721},{"_id":"public/archives/index.html","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1629427733721},{"_id":"public/categories/index.html","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1629427733721},{"_id":"public/music/index.html","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1629427733721},{"_id":"public/link/index.html","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1629427733721},{"_id":"public/movies/index.html","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1629427733721},{"_id":"public/tags/index.html","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1629427733721},{"_id":"public/2021/08/19/androidDrawable/index.html","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1629427733721},{"_id":"public/2021/08/19/javaWeb笔记/index.html","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1629427733721},{"_id":"public/2021/08/19/搭建教程/index.html","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1629427733721},{"_id":"public/categories/教程/index.html","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1629427733721},{"_id":"public/categories/笔记/index.html","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1629427733721},{"_id":"public/index.html","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1629427733721},{"_id":"public/archives/2021/index.html","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1629427733721},{"_id":"public/archives/2021/08/index.html","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1629427733721},{"_id":"public/tags/android/index.html","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1629427733721},{"_id":"public/tags/drawable/index.html","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1629427733721},{"_id":"public/tags/hexo/index.html","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1629427733721},{"_id":"public/tags/主题/index.html","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1629427733721},{"_id":"public/tags/javaweb/index.html","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1629427733721},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1629427733721},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1629427733721},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1629427733721},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1629427733721},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1629427733721},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1629427733721},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1629427733721},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1629427733721},{"_id":"public/css/index.css","hash":"1f474a067978c799d2574daec42134d188957a98","modified":1629427733721},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1629427733721},{"_id":"public/js/main.js","hash":"8a6a7d71613d5c66efdf592e96f0f49ab21cdf3f","modified":1629427733721}],"Category":[{"name":"教程","_id":"cksjr6j3l0003fgu9gjulbakt"},{"name":"笔记","_id":"cksjr6j4s000mfgu98fr30dkz"}],"Data":[{"_id":"link","data":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}},{"_id":"_config.butterfly","data":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}],"Page":[{"title":"图库","date":"2000-06-22T16:00:00.000Z","type":"Gallery","top_img":"/img/图库.jpg","_content":"\n","source":"Gallery/index.md","raw":"---\ntitle: 图库\ndate: 2000-06-23 00:00:00\ntype: \"Gallery\"\ntop_img: /img/图库.jpg\n---\n\n","updated":"2021-08-20T01:05:03.499Z","path":"Gallery/index.html","comments":1,"layout":"page","_id":"cksjr6j3d0000fgu967ko74vn","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"关于","date":"2000-06-22T16:00:00.000Z","type":"about","top_img":"/img/关于.jpg","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2000-06-23 00:00:00\ntype: \"about\"\ntop_img: /img/关于.jpg\n---\n","updated":"2021-08-20T01:05:03.503Z","path":"about/index.html","comments":1,"layout":"page","_id":"cksjr6j3j0002fgu98r7eaud5","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"时间轴","date":"2000-06-22T16:00:00.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: 时间轴\ndate: 2000-06-23 00:00:00\ntype: \"archives\"\n---\n","updated":"2021-08-20T01:05:03.504Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cksjr6j3n0005fgu97o32dwl5","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"分类","date":"2000-06-22T16:00:00.000Z","type":"tags","top_img":"/img/category.jpg","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2000-06-23 00:00:00\ntype: \"tags\"\ntop_img: /img/category.jpg\n---\n\n","updated":"2021-08-20T01:05:03.504Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cksjr6j3o0006fgu9ezajdbbw","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"音乐","date":"2000-06-22T16:00:00.000Z","type":"music","top_img":"/img/音乐.jpg","_content":"\n","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2000-06-23 00:00:00\ntype: \"music\"\ntop_img: /img/音乐.jpg\n---\n\n","updated":"2021-08-20T01:05:03.507Z","path":"music/index.html","comments":1,"layout":"page","_id":"cksjr6j3p0007fgu96nl48m1t","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"友情链接","date":"2000-06-22T16:00:00.000Z","type":"link","top_img":"/img/链接.jpg","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2000-06-23 00:00:00\ntype: \"link\"\ntop_img: /img/链接.jpg\n---\n","updated":"2021-08-20T01:05:03.505Z","path":"link/index.html","comments":1,"layout":"page","_id":"cksjr6j3q0009fgu9gyrnf5ou","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"电影","date":"2000-06-22T16:00:00.000Z","type":"movies","top_img":"/img/电影.jpg","_content":"\n","source":"movies/index.md","raw":"---\ntitle: 电影\ndate: 2000-06-23 00:00:00\ntype: \"movies\"\ntop_img: /img/电影.jpg\n---\n\n","updated":"2021-08-20T01:05:03.506Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cksjr6j3r000afgu95rokdaag","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"标签","date":"2000-06-22T16:00:00.000Z","type":"tags","top_img":"/img/tag.jpg","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2000-06-23 00:00:00\ntype: \"tags\"\ntop_img: /img/tag.jpg\n---\n\n","updated":"2021-08-20T01:05:03.530Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cksjr6j3r000cfgu9atisd4to","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"androidDrawable","date":"2021-08-19T08:59:46.000Z","description":"Android Drawable竟然还能这么写","_content":"\n# Android Drawable竟然还能这么写\n\n通常我们在`res/drawable`下面自定义`shape`和`selector`来满足一些UI的设计，但是由于xml最终转换为`drawable`需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些`drawable`，可以在一定程度上降低这些副作用。本篇介绍用`kotlin DSL`简洁的语法特性来实现常见的`drawable`。\n\n## 代码对应效果预览\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## 集成和使用\n\n### 在项目级的build.gradle文件种添加仓库Jitpack\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n### 添加依赖\n\n```\ndependencies {        \n    implementation 'com.github.forJrking:DrawableDsl:0.0.3’\n}\n```\n\n\n\n### 抛弃xml创建方式示例（其他参见demo)\n\n```\n// infix用法用于去掉括号更加简洁，详细后面说明\nimage src shapeDrawable {\n    //指定shape样式\n    shape(ShapeBuilder.Shape.RECTANGLE)\n    //圆角，支持4个角单独设置\n    corner(20f)\n    //solid 颜色\n    solid(\"#ABE2E3\")\n    //stroke 颜色，边框dp，虚线设置\n    stroke(R.color.white, 2f, 5f, 8f)\n}\n//按钮点击样式\nbtn.background = selectorDrawable {\n    //默认样式\n    normal = shapeDrawable {\n        corner(20f)\n        gradient(90, R.color.F97794, R.color.C623AA2)\n    }\n    //点击效果\n    pressed = shapeDrawable {\n        corner(20f)\n        solid(\"#84232323\")\n    }\n}\n```\n\n\n\n## 实现思路\n\n### xml如何转换成drawable\n\nxml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：\n\n```\n//标签创建\nprivate Drawable inflateFromTag(@NonNull String name) {\n    switch (name) {\n        case \"selector\":\n            return new StateListDrawable();\n        case \"level-list\":\n            return new LevelListDrawable();\n        case \"layer-list\":\n            return new LayerDrawable();\n        ....\n        case \"color\":\n            return new ColorDrawable();\n        case \"shape\":\n            return new GradientDrawable();\n        case \"vector\":\n            return new VectorDrawable();\n        ...\n    }\n}\n//反射创建\nprivate Drawable inflateFromClass(@NonNull String className) {\n    try {\n        Constructor<? extends Drawable> constructor;\n        synchronized (CONSTRUCTOR_MAP) {\n            constructor = CONSTRUCTOR_MAP.get(className);\n            if (constructor == null) {\n                final Class<? extends Drawable> clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);\n                constructor = clazz.getConstructor();\n                CONSTRUCTOR_MAP.put(className, constructor);\n            }\n        }\n        return constructor.newInstance();\n    } catch (NoSuchMethodException e) {\n    ...\n}\n```\n\n\n\n### 代码实现\n\n由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：\n\n```\nclass ShapeBuilder : DrawableBuilder {\n    private var mRadius = 0f\n    private var mWidth = 0f\n    private var mHeight = 0f\n    ...\n    private var mShape = GradientDrawable.RECTANGLE\n    private var mSolidColor = 0\n\n    /**分别设置四个角的圆角*/\n    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder {\n        ....if(dp)dp2px(leftTop) else leftTop\n        return this\n    }\n\n    fun solid(@ColorRes colorId: Int): ShapeBuilder {\n        mSolidColor = ContextCompat.getColor(context, colorId)\n        return this\n    }\n    // 省略其他参数设置方法 详细代码查看源码\n    override fun build(): Drawable {\n        val gradientDrawable = GradientDrawable()\n        gradientDrawable = GradientDrawable()\n        gradientDrawable.setColor(mSolidColor)\n        gradientDrawable.shape = mShape\n        ....其他参数设置\n        return gradientDrawable\n    }    \n}\n```\n\n\n\n### 把build模式转换为dsl\n\n理论上所有的build模式都可以轻松转换为dsl写法：\n\n```\ninline fun shapeDrawable(builder: ShapeBuilder.() -> Unit): Drawable {\n    return ShapeBuilder().also(builder).build()\n}\n//使用方法 \nval drawable = shapeDrawable{\n    ...\n}\n```\n\n\n\n### 函数去括号\n\n通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：\n\n```\n//容易阅读\niv1.background = shapeDrawable {\n    shape(ShapeBuilder.Shape.RECTANGLE)\n    solid(\"#ABE2E3\")\n}\n//多了括号看起来不舒服\niv2.setImageDrawable(shapeDrawable {\n    solid(\"#84232323\")\n})\n```\n\n怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter\n\n\n\n#### infix函数特点和规范\n\n- Kotlin允许在不使用括号和点号的情况下调用函数\n- 必须只有一个参数\n- 必须是成员函数或扩展函数\n- 不支持可变参数和带默认值参数\n\n```\n/**为所有ImageView添加扩展infix函数 来去掉括号*/\ninfix fun ImageView.src(drawable: Drawable?) {\n    this.setImageDrawable(drawable)\n}\n//使用如下\niv2 src shapeDrawable {\n    shape(ShapeBuilder.Shape.OVAL)\n    solid(\"#E3ABC2\")\n}\n```\n\n当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。\n\n#### property setter方式\n\n主要使用kotlin可以简化setter为等号来去括号：\n\n```\n/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) {        this.setImageDrawable(value)    }//使用如下   iv2.src = shapeDrawable {    shape(ShapeBuilder.Shape.OVAL)    solid(\"#E3ABC2\")}    \n```\n\n\n\n### 优缺点\n\n#### 优点\n\n- 代码直接创建比起xml方式可以提升性能\n- dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格\n- 通过合适的代码管理可以复用这些代码，比xml管理方便\n\n\n\n#### 缺点\n\n- 没有as的预览功能，只有通过上机观测\n- api还没有覆盖所有drawable属性（例如shape = ring等)\n\n\n\n## 结语\n\n上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：\n\n> https://github.com/forJrking/DrawableDsl\n","source":"_posts/androidDrawable.md","raw":"---\ntitle: androidDrawable\ndate: 2021-08-19 16:59:46\ntags: [android,drawable]\ncategories: 教程\ndescription: Android Drawable竟然还能这么写\n---\n\n# Android Drawable竟然还能这么写\n\n通常我们在`res/drawable`下面自定义`shape`和`selector`来满足一些UI的设计，但是由于xml最终转换为`drawable`需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些`drawable`，可以在一定程度上降低这些副作用。本篇介绍用`kotlin DSL`简洁的语法特性来实现常见的`drawable`。\n\n## 代码对应效果预览\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## 集成和使用\n\n### 在项目级的build.gradle文件种添加仓库Jitpack\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n### 添加依赖\n\n```\ndependencies {        \n    implementation 'com.github.forJrking:DrawableDsl:0.0.3’\n}\n```\n\n\n\n### 抛弃xml创建方式示例（其他参见demo)\n\n```\n// infix用法用于去掉括号更加简洁，详细后面说明\nimage src shapeDrawable {\n    //指定shape样式\n    shape(ShapeBuilder.Shape.RECTANGLE)\n    //圆角，支持4个角单独设置\n    corner(20f)\n    //solid 颜色\n    solid(\"#ABE2E3\")\n    //stroke 颜色，边框dp，虚线设置\n    stroke(R.color.white, 2f, 5f, 8f)\n}\n//按钮点击样式\nbtn.background = selectorDrawable {\n    //默认样式\n    normal = shapeDrawable {\n        corner(20f)\n        gradient(90, R.color.F97794, R.color.C623AA2)\n    }\n    //点击效果\n    pressed = shapeDrawable {\n        corner(20f)\n        solid(\"#84232323\")\n    }\n}\n```\n\n\n\n## 实现思路\n\n### xml如何转换成drawable\n\nxml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：\n\n```\n//标签创建\nprivate Drawable inflateFromTag(@NonNull String name) {\n    switch (name) {\n        case \"selector\":\n            return new StateListDrawable();\n        case \"level-list\":\n            return new LevelListDrawable();\n        case \"layer-list\":\n            return new LayerDrawable();\n        ....\n        case \"color\":\n            return new ColorDrawable();\n        case \"shape\":\n            return new GradientDrawable();\n        case \"vector\":\n            return new VectorDrawable();\n        ...\n    }\n}\n//反射创建\nprivate Drawable inflateFromClass(@NonNull String className) {\n    try {\n        Constructor<? extends Drawable> constructor;\n        synchronized (CONSTRUCTOR_MAP) {\n            constructor = CONSTRUCTOR_MAP.get(className);\n            if (constructor == null) {\n                final Class<? extends Drawable> clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);\n                constructor = clazz.getConstructor();\n                CONSTRUCTOR_MAP.put(className, constructor);\n            }\n        }\n        return constructor.newInstance();\n    } catch (NoSuchMethodException e) {\n    ...\n}\n```\n\n\n\n### 代码实现\n\n由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：\n\n```\nclass ShapeBuilder : DrawableBuilder {\n    private var mRadius = 0f\n    private var mWidth = 0f\n    private var mHeight = 0f\n    ...\n    private var mShape = GradientDrawable.RECTANGLE\n    private var mSolidColor = 0\n\n    /**分别设置四个角的圆角*/\n    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder {\n        ....if(dp)dp2px(leftTop) else leftTop\n        return this\n    }\n\n    fun solid(@ColorRes colorId: Int): ShapeBuilder {\n        mSolidColor = ContextCompat.getColor(context, colorId)\n        return this\n    }\n    // 省略其他参数设置方法 详细代码查看源码\n    override fun build(): Drawable {\n        val gradientDrawable = GradientDrawable()\n        gradientDrawable = GradientDrawable()\n        gradientDrawable.setColor(mSolidColor)\n        gradientDrawable.shape = mShape\n        ....其他参数设置\n        return gradientDrawable\n    }    \n}\n```\n\n\n\n### 把build模式转换为dsl\n\n理论上所有的build模式都可以轻松转换为dsl写法：\n\n```\ninline fun shapeDrawable(builder: ShapeBuilder.() -> Unit): Drawable {\n    return ShapeBuilder().also(builder).build()\n}\n//使用方法 \nval drawable = shapeDrawable{\n    ...\n}\n```\n\n\n\n### 函数去括号\n\n通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：\n\n```\n//容易阅读\niv1.background = shapeDrawable {\n    shape(ShapeBuilder.Shape.RECTANGLE)\n    solid(\"#ABE2E3\")\n}\n//多了括号看起来不舒服\niv2.setImageDrawable(shapeDrawable {\n    solid(\"#84232323\")\n})\n```\n\n怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter\n\n\n\n#### infix函数特点和规范\n\n- Kotlin允许在不使用括号和点号的情况下调用函数\n- 必须只有一个参数\n- 必须是成员函数或扩展函数\n- 不支持可变参数和带默认值参数\n\n```\n/**为所有ImageView添加扩展infix函数 来去掉括号*/\ninfix fun ImageView.src(drawable: Drawable?) {\n    this.setImageDrawable(drawable)\n}\n//使用如下\niv2 src shapeDrawable {\n    shape(ShapeBuilder.Shape.OVAL)\n    solid(\"#E3ABC2\")\n}\n```\n\n当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。\n\n#### property setter方式\n\n主要使用kotlin可以简化setter为等号来去括号：\n\n```\n/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) {        this.setImageDrawable(value)    }//使用如下   iv2.src = shapeDrawable {    shape(ShapeBuilder.Shape.OVAL)    solid(\"#E3ABC2\")}    \n```\n\n\n\n### 优缺点\n\n#### 优点\n\n- 代码直接创建比起xml方式可以提升性能\n- dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格\n- 通过合适的代码管理可以复用这些代码，比xml管理方便\n\n\n\n#### 缺点\n\n- 没有as的预览功能，只有通过上机观测\n- api还没有覆盖所有drawable属性（例如shape = ring等)\n\n\n\n## 结语\n\n上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：\n\n> https://github.com/forJrking/DrawableDsl\n","slug":"androidDrawable","published":1,"updated":"2021-08-20T01:05:03.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksjr6j3g0001fgu90y3kfzm9","content":"<h1 id=\"Android-Drawable竟然还能这么写\"><a href=\"#Android-Drawable竟然还能这么写\" class=\"headerlink\" title=\"Android Drawable竟然还能这么写\"></a>Android Drawable竟然还能这么写</h1><p>通常我们在<code>res/drawable</code>下面自定义<code>shape</code>和<code>selector</code>来满足一些UI的设计，但是由于xml最终转换为<code>drawable</code>需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些<code>drawable</code>，可以在一定程度上降低这些副作用。本篇介绍用<code>kotlin DSL</code>简洁的语法特性来实现常见的<code>drawable</code>。</p>\n<h2 id=\"代码对应效果预览\"><a href=\"#代码对应效果预览\" class=\"headerlink\" title=\"代码对应效果预览\"></a>代码对应效果预览</h2><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"图片\"></p>\n<h2 id=\"集成和使用\"><a href=\"#集成和使用\" class=\"headerlink\" title=\"集成和使用\"></a>集成和使用</h2><h3 id=\"在项目级的build-gradle文件种添加仓库Jitpack\"><a href=\"#在项目级的build-gradle文件种添加仓库Jitpack\" class=\"headerlink\" title=\"在项目级的build.gradle文件种添加仓库Jitpack\"></a>在项目级的build.gradle文件种添加仓库Jitpack</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        maven &#123; url &#x27;https://jitpack.io&#x27; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;        </span><br><span class=\"line\">    implementation &#x27;com.github.forJrking:DrawableDsl:0.0.3’</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"抛弃xml创建方式示例（其他参见demo\"><a href=\"#抛弃xml创建方式示例（其他参见demo\" class=\"headerlink\" title=\"抛弃xml创建方式示例（其他参见demo)\"></a>抛弃xml创建方式示例（其他参见demo)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// infix用法用于去掉括号更加简洁，详细后面说明</span><br><span class=\"line\">image src shapeDrawable &#123;</span><br><span class=\"line\">    //指定shape样式</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class=\"line\">    //圆角，支持4个角单独设置</span><br><span class=\"line\">    corner(20f)</span><br><span class=\"line\">    //solid 颜色</span><br><span class=\"line\">    solid(&quot;#ABE2E3&quot;)</span><br><span class=\"line\">    //stroke 颜色，边框dp，虚线设置</span><br><span class=\"line\">    stroke(R.color.white, 2f, 5f, 8f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//按钮点击样式</span><br><span class=\"line\">btn.background = selectorDrawable &#123;</span><br><span class=\"line\">    //默认样式</span><br><span class=\"line\">    normal = shapeDrawable &#123;</span><br><span class=\"line\">        corner(20f)</span><br><span class=\"line\">        gradient(90, R.color.F97794, R.color.C623AA2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //点击效果</span><br><span class=\"line\">    pressed = shapeDrawable &#123;</span><br><span class=\"line\">        corner(20f)</span><br><span class=\"line\">        solid(&quot;#84232323&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><h3 id=\"xml如何转换成drawable\"><a href=\"#xml如何转换成drawable\" class=\"headerlink\" title=\"xml如何转换成drawable\"></a>xml如何转换成drawable</h3><p>xml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//标签创建</span><br><span class=\"line\">private Drawable inflateFromTag(@NonNull String name) &#123;</span><br><span class=\"line\">    switch (name) &#123;</span><br><span class=\"line\">        case &quot;selector&quot;:</span><br><span class=\"line\">            return new StateListDrawable();</span><br><span class=\"line\">        case &quot;level-list&quot;:</span><br><span class=\"line\">            return new LevelListDrawable();</span><br><span class=\"line\">        case &quot;layer-list&quot;:</span><br><span class=\"line\">            return new LayerDrawable();</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        case &quot;color&quot;:</span><br><span class=\"line\">            return new ColorDrawable();</span><br><span class=\"line\">        case &quot;shape&quot;:</span><br><span class=\"line\">            return new GradientDrawable();</span><br><span class=\"line\">        case &quot;vector&quot;:</span><br><span class=\"line\">            return new VectorDrawable();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//反射创建</span><br><span class=\"line\">private Drawable inflateFromClass(@NonNull String className) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Constructor&lt;? extends Drawable&gt; constructor;</span><br><span class=\"line\">        synchronized (CONSTRUCTOR_MAP) &#123;</span><br><span class=\"line\">            constructor = CONSTRUCTOR_MAP.get(className);</span><br><span class=\"line\">            if (constructor == null) &#123;</span><br><span class=\"line\">                final Class&lt;? extends Drawable&gt; clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);</span><br><span class=\"line\">                constructor = clazz.getConstructor();</span><br><span class=\"line\">                CONSTRUCTOR_MAP.put(className, constructor);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return constructor.newInstance();</span><br><span class=\"line\">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ShapeBuilder : DrawableBuilder &#123;</span><br><span class=\"line\">    private var mRadius = 0f</span><br><span class=\"line\">    private var mWidth = 0f</span><br><span class=\"line\">    private var mHeight = 0f</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    private var mShape = GradientDrawable.RECTANGLE</span><br><span class=\"line\">    private var mSolidColor = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    /**分别设置四个角的圆角*/</span><br><span class=\"line\">    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder &#123;</span><br><span class=\"line\">        ....if(dp)dp2px(leftTop) else leftTop</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun solid(@ColorRes colorId: Int): ShapeBuilder &#123;</span><br><span class=\"line\">        mSolidColor = ContextCompat.getColor(context, colorId)</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 省略其他参数设置方法 详细代码查看源码</span><br><span class=\"line\">    override fun build(): Drawable &#123;</span><br><span class=\"line\">        val gradientDrawable = GradientDrawable()</span><br><span class=\"line\">        gradientDrawable = GradientDrawable()</span><br><span class=\"line\">        gradientDrawable.setColor(mSolidColor)</span><br><span class=\"line\">        gradientDrawable.shape = mShape</span><br><span class=\"line\">        ....其他参数设置</span><br><span class=\"line\">        return gradientDrawable</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"把build模式转换为dsl\"><a href=\"#把build模式转换为dsl\" class=\"headerlink\" title=\"把build模式转换为dsl\"></a>把build模式转换为dsl</h3><p>理论上所有的build模式都可以轻松转换为dsl写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inline fun shapeDrawable(builder: ShapeBuilder.() -&gt; Unit): Drawable &#123;</span><br><span class=\"line\">    return ShapeBuilder().also(builder).build()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用方法 </span><br><span class=\"line\">val drawable = shapeDrawable&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"函数去括号\"><a href=\"#函数去括号\" class=\"headerlink\" title=\"函数去括号\"></a>函数去括号</h3><p>通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//容易阅读</span><br><span class=\"line\">iv1.background = shapeDrawable &#123;</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class=\"line\">    solid(&quot;#ABE2E3&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//多了括号看起来不舒服</span><br><span class=\"line\">iv2.setImageDrawable(shapeDrawable &#123;</span><br><span class=\"line\">    solid(&quot;#84232323&quot;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter</p>\n<h4 id=\"infix函数特点和规范\"><a href=\"#infix函数特点和规范\" class=\"headerlink\" title=\"infix函数特点和规范\"></a>infix函数特点和规范</h4><ul>\n<li>Kotlin允许在不使用括号和点号的情况下调用函数</li>\n<li>必须只有一个参数</li>\n<li>必须是成员函数或扩展函数</li>\n<li>不支持可变参数和带默认值参数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**为所有ImageView添加扩展infix函数 来去掉括号*/</span><br><span class=\"line\">infix fun ImageView.src(drawable: Drawable?) &#123;</span><br><span class=\"line\">    this.setImageDrawable(drawable)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用如下</span><br><span class=\"line\">iv2 src shapeDrawable &#123;</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.OVAL)</span><br><span class=\"line\">    solid(&quot;#E3ABC2&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。</p>\n<h4 id=\"property-setter方式\"><a href=\"#property-setter方式\" class=\"headerlink\" title=\"property setter方式\"></a>property setter方式</h4><p>主要使用kotlin可以简化setter为等号来去括号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) &#123;        this.setImageDrawable(value)    &#125;//使用如下   iv2.src = shapeDrawable &#123;    shape(ShapeBuilder.Shape.OVAL)    solid(&quot;#E3ABC2&quot;)&#125;    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>代码直接创建比起xml方式可以提升性能</li>\n<li>dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格</li>\n<li>通过合适的代码管理可以复用这些代码，比xml管理方便</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>没有as的预览功能，只有通过上机观测</li>\n<li>api还没有覆盖所有drawable属性（例如shape = ring等)</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：</p>\n<blockquote>\n<p><a href=\"https://github.com/forJrking/DrawableDsl\">https://github.com/forJrking/DrawableDsl</a></p>\n</blockquote>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"Android-Drawable竟然还能这么写\"><a href=\"#Android-Drawable竟然还能这么写\" class=\"headerlink\" title=\"Android Drawable竟然还能这么写\"></a>Android Drawable竟然还能这么写</h1><p>通常我们在<code>res/drawable</code>下面自定义<code>shape</code>和<code>selector</code>来满足一些UI的设计，但是由于xml最终转换为<code>drawable</code>需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些<code>drawable</code>，可以在一定程度上降低这些副作用。本篇介绍用<code>kotlin DSL</code>简洁的语法特性来实现常见的<code>drawable</code>。</p>\n<h2 id=\"代码对应效果预览\"><a href=\"#代码对应效果预览\" class=\"headerlink\" title=\"代码对应效果预览\"></a>代码对应效果预览</h2><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"图片\"></p>\n<h2 id=\"集成和使用\"><a href=\"#集成和使用\" class=\"headerlink\" title=\"集成和使用\"></a>集成和使用</h2><h3 id=\"在项目级的build-gradle文件种添加仓库Jitpack\"><a href=\"#在项目级的build-gradle文件种添加仓库Jitpack\" class=\"headerlink\" title=\"在项目级的build.gradle文件种添加仓库Jitpack\"></a>在项目级的build.gradle文件种添加仓库Jitpack</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        maven &#123; url &#x27;https://jitpack.io&#x27; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;        </span><br><span class=\"line\">    implementation &#x27;com.github.forJrking:DrawableDsl:0.0.3’</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"抛弃xml创建方式示例（其他参见demo\"><a href=\"#抛弃xml创建方式示例（其他参见demo\" class=\"headerlink\" title=\"抛弃xml创建方式示例（其他参见demo)\"></a>抛弃xml创建方式示例（其他参见demo)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// infix用法用于去掉括号更加简洁，详细后面说明</span><br><span class=\"line\">image src shapeDrawable &#123;</span><br><span class=\"line\">    //指定shape样式</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class=\"line\">    //圆角，支持4个角单独设置</span><br><span class=\"line\">    corner(20f)</span><br><span class=\"line\">    //solid 颜色</span><br><span class=\"line\">    solid(&quot;#ABE2E3&quot;)</span><br><span class=\"line\">    //stroke 颜色，边框dp，虚线设置</span><br><span class=\"line\">    stroke(R.color.white, 2f, 5f, 8f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//按钮点击样式</span><br><span class=\"line\">btn.background = selectorDrawable &#123;</span><br><span class=\"line\">    //默认样式</span><br><span class=\"line\">    normal = shapeDrawable &#123;</span><br><span class=\"line\">        corner(20f)</span><br><span class=\"line\">        gradient(90, R.color.F97794, R.color.C623AA2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //点击效果</span><br><span class=\"line\">    pressed = shapeDrawable &#123;</span><br><span class=\"line\">        corner(20f)</span><br><span class=\"line\">        solid(&quot;#84232323&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><h3 id=\"xml如何转换成drawable\"><a href=\"#xml如何转换成drawable\" class=\"headerlink\" title=\"xml如何转换成drawable\"></a>xml如何转换成drawable</h3><p>xml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//标签创建</span><br><span class=\"line\">private Drawable inflateFromTag(@NonNull String name) &#123;</span><br><span class=\"line\">    switch (name) &#123;</span><br><span class=\"line\">        case &quot;selector&quot;:</span><br><span class=\"line\">            return new StateListDrawable();</span><br><span class=\"line\">        case &quot;level-list&quot;:</span><br><span class=\"line\">            return new LevelListDrawable();</span><br><span class=\"line\">        case &quot;layer-list&quot;:</span><br><span class=\"line\">            return new LayerDrawable();</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        case &quot;color&quot;:</span><br><span class=\"line\">            return new ColorDrawable();</span><br><span class=\"line\">        case &quot;shape&quot;:</span><br><span class=\"line\">            return new GradientDrawable();</span><br><span class=\"line\">        case &quot;vector&quot;:</span><br><span class=\"line\">            return new VectorDrawable();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//反射创建</span><br><span class=\"line\">private Drawable inflateFromClass(@NonNull String className) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Constructor&lt;? extends Drawable&gt; constructor;</span><br><span class=\"line\">        synchronized (CONSTRUCTOR_MAP) &#123;</span><br><span class=\"line\">            constructor = CONSTRUCTOR_MAP.get(className);</span><br><span class=\"line\">            if (constructor == null) &#123;</span><br><span class=\"line\">                final Class&lt;? extends Drawable&gt; clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);</span><br><span class=\"line\">                constructor = clazz.getConstructor();</span><br><span class=\"line\">                CONSTRUCTOR_MAP.put(className, constructor);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return constructor.newInstance();</span><br><span class=\"line\">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ShapeBuilder : DrawableBuilder &#123;</span><br><span class=\"line\">    private var mRadius = 0f</span><br><span class=\"line\">    private var mWidth = 0f</span><br><span class=\"line\">    private var mHeight = 0f</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    private var mShape = GradientDrawable.RECTANGLE</span><br><span class=\"line\">    private var mSolidColor = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    /**分别设置四个角的圆角*/</span><br><span class=\"line\">    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder &#123;</span><br><span class=\"line\">        ....if(dp)dp2px(leftTop) else leftTop</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun solid(@ColorRes colorId: Int): ShapeBuilder &#123;</span><br><span class=\"line\">        mSolidColor = ContextCompat.getColor(context, colorId)</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 省略其他参数设置方法 详细代码查看源码</span><br><span class=\"line\">    override fun build(): Drawable &#123;</span><br><span class=\"line\">        val gradientDrawable = GradientDrawable()</span><br><span class=\"line\">        gradientDrawable = GradientDrawable()</span><br><span class=\"line\">        gradientDrawable.setColor(mSolidColor)</span><br><span class=\"line\">        gradientDrawable.shape = mShape</span><br><span class=\"line\">        ....其他参数设置</span><br><span class=\"line\">        return gradientDrawable</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"把build模式转换为dsl\"><a href=\"#把build模式转换为dsl\" class=\"headerlink\" title=\"把build模式转换为dsl\"></a>把build模式转换为dsl</h3><p>理论上所有的build模式都可以轻松转换为dsl写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inline fun shapeDrawable(builder: ShapeBuilder.() -&gt; Unit): Drawable &#123;</span><br><span class=\"line\">    return ShapeBuilder().also(builder).build()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用方法 </span><br><span class=\"line\">val drawable = shapeDrawable&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"函数去括号\"><a href=\"#函数去括号\" class=\"headerlink\" title=\"函数去括号\"></a>函数去括号</h3><p>通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//容易阅读</span><br><span class=\"line\">iv1.background = shapeDrawable &#123;</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class=\"line\">    solid(&quot;#ABE2E3&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//多了括号看起来不舒服</span><br><span class=\"line\">iv2.setImageDrawable(shapeDrawable &#123;</span><br><span class=\"line\">    solid(&quot;#84232323&quot;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter</p>\n<h4 id=\"infix函数特点和规范\"><a href=\"#infix函数特点和规范\" class=\"headerlink\" title=\"infix函数特点和规范\"></a>infix函数特点和规范</h4><ul>\n<li>Kotlin允许在不使用括号和点号的情况下调用函数</li>\n<li>必须只有一个参数</li>\n<li>必须是成员函数或扩展函数</li>\n<li>不支持可变参数和带默认值参数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**为所有ImageView添加扩展infix函数 来去掉括号*/</span><br><span class=\"line\">infix fun ImageView.src(drawable: Drawable?) &#123;</span><br><span class=\"line\">    this.setImageDrawable(drawable)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用如下</span><br><span class=\"line\">iv2 src shapeDrawable &#123;</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.OVAL)</span><br><span class=\"line\">    solid(&quot;#E3ABC2&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。</p>\n<h4 id=\"property-setter方式\"><a href=\"#property-setter方式\" class=\"headerlink\" title=\"property setter方式\"></a>property setter方式</h4><p>主要使用kotlin可以简化setter为等号来去括号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) &#123;        this.setImageDrawable(value)    &#125;//使用如下   iv2.src = shapeDrawable &#123;    shape(ShapeBuilder.Shape.OVAL)    solid(&quot;#E3ABC2&quot;)&#125;    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>代码直接创建比起xml方式可以提升性能</li>\n<li>dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格</li>\n<li>通过合适的代码管理可以复用这些代码，比xml管理方便</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>没有as的预览功能，只有通过上机观测</li>\n<li>api还没有覆盖所有drawable属性（例如shape = ring等)</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：</p>\n<blockquote>\n<p><a href=\"https://github.com/forJrking/DrawableDsl\">https://github.com/forJrking/DrawableDsl</a></p>\n</blockquote>\n"},{"title":"搭建教程","date":"2021-08-19T08:41:14.000Z","description":"记录搭建时参考的教程","_content":"\n# Hexo+Butterfly网站搭建教程\n\n## 流程\n\n1. 安装nodejs\n2. 安装hexo\n3. 拉取Butterfly\n4. 配置主题\n\n参考的教程:\n\n+ [小康博客](https://www.antmoe.com/)\n\n+ [Butterfly](https://butterfly.js.org/)\n","source":"_posts/搭建教程.md","raw":"---\ntitle: 搭建教程\ndate: 2021-08-19 16:41:14\ntags: [hexo,主题]\ncategories: 教程\ndescription: 记录搭建时参考的教程\n---\n\n# Hexo+Butterfly网站搭建教程\n\n## 流程\n\n1. 安装nodejs\n2. 安装hexo\n3. 拉取Butterfly\n4. 配置主题\n\n参考的教程:\n\n+ [小康博客](https://www.antmoe.com/)\n\n+ [Butterfly](https://butterfly.js.org/)\n","slug":"搭建教程","published":1,"updated":"2021-08-20T01:05:03.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksjr6j3w000ffgu9h4p39mp3","content":"<h1 id=\"Hexo-Butterfly网站搭建教程\"><a href=\"#Hexo-Butterfly网站搭建教程\" class=\"headerlink\" title=\"Hexo+Butterfly网站搭建教程\"></a>Hexo+Butterfly网站搭建教程</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>安装nodejs</li>\n<li>安装hexo</li>\n<li>拉取Butterfly</li>\n<li>配置主题</li>\n</ol>\n<p>参考的教程:</p>\n<ul>\n<li><p><a href=\"https://www.antmoe.com/\">小康博客</a></p>\n</li>\n<li><p><a href=\"https://butterfly.js.org/\">Butterfly</a></p>\n</li>\n</ul>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"Hexo-Butterfly网站搭建教程\"><a href=\"#Hexo-Butterfly网站搭建教程\" class=\"headerlink\" title=\"Hexo+Butterfly网站搭建教程\"></a>Hexo+Butterfly网站搭建教程</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>安装nodejs</li>\n<li>安装hexo</li>\n<li>拉取Butterfly</li>\n<li>配置主题</li>\n</ol>\n<p>参考的教程:</p>\n<ul>\n<li><p><a href=\"https://www.antmoe.com/\">小康博客</a></p>\n</li>\n<li><p><a href=\"https://butterfly.js.org/\">Butterfly</a></p>\n</li>\n</ul>\n"},{"title":"javaWeb笔记","date":"2021-08-19T08:56:49.000Z","description":"b站javaweb视频笔记","_content":"\n## 1、基本概念\n\n### 1.1、前言\n\nweb开发：\n\n- web，网页的意思  ， www.baidu.com\n- 静态web\n  - html，css\n  - 提供给所有人看的数据始终不会发生变化！\n- 动态web\n  - 淘宝，几乎是所有的网站；\n  - 提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！\n  - 技术栈：Servlet/JSP，ASP，PHP\n\n在Java中，动态web资源开发的技术统称为JavaWeb；\n\n### 1.2、web应用程序\n\nweb应用程序：可以提供浏览器访问的程序；\n\n- a.html、b.html......多个web资源，这些web资源可以被外界访问，对外界提供服务；\n- 你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。\n- URL \n- 这个统一的web资源会被放在同一个文件夹下，web应用程序-->Tomcat：服务器\n- 一个web应用由多部分组成 （静态web，动态web）\n  - html，css，js\n  - jsp，servlet\n  - Java程序\n  - jar包\n  - 配置文件 （Properties）\n\nweb应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；\n\n#### Web应用程序概述\n\n- Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。\n\n- 一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。\n\n#### 应用程序模式\n\n- 应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。\n\n  <img src=\"/img/javaweb/狂神web/clip_image001.jpg\" alt=\"12\" style=\"zoom:80%;\" />\n\n  <img src=\"/img/javaweb/狂神web/clip_image001-1583293770740.jpg\" alt=\"11\" style=\"zoom:67%;\" />\n\n##### 1，C/S架构\n\n- C/S是Client/Server的缩写。\n- Server即服务器，通常采用高性能的PC或工作站，\n- Client即客户端，需要在客户电脑上安装专用的客户端软件。\n- 例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。\n\n##### 2，B/S架构\n\n- B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。\n\n- 在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。\n\n- 例如京东、淘宝、12306等都是B/S架构。\n\n- WEB应用程序一般是B/S模式。\n\n- B/S优点：\n\n  - 耦合度小，利于分工协作，提高开发效率\n\n  - 具有良好的可扩展性和可维护性\n\n  - 升级成本小\n  - 简化了客户端电脑载荷\n  - 减轻了系统维护与升级的成本和工作量\n  - 降低了用户的总体成本\n\n### 1.3、静态web\n\n- `*.htm, *.html`,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；\n\n![1567822802516](/img/javaweb/狂神web/1567822802516.png)\n\n- 静态web存在的缺点\n  - Web页面无法动态更新，所有用户看到都是同一个页面\n    - 轮播图，点击特效：伪动态\n    - JavaScript [实际开发中，它用的最多]\n    - VBScript\n  - 它无法和数据库交互（数据无法持久化，用户无法交互）\n\n\n\n### 1.4、动态web\n\n页面会动态展示： “Web的页面展示的效果因人而异”；\n\n![1567823191289](/img/javaweb/狂神web/1567823191289.png)\n\n缺点：\n\n- 加入服务器的动态web资源出现了错误，我们需要重新编写我们的**后台程序**,重新发布；\n  - 停机维护\n\n优点：\n\n- Web页面可以动态更新，所有用户看到都不是同一个页面\n- 它可以与数据库交互 （数据持久化：注册，商品信息，用户信息........）\n\n![1567823350584](/img/javaweb/狂神web/1567823350584.png)\n\n#### 静态网页与动态网页\n\n- 静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。\n\n- 动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。\n\n\n\n### 1.5、访问Web资源\n\n#### 什么是URL\n\n- URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。\n- 统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。\n- 简单地说，URL就是Web地址，俗称“网址”。\n\n##### URL的组成\n\n- URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。\n\n- 以这样一个URL:http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。\n\n1. ==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。\n\n2. ==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。\n\n3. ==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。\n\n4. ==路径==： 路径（包括请求的资源）由零个或多个 \"/\" 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。\n\n- ==URL的组成:==\n  - 协议\n  - 主机（包括端口号）\n  - 路径\n\n## 2、web服务器\n\n- Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。\n- 下面介绍几种常用的WEB服务器。\n  - ==WebLogic==\n    - BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。\n    - BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，\n    - 它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。\n  - ==Apache==\n    - Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。\n    - 世界上很多著名的网站都是Apache的产物，\n    - 它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。\n  - ==Tomcat==\n    - Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。\n    - 它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。\n    - Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。\n  - ==Jboss==\n    - 是一个基于==J2EE==的==开放源代码==的应用服务器。\n    - JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。\n    - JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。\n    - 但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。\n\n### 2.1、技术讲解\n\n**ASP:**\n\n- 微软：国内最早流行的就是ASP；\n\n- 在HTML中嵌入了VB的脚本，  ASP + COM；\n\n- 在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱\n\n- 维护成本高！\n\n- C# \n\n- IIS\n\n  ```html\n  <h1>\n      <h1><h1>\n          <h1>\n              <h1>\n                  <h1>\n          <h1>\n              <%\n              System.out.println(\"hello\")\n              %>\n              <h1>\n                  <h1>\n     <h1><h1>\n  <h1>\n  ```\n\n  \n\n**php：**\n\n- PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）\n- 无法承载大访问量的情况（局限性）\n\n\n\n**JSP/Servlet : ** \n\nB/S：浏览和服务器\n\nC/S:  客户端和服务器\n\n- sun公司主推的B/S架构\n- 基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)\n- 可以承载三高问题带来的影响；\n- 语法像ASP ， ASP-->JSP , 加强市场强度；\n\n### 2.2、web服务器\n\n服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；\n\n**==IIS==**\n\n微软的； ASP...,Windows中自带的\n\n==**Tomcat**==\n\n![1567824446428](/img/javaweb/狂神web/1567824446428.png)\n\n面向百度编程；\n\nTomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且**免费**，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。\n\nTomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用[服务器](https://baike.baidu.com/item/服务器)，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择\n\nTomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为**9.0。**\n\n**工作3-5年之后，可以尝试手写Tomcat服务器；**\n\n下载tomcat：\n\n1. 安装 or  解压\n2. 了解配置文件及目录结构\n3. 这个东西的作用\n\n\n\n## 3、Tomcat\n\n### 3.1、 安装tomcat\n\ntomcat官网：http://tomcat.apache.org/\n\n![1567825600842](/img/javaweb/狂神web/1567825600842.png)\n\n![1567825627138](/img/javaweb/狂神web/1567825627138.png)\n\n\n\n### 3.2、Tomcat启动和配置\n\n#### Tomcat目录作用描述\n\n| **目录**        | **说明**                                                  |\n| --------------- | --------------------------------------------------------- |\n| ==**bin**==     | 存放各平台下用于启动和停止Tomcat的脚本文件                |\n| ==**conf**==    | 存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml |\n| ==**lib**==     | 存放tomcat服务器所需的jar文件                             |\n| ==**webapps**== | Web应用的发布目录                                         |\n| ==**work**==    | Jsp运行时生成的Servlet文件                                |\n| ==**logs**==    | 存放tomcat的日志文件                                      |\n| ==**temp**==    | Tomcat运行时存放临时文件                                  |\n\n文件夹作用：\n\n![1567825763180](/img/javaweb/狂神web/1567825763180.png)\n\n**启动。关闭Tomcat**\n\n![1567825840657](/img/javaweb/狂神web/1567825840657.png)\n\n访问测试：http://localhost:8080/\n\n可能遇到的问题：\n\n1. Java环境变量没有配置\n2. 闪退问题：需要配置兼容性\n3. 乱码问题：配置文件中设置\n\n### 3.3、配置\n\n![1567825967256](/img/javaweb/狂神web/1567825967256.png)\n\n可以配置启动的端口号\n\n- tomcat的默认端口号为：8080\n- mysql：3306\n- http：80\n- https：443\n\n```xml\n<Connector port=\"8081\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"8443\" />\n```\n\n可以配置主机的名称\n\n- 默认的主机名为：localhost->127.0.0.1\n- 默认网站应用存放的位置为：webapps\n\n```xml\n  <Host name=\"www.qinjiang.com\"  appBase=\"webapps\"\n        unpackWARs=\"true\" autoDeploy=\"true\">\n```\n\n#### 高难度面试题\n\n请你谈谈网站是如何进行访问的！\n\n1. 输入一个域名；回车\n\n2. 检查本机的 C:\\Windows\\System32\\drivers\\etc\\hosts配置文件下有没有这个域名映射；\n\n   1. 有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问\n\n      ```java\n      127.0.0.1       www.qinjiang.com\n      ```\n\n   2. 没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；\n\n   <img src=\"/img/javaweb/狂神web/1567827057913.png\" alt=\"1567827057913\" style=\"zoom: 67%;\" />\n\n3. 可以配置一下环境变量（可选性）\n\n### 3.4、发布一个web网站\n\n不会就先模仿\n\n- 将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了\n\n网站应该有的结构\n\n```java\n--webapps ：Tomcat服务器的web目录\n\t-ROOT\n\t-kuangstudy ：网站的目录名\n\t\t- WEB-INF\n\t\t\t-classes : java程序\n\t\t\t-lib：web应用所依赖的jar包\n\t\t\t-web.xml ：网站配置文件\n\t\t- index.html 默认的首页\n\t\t- static \n            -css\n            \t-style.css\n            -js\n            -img\n         -.....\n```\n\n\n\nHTTP协议 ： 面试\n\nMaven：构建工具\n\n- Maven安装包\n\nServlet 入门\n\n- HelloWorld！\n- Servlet配置\n- 原理\n\n\n\n## 4、Http\n\n### 4.1、什么是HTTP\n\nHTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。\n\n- 文本：html，字符串，~ ….\n- 超文本：图片，音乐，视频，定位，地图…….\n- 80\n\nHttps：安全的\n\n- 443\n\n### 4.2、两个时代\n\n- http1.0\n\n  - HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接\n  - HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\n\n- http2.0\n\n  - HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。\n\n- HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n  \n\n### 4.3、Http请求\n\n#####  HTTP请求方式\n\n- HTTP请求是指从客户端到服务器端的请求消息。\n- 包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。\n- 根据HTTP标准，HTTP请求可以使用多种请求方法。 \n\n- ==客户端---发请求（Request）---服务器==\n\n百度：\n\n```java\nRequest URL:https://www.baidu.com/   请求地址\nRequest Method:GET    get方法/post方法\nStatus Code:200 OK    状态码：200\nRemote（远程） Address:14.215.177.39:443\n```\n\n```java\nAccept:text/html  \nAccept-Encoding:gzip, deflate, br\nAccept-Language:zh-CN,zh;q=0.9    语言\nCache-Control:max-age=0\nConnection:keep-alive\n```\n\n#### 1、请求行\n\n- 请求行中的请求方式：GET\n\n- 请求方式：**Get，Post**，HEAD,DELETE,PUT,TRACT…\n\n  - get：\n\n    - 请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==\n    - GET是最简单的HTTP方法，\n    - 其主要任务就是要求服务器获得一个资源并把资源发回来，\n    - 请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。\n    - GET请求网址http://localhost:8080/FirstWeb/test?userName=Jack&age=20\n    - GET 请求可被缓存\n    - GET 请求有长度限制\n\n  - post：\n\n    - 请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==\n    - POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，\n    - 请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，\n    - 浏览器的地址栏中不显示参数信息。\n    - POST请求网址 [http://localhost:8080/FirstWeb/test ](http://localhost:8080/FirstWeb/test)\n    - POST 请求不会被缓存\n    - POST 请求对数据长度没有要求\n\n    \n\n#### 2、消息头\n\n```java\nAccept：告诉浏览器，它所支持的数据类型\nAccept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1\nAccept-Language：告诉浏览器，它的语言环境\nCache-Control：缓存控制\nConnection：告诉浏览器，请求完成是断开还是保持连接\nHOST：主机..../.\n```\n\n### 4.4、Http响应\n\n- 服务器---响应-----客户端\n\n百度：\n\n```java\nCache-Control:private    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型\n```\n\n#### 1.响应体\n\n```java\nAccept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；\n```\n\n#### 2.响应状态码\n\n200：请求响应成功  200\n\n3xx：请求重定向 \n\n- 重定向：你重新到我给你新位置去；\n\n4xx：找不到资源   404\n\n- 资源不存在；\n\n5xx：服务器代码错误   500       502:网关错误\n\n#### 常见面试题\n\n当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？\n\n\n\n## 5、Maven\n\n**我为什么要学习这个技术？**\n\n1. 在Javaweb开发中，需要使用大量的jar包，我们手动去导入；\n\n2. 如何能够让一个东西自动帮我导入和配置这个jar包。\n\n   由此，Maven诞生了！\n\n\n\n### 5.1 Maven项目架构管理工具\n\n我们目前用来就是方便导入jar包的！\n\nMaven的核心思想：**约定大于配置**\n\n- 有约束，不要去违反。\n\nMaven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；\n\n### 5.2 下载安装Maven\n\n官网;https://maven.apache.org/\n\n![1567842350606](/img/javaweb/狂神web/1567842350606.png)\n\n下载完成后，解压即可；\n\n小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；\n\n\n\n### 5.3 配置环境变量\n\n在我们的系统环境变量中\n\n配置如下配置：\n\n- M2_HOME     maven目录下的bin目录\n- MAVEN_HOME      maven的目录\n- 在系统的path中配置  %MAVEN_HOME%\\bin\n\n![1567842882993](/img/javaweb/狂神web/1567842882993.png)\n\n测试Maven是否安装成功，保证必须配置完毕！\n\n### 5.4 阿里云镜像\n\n![1567844609399](/img/javaweb/狂神web/1567844609399.png)\n\n- 镜像：mirrors\n  - 作用：加速我们的下载\n- 国内建议使用阿里云的镜像\n\n```xml\n<mirror>    <id>nexus-aliyun</id>      <mirrorOf>*,!jeecg,!jeecg-snapshots</mirrorOf>      <name>Nexus aliyun</name>      <url>http://maven.aliyun.com/nexus/content/groups/public</url> </mirror>\n```\n\n### 5.5 本地仓库\n\n在本地的仓库，远程仓库；\n\n**建立一个本地仓库：**localRepository\n\n```xml\n<localRepository>D:\\Environment\\apache-maven-3.6.2\\maven-repo</localRepository>\n```\n\n### 5.6、在IDEA中使用Maven\n\n1. 启动IDEA\n\n2. 创建一个MavenWeb项目\n\n   ![1567844785602](/img/javaweb/狂神web/1567844785602.png)\n\n   ![1567844841172](/img/javaweb/狂神web/1567844841172.png)\n\n   ![1567844917185](/img/javaweb/狂神web/1567844917185.png)\n\n   ![1567844956177](/img/javaweb/狂神web/1567844956177.png)\n\n   ![1567845029864](/img/javaweb/狂神web/1567845029864.png)\n\n3. 等待项目初始化完毕\n\n   ![1567845105970](/img/javaweb/狂神web/1567845105970.png)\n\n   ![1567845137978](/img/javaweb/狂神web/1567845137978.png)\n\n4. 观察maven仓库中多了什么东西？\n\n5. IDEA中的Maven设置\n\n   注意：IDEA项目创建成功后，看一眼Maven的配置\n\n   ![1567845341956](/img/javaweb/狂神web/1567845341956.png)\n\n   ![1567845413672](/img/javaweb/狂神web/1567845413672.png)\n\n6. 到这里，Maven在IDEA中的配置和使用就OK了!\n\n### 5.7、创建一个普通的Maven项目\n\n![1567845557744](/img/javaweb/狂神web/1567845557744.png)\n\n![1567845717377](/img/javaweb/狂神web/1567845717377.png)\n\n这个只有在Web应用下才会有！\n\n![1567845782034](/img/javaweb/狂神web/1567845782034.png)\n\n### 5.8 标记文件夹功能\n\n![1567845910728](/img/javaweb/狂神web/1567845910728.png)\n\n![1567845957139](/img/javaweb/狂神web/1567845957139.png)\n\n![1567846034906](/img/javaweb/狂神web/1567846034906.png)\n\n![1567846073511](/img/javaweb/狂神web/1567846073511.png)\n\n### 5.9 在 IDEA中配置Tomcat\n\n![1567846140348](/img/javaweb/狂神web/1567846140348.png)\n\n![1567846179573](/img/javaweb/狂神web/1567846179573.png)\n\n![1567846234175](/img/javaweb/狂神web/1567846234175.png)\n\n![1567846369751](/img/javaweb/狂神web/1567846369751.png)\n\n解决警告问题\n\n必须要的配置：**为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；**\n\n![1567846421963](/img/javaweb/狂神web/1567846421963.png)\n\n![1567846546465](/img/javaweb/狂神web/1567846546465.png)\n\n![1567846559111](/img/javaweb/狂神web/1567846559111.png)\n\n![1567846640372](/img/javaweb/狂神web/1567846640372.png)\n\n### 5.10 pom文件\n\npom.xml 是Maven的核心配置文件\n\n![1567846784849](/img/javaweb/狂神web/1567846784849.png)\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--Maven版本和头文件-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <!--这里就是我们刚才配置的GAV-->\n  <groupId>com.kuang</groupId>\n  <artifactId>javaweb-01-maven</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <!--Package：项目的打包方式\n  jar：java应用\n  war：JavaWeb应用\n  -->\n  <packaging>war</packaging>\n\n\n  <!--配置-->\n  <properties>\n    <!--项目的默认构建编码-->\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <!--编码版本-->\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n  </properties>\n\n  <!--项目依赖-->\n  <dependencies>\n    <!--具体依赖的jar包配置文件-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n    </dependency>\n  </dependencies>\n\n  <!--项目构建用的东西-->\n  <build>\n    <finalName>javaweb-01-maven</finalName>\n    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\n      <plugins>\n        <plugin>\n          <artifactId>maven-clean-plugin</artifactId>\n          <version>3.1.0</version>\n        </plugin>\n        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\n        <plugin>\n          <artifactId>maven-resources-plugin</artifactId>\n          <version>3.0.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.8.0</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>2.22.1</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-war-plugin</artifactId>\n          <version>3.2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>2.5.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>2.8.2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n</project>\n\n```\n\n![1567847410771](/img/javaweb/狂神web/1567847410771.png)\n\n\n\nmaven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：\n\n```xml\n<!--在build中配置resources，来防止我们资源导出失败的问题--><build>    <resources>        <resource>            <directory>src/main/resources</directory>            <includes>                <include>**/*.properties</include>                <include>**/*.xml</include>            </includes>            <filtering>true</filtering>        </resource>        <resource>            <directory>src/main/java</directory>            <includes>                <include>**/*.properties</include>                <include>**/*.xml</include>            </includes>            <filtering>true</filtering>        </resource>    </resources></build>\n```\n\n\n\n### 5.12 IDEA操作\n\n![1567847630808](/img/javaweb/狂神web/1567847630808.png)\n\n\n\n![1567847662429](/img/javaweb/狂神web/1567847662429.png)\n\n\n\n### 5.13 解决遇到的问题\n\n1. Maven 3.6.2\n\n   解决方法：降级为3.6.1\n\n   ![1567904721301](/img/javaweb/狂神web/1567904721301.png)\n\n2. Tomcat闪退\n\n   \n\n3. IDEA中每次都要重复配置Maven\n   在IDEA中的全局默认配置中去配置\n\n   ![1567905247201](/img/javaweb/狂神web/1567905247201.png)\n\n   ![1567905291002](/img/javaweb/狂神web/1567905291002.png)\n\n4. Maven项目中Tomcat无法配置\n\n5. maven默认web项目中的web.xml版本问题\n\n   ![1567905537026](/img/javaweb/狂神web/1567905537026.png)\n\n6. 替换为webapp4.0版本和tomcat一致\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?><web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"         version=\"4.0\"         metadata-complete=\"true\"></web-app>\n   ```\n\n   \n\n7. Maven仓库的使用\n\n   地址：https://mvnrepository.com/\n\n   ![1567905870750](/img/javaweb/狂神web/1567905870750.png)\n\n   ![1567905982979](/img/javaweb/狂神web/1567905982979.png)\n\n   ![1567906017448](/img/javaweb/狂神web/1567906017448.png)\n\n   ![1567906039469](/img/javaweb/狂神web/1567906039469.png)\n\n\n\n## 6、Servlet\n\n### 6.1、Servlet简介\n\n- Servlet就是sun公司开发动态web的一门技术\n- Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：\n  - 编写一个类，实现Servlet接口\n  - 把开发好的Java类部署到web服务器中。\n\n- **把实现了Servlet接口的Java程序叫做，Servlet**\n- \n\n### 6.2、HelloServlet\n\n#### 1 Servlet入门\n\n- Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。\n\n- 狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。\n\n- Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。\n\n- 这个==过程==为：\n\n  1、客户端发送请求至服务器端；\n\n  2、服务器将请求信息发送至 Servlet；\n\n  3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；\n\n  4、服务器将响应返回给客户端。\n\n- Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet\n\n- 配置web.xml\n\n```xml\n<!-- 注册一个Servlet --><servlet>   <!-- Servlet标识名 -->   <servlet-name>HelloServlet</servlet-name>   <!-- Servlet类的全限定名 -->   <servlet-class>com.aaa.servlet.HelloServlet</servlet-class></servlet><!-- 配置Servlet映射信息 --><servlet-mapping>   <!-- Servlet标识名和上面一致 -->   <servlet-name>HelloServlet</servlet-name>   <!-- 访问路径 -->   <url-pattern>/hello</url-pattern></servlet-mapping>\n```\n\n\n\n1. 构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；\n\n2. 关于Maven父子工程的理解：\n\n   父项目中会有\n\n   ```xml\n       <modules>        <module>servlet-01</module>    </modules>\n   ```\n\n   子项目会有\n\n   ```xml\n       <parent>        <artifactId>javaweb-02-servlet</artifactId>        <groupId>com.kuang</groupId>        <version>1.0-SNAPSHOT</version>    </parent>\n   ```\n\n   父项目中的java子项目可以直接使用\n\n   ```java\n   son extends father\n   ```\n\n3. Maven环境优化\n\n   1. 修改web.xml为最新的\n   2. 将maven的结构搭建完整\n\n4. 编写一个Servlet程序\n\n   ![1567911804700](/img/javaweb/狂神web/1567911804700.png)\n\n   1. 编写一个普通类\n\n   2. 实现Servlet接口，这里我们直接继承HttpServlet\n\n      ```java\n      public class HelloServlet extends HttpServlet {        //由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(\"Hello,Serlvet\");    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n      ```\n\n5. 编写Servlet的映射\n\n   为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；\n\n   ```xml\n       <!--注册Servlet-->\n       <servlet>\n           <servlet-name>hello</servlet-name>\n           <servlet-class>com.kuang.servlet.HelloServlet</servlet-class>\n       </servlet>\n       <!--Servlet的请求路径-->\n       <servlet-mapping>\n           <servlet-name>hello</servlet-name>\n           <url-pattern>/hello</url-pattern>\n       </servlet-mapping>\n   \n   ```\n\n6. 配置Tomcat\n\n   注意：配置项目发布的路径就可以了\n\n7. 启动测试，OK！\n\n\n\n#### 2 ServletAPI层次结构\n\n**核心技能部分**\n\n     ![222](/img/javaweb/狂神web//clip_image001.png)\n    \n       ![Serv et  Servi  Serv IetCmf i g  -se rServIe 'Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/img/javaweb/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  \n\n**Servlet原理**\n\n##### Servlet接口\n\n- Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。\n\n##### ServletConfig接口\n\n- 在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。\n\n- **ServletConfig的常用方法**\n\n| **方法**                              | **功能说明**                          |\n| ------------------------------------- | ------------------------------------- |\n| String  getInitParameter(String name) | 获取web.xml中名称为name的初始化参数值 |\n| ServletContext  getServletContext()   | 返回Servlet上下文对象                 |\n\n##### GenericServlet类\n\n- 抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。\n\n- **GenericServlet类的常用方法**\n\n| **方法**                              | **功能说明**                 |\n| ------------------------------------- | ---------------------------- |\n| void  init(ServletConfig config)      | 初始化方法                   |\n| String  getInitParameter(String name) | 返回名称为name的初始化参数值 |\n| ServletContext  getServletCotext()    | 返回ServletContext对象       |\n\n##### HttpServlet类\n\n- 抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。\n\n- **HttpServlet类的常用方法**\n\n| **方法**                                                     | **功能说明**                                                 |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| void ==service==  (ServletRequest reg, ServletResponse res)  | 接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。 |\n| void  ==doGet==(HttpServletRequest reg, HttpServletResponse res) | 处理GET请求                                                  |\n| void  ==doPost==(HttpServletRequest reg, HttpServletResponse res) | 处理POST请求                                                 |\n\n- 如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：\n\n  (1) 重写doGet方法来处理GET请求。\n\n  (2) 重写doPost方法来处理POST请求。\n\n  (3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。\n\n  (4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。\n\n- **提示：**\n\n  - HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。\n\n##### HttpServletRequest接口\n\n- HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。\n- 容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。\n\n- **HttpServleRequest 接口的常用方法**\n\n| **方法**                                         | **功能说明**                                                 |\n| ------------------------------------------------ | ------------------------------------------------------------ |\n| String  ==getParameter==(String name)            | 根据页面表单元素名称获取页面提交数据                         |\n| string[]  ==getPararneterValues== (String name)  | 获取页面有重名表单元素（比如复选框）的值                     |\n| void  ==setCharacterEncoding== (String name)     | 设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。 |\n| void  ==setAttribute==(String name,Object value) | 设置请求的参数                                               |\n| ==getRequestDispatcher==(String  path)           | 返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源 |\n\n##### HttpServletResponse接口\n\n- HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。\n- 容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。\n- Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。\n\n- **HttpServleRequest 接口的常用方法**\n\n| **方法**                                   | **功能说明**       |\n| ------------------------------------------ | ------------------ |\n| setContentType(\"text/html;charset=utf-8\"); | 设置响应的内容类型 |\n| PrintWriter  response.getWriter()          | 获得响应的输出流   |\n| response.sendRedirect(redirect)            | 重定向到指定的网址 |\n\n#####  转发与重定向\n\n**1 转发**\n\n- 转发属于**服务器跳转**。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。\n\n- 整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。\n\n- 而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。\n\n- 转发的作用：在多个页面交互过程中实现请求数据的共享。\n\n- 实现转发分为两个步骤：\n\n  1、 需要先获取RequestDispatcher实例\n\n  dispatcher=request.getRequestDispatcher(\"servlet2\");\n\n  2、 调用forward方法\n\n  dispatcher.forward(request, response);\n\n \n\n**2 重定向**\n\n- 重定向是**客户端跳转**。\n\n- 重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。\n\n- 因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。\n\n- 同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。\n\n- 重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现\n\n  \n\n**3 转发与重定向的区别**\n\n- 转发是继续传递、处理==同一个请求==，在==服务器端==进行；\n  - 重定向在==客户端==运行，会产生==新请求==。\n\n- 转发时浏览器地址栏中显示的是==初次发出请求的地址==；\n  - 重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。\n\n- 转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；\n  - 重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。\n\n- 转发只能转发给==当前web应用==的资源； \n  - 重定可以重定向到==任何==资源。\n\n\n\n##### Servlet应用\n\n**使用Servlet处理客户端请求** \n\n前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,\n\n**获得Servlet初始化参数**\n\n通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，\n\n**Servlet访问数据库**\n\n进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。\n\n##### ==Servlet的生命周期==\n\nServlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：\n\n1. 加载\n2. 实例化\n3. 初始化\n4. 服务\n5. 销毁\n\n### 6.3、Servlet原理\n\nServlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：\n\n![1567913793252](/img/javaweb/狂神web/1567913793252.png)\n\n### 6.4、Mapping问题\n\n1. 一个Servlet可以指定一个映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>\n   ```\n\n2. 一个Servlet可以指定多个映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello2</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello3</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello4</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello5</url-pattern>    </servlet-mapping>\n   ```\n\n3. 一个Servlet可以指定通用映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello/*</url-pattern>    </servlet-mapping>\n   ```\n\n4. 默认请求路径\n\n   ```xml\n       <!--默认请求路径-->    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/*</url-pattern>    </servlet-mapping>\n   ```\n\n5. 指定一些后缀或者前缀等等….\n\n   ```xml\n   <!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --><servlet-mapping>    <servlet-name>hello</servlet-name>    <url-pattern>*.qinjiang</url-pattern></servlet-mapping>\n   ```\n\n6. 优先级问题\n   指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；\n\n   ```xml\n   <!--404--><servlet>    <servlet-name>error</servlet-name>    <servlet-class>com.kuang.servlet.ErrorServlet</servlet-class></servlet><servlet-mapping>    <servlet-name>error</servlet-name>    <url-pattern>/*</url-pattern></servlet-mapping>\n   ```\n\n   \n\n### 6.5、ServletContext\n\nweb容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；\n\n#### 1、共享数据\n\n我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；\n\n```java\npublic class HelloServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {                //this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = \"秦疆\"; //数据        context.setAttribute(\"username\",username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    }}\n```\n\n```java\npublic class GetServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        ServletContext context = this.getServletContext();        String username = (String) context.getAttribute(\"username\");        resp.setContentType(\"text/html\");        resp.setCharacterEncoding(\"utf-8\");        resp.getWriter().print(\"名字\"+username);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n```XML\n    <servlet>        <servlet-name>hello</servlet-name>        <servlet-class>com.kuang.servlet.HelloServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>    <servlet>        <servlet-name>getc</servlet-name>        <servlet-class>com.kuang.servlet.GetServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>getc</servlet-name>        <url-pattern>/getc</url-pattern>    </servlet-mapping>\n```\n\n测试访问结果；\n\n\n\n#### 2、获取初始化参数\n\n```xml\n    <!--配置一些web应用初始化参数-->    <context-param>        <param-name>url</param-name>        <param-value>jdbc:mysql://localhost:3306/mybatis</param-value>    </context-param>\n```\n\n```java\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    ServletContext context = this.getServletContext();    String url = context.getInitParameter(\"url\");    resp.getWriter().print(url);}\n```\n\n#### 3、请求转发\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    ServletContext context = this.getServletContext();    System.out.println(\"进入了ServletDemo04\");    //RequestDispatcher requestDispatcher = context.getRequestDispatcher(\"/gp\"); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(\"/gp\").forward(req,resp);}\n```\n\n<img src=\"/img/javaweb/狂神web/1567924457532.png\" alt=\"1567924457532\" style=\"zoom: 80%;\" />\n\n#### 4、读取资源文件\n\nProperties\n\n- 在java目录下新建properties\n- 在resources目录下新建properties\n\n发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:\n\n思路：需要一个文件流；\n\n```properties\nusername=root12312password=zxczxczxc\n```\n\n```java\npublic class ServletDemo05 extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        InputStream is = this.getServletContext().getResourceAsStream(\"/WEB-INF/classes/com/kuang/servlet/aa.properties\");        Properties prop = new Properties();        prop.load(is);        String user = prop.getProperty(\"username\");        String pwd = prop.getProperty(\"password\");        resp.getWriter().print(user+\":\"+pwd);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n访问测试即可ok；\n\n### 6.6、HttpServletResponse\n\nweb服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；\n\n- 如果要获取客户端请求过来的参数：找HttpServletRequest\n- 如果要给客户端响应一些信息：找HttpServletResponse\n\n#### 1、简单分类\n\n负责向浏览器发送数据的方法\n\n```java\nServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;\n```\n\n负责向浏览器发送响应头的方法\n\n```java\n    void setCharacterEncoding(String var1);    void setContentLength(int var1);    void setContentLengthLong(long var1);    void setContentType(String var1);    void setDateHeader(String var1, long var2);    void addDateHeader(String var1, long var2);    void setHeader(String var1, String var2);    void addHeader(String var1, String var2);    void setIntHeader(String var1, int var2);    void addIntHeader(String var1, int var2);\n```\n\n响应的状态码\n\n```java\n    int SC_CONTINUE = 100;\n    int SC_SWITCHING_PROTOCOLS = 101;\n    int SC_OK = 200;\n    int SC_CREATED = 201;\n    int SC_ACCEPTED = 202;\n    int SC_NON_AUTHORITATIVE_INFORMATION = 203;\n    int SC_NO_CONTENT = 204;\n    int SC_RESET_CONTENT = 205;\n    int SC_PARTIAL_CONTENT = 206;\n    int SC_MULTIPLE_CHOICES = 300;\n    int SC_MOVED_PERMANENTLY = 301;\n    int SC_MOVED_TEMPORARILY = 302;\n    int SC_FOUND = 302;\n    int SC_SEE_OTHER = 303;\n    int SC_NOT_MODIFIED = 304;\n    int SC_USE_PROXY = 305;\n    int SC_TEMPORARY_REDIRECT = 307;\n    int SC_BAD_REQUEST = 400;\n    int SC_UNAUTHORIZED = 401;\n    int SC_PAYMENT_REQUIRED = 402;\n    int SC_FORBIDDEN = 403;\n    int SC_NOT_FOUND = 404;\n    int SC_METHOD_NOT_ALLOWED = 405;\n    int SC_NOT_ACCEPTABLE = 406;\n    int SC_PROXY_AUTHENTICATION_REQUIRED = 407;\n    int SC_REQUEST_TIMEOUT = 408;\n    int SC_CONFLICT = 409;\n    int SC_GONE = 410;\n    int SC_LENGTH_REQUIRED = 411;\n    int SC_PRECONDITION_FAILED = 412;\n    int SC_REQUEST_ENTITY_TOO_LARGE = 413;\n    int SC_REQUEST_URI_TOO_LONG = 414;\n    int SC_UNSUPPORTED_MEDIA_TYPE = 415;\n    int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;\n    int SC_EXPECTATION_FAILED = 417;\n    int SC_INTERNAL_SERVER_ERROR = 500;\n    int SC_NOT_IMPLEMENTED = 501;\n    int SC_BAD_GATEWAY = 502;\n    int SC_SERVICE_UNAVAILABLE = 503;\n    int SC_GATEWAY_TIMEOUT = 504;\n    int SC_HTTP_VERSION_NOT_SUPPORTED = 505;\n```\n\n#### 2、下载文件\n\n1. 向浏览器输出消息 （一直在讲，就不说了）\n2. 下载文件\n   1. 要获取下载文件的路径\n   2. 下载的文件名是啥？\n   3. 设置想办法让浏览器能够支持下载我们需要的东西\n   4. 获取下载文件的输入流\n   5. 创建缓冲区\n   6. 获取OutputStream对象\n   7. 将FileOutputStream流写入到buffer缓冲区\n   8. 使用OutputStream将缓冲区中的数据输出到客户端！\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    // 1. 要获取下载文件的路径\n    String realPath = \"F:\\\\班级管理\\\\西开【19525】\\\\2、代码\\\\JavaWeb\\\\javaweb-02-servlet\\\\response\\\\target\\\\classes\\\\秦疆.png\";\n    System.out.println(\"下载文件的路径：\"+realPath);\n    // 2. 下载的文件名是啥？\n    String fileName = realPath.substring(realPath.lastIndexOf(\"\\\\\") + 1);\n    // 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码\n    resp.setHeader(\"Content-Disposition\",\"attachment;filename=\"+URLEncoder.encode(fileName,\"UTF-8\"));\n    // 4. 获取下载文件的输入流\n    FileInputStream in = new FileInputStream(realPath);\n    // 5. 创建缓冲区\n    int len = 0;\n    byte[] buffer = new byte[1024];\n    // 6. 获取OutputStream对象\n    ServletOutputStream out = resp.getOutputStream();\n    // 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！\n    while ((len=in.read(buffer))>0){\n        out.write(buffer,0,len);\n    }\n\n    in.close();\n    out.close();\n}\n```\n\n#### 3、验证码功能\n\n验证怎么来的？\n\n- 前端实现\n- 后端实现，需要用到 Java 的图片类，生产一个图片\n\n```java\npackage com.kuang.servlet;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random;public class ImageServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //如何让浏览器3秒自动刷新一次;        resp.setHeader(\"refresh\",\"3\");                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(\"image/jpeg\");        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(\"expires\",-1);        resp.setHeader(\"Cache-Control\",\"no-cache\");        resp.setHeader(\"Pragma\",\"no-cache\");        //把图片写给浏览器        ImageIO.write(image,\"jpg\", resp.getOutputStream());    }    //生成随机数    private String makeNum(){        Random random = new Random();        String num = random.nextInt(9999999) + \"\";        StringBuffer sb = new StringBuffer();        for (int i = 0; i < 7-num.length() ; i++) {            sb.append(\"0\");        }        num = sb.toString() + num;        return num;    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n#### 4、实现重定向\n\n![1567931587955](/img/javaweb/狂神web/1567931587955.png)\n\nB一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向\n\n常见场景：\n\n- 用户登录\n\n```java\nvoid sendRedirect(String var1) throws IOException;\n```\n\n测试：\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    /*        resp.setHeader(\"Location\",\"/r/img\");        resp.setStatus(302);         */    resp.sendRedirect(\"/r/img\");//重定向}\n```\n\n面试题：请你聊聊重定向和转发的区别？\n\n相同点\n\n- 页面都会实现跳转\n\n不同点\n\n- 请求转发的时候，url不会产生变化\n- 重定向时候，url地址栏会发生变化；\n\n![1567932163430](/img/javaweb/狂神web/1567932163430.png)\n\n#### 5、简单实现登录重定向\n\n```jsp\n<%--这里提交的路径，需要寻找到项目的路径--%><%--${pageContext.request.contextPath}代表当前的项目--%><form action=\"${pageContext.request.contextPath}/login\" method=\"get\">    用户名：<input type=\"text\" name=\"username\"> <br>    密码：<input type=\"password\" name=\"password\"> <br>    <input type=\"submit\"></form>\n```\n\n```JAVA\n    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //处理请求        String username = req.getParameter(\"username\");        String password = req.getParameter(\"password\");        System.out.println(username+\":\"+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(\"/r/success.jsp\");    }\n```\n\n```xml\n  <servlet>    <servlet-name>requset</servlet-name>    <servlet-class>com.kuang.servlet.RequestTest</servlet-class>  </servlet>  <servlet-mapping>    <servlet-name>requset</servlet-name>    <url-pattern>/login</url-pattern>  </servlet-mapping>\n```\n\n```jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %><html><head>    <title>Title</title></head><body><h1>Success</h1></body></html>\n```\n\n### 6.7、HttpServletRequest\n\nHttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；\n\n![1567933996830](/img/javaweb/狂神web/1567933996830.png)\n\n![1567934023106](/img/javaweb/狂神web/1567934023106.png)\n\n#### 获取参数，请求转发\n\n![1567934110794](/img/javaweb/狂神web/1567934110794.png)\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    req.setCharacterEncoding(\"utf-8\");    resp.setCharacterEncoding(\"utf-8\");    String username = req.getParameter(\"username\");    String password = req.getParameter(\"password\");    String[] hobbys = req.getParameterValues(\"hobbys\");    System.out.println(\"=============================\");    //后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(\"=============================\");    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(\"/success.jsp\").forward(req,resp);}\n```\n\n**面试题：请你聊聊重定向和转发的区别？**\n\n相同点\n\n- 页面都会实现跳转\n\n不同点\n\n- 请求转发的时候，url不会产生变化   307\n- 重定向时候，url地址栏会发生变化； 302\n\n### 6.8、处理中文乱码\n\n```xml\n注册<form action=\"show.jsp\" method=\"post\">  <input  type=\"text\" name=\"name\">  <input  type=\"submit\" value=\"注册\">  </form>     <%//脚本段   String name = request.getParameter(\"name\");    %>        name:<%=name %>   //表达式     This is my JSP page. <br>//处理中文乱码1.   <%   request.setCharacterEncoding(\"UTF-8\");   response.setContentType(\"text/html;charset=utf-8\");   String name = request.getParameter(\"name\");   %>2.    <%   response.setContentType(\"text/html;charset=utf-8\");   String name = request.getParameter(\"name\");      name = new String(name.getBytes(\"ISO-8859-1\"),\"utf-8\");    %>        name:<%=name %>\n```\n\n\n\n## 7、Cookie、Session\n\n### 7.1、会话\n\n**会话**：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；\n\n**有状态会话**：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；\n\n**你能怎么证明你是西开的学生？**\n\n你              西开\n\n1. 发票                西开给你发票\n2. 学校登记        西开标记你来过了\n\n**一个网站，怎么证明你来过？**\n\n客户端              服务端\n\n1. 服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie\n2. 服务器登记你来过了，下次你来的时候我来匹配你； seesion\n\n\n\n### 7.2、保存会话的两种技术\n\n**cookie**\n\n- 客户端技术   （响应，请求）\n\n**session**\n\n- 服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！\n\n\n\n常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！\n\n### 7.3、Cookie\n\n![1568344447291](/img/javaweb/狂神web/1568344447291.png)\n\n1. 从请求中拿到cookie信息\n2. 服务器响应给客户端cookie\n\n```java\nCookie[] cookies = req.getCookies(); //获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(\"lastLoginTime\", System.currentTimeMillis()+\"\"); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie\n```\n\n**cookie：一般会保存在本地的 用户目录下 appdata；**\n\n\n\n一个网站cookie是否存在上限！**聊聊细节问题**\n\n- 一个Cookie只能保存一个信息；\n- 一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；\n- Cookie大小有限制4kb；\n- 300个cookie浏览器上限\n\n\n\n**删除Cookie；**\n\n- 不设置有效期，关闭浏览器，自动失效；\n- 设置有效期时间为 0 ；\n\n\n\n**编码解码：**\n\n```java\nURLEncoder.encode(\"秦疆\",\"utf-8\")URLDecoder.decode(cookie.getValue(),\"UTF-8\")\n```\n\n\n\n### 7.4、Session（重点）\n\n![1568344560794](/img/javaweb/狂神web/1568344560794.png)\n\n什么是Session：\n\n- 服务器会给每一个用户（浏览器）创建一个Seesion对象；\n- 一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；\n- 用户登录之后，整个网站它都可以访问！--> 保存用户的信息；保存购物车的信息…..\n\n![1568342773861](/img/javaweb/狂神web/1568342773861.png)\n\nSession和cookie的区别：\n\n- Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）\n- Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）\n- Session对象由服务创建；\n\n\n\n使用场景：\n\n- 保存一个登录用户的信息；\n- 购物车信息；\n- 在整个网站中经常会使用的数据，我们将它保存在Session中；\n\n\n\n使用Session：\n\n```java\npackage com.kuang.servlet;\n\nimport com.kuang.pojo.Person;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\npublic class SessionDemo01 extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        \n        //解决乱码问题\n        req.setCharacterEncoding(\"UTF-8\");\n        resp.setCharacterEncoding(\"UTF-8\");\n        resp.setContentType(\"text/html;charset=utf-8\");\n        \n        //得到Session\n        HttpSession session = req.getSession();\n        //给Session中存东西\n        session.setAttribute(\"name\",new Person(\"秦疆\",1));\n        //获取Session的ID\n        String sessionId = session.getId();\n\n        //判断Session是不是新创建\n        if (session.isNew()){\n            resp.getWriter().write(\"session创建成功,ID:\"+sessionId);\n        }else {\n            resp.getWriter().write(\"session以及在服务器中存在了,ID:\"+sessionId);\n        }\n\n        //Session创建的时候做了什么事情；\n//        Cookie cookie = new Cookie(\"JSESSIONID\",sessionId);\n//        resp.addCookie(cookie);\n\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doGet(req, resp);\n    }\n}\n\n//得到Session\nHttpSession session = req.getSession();\n\nPerson person = (Person) session.getAttribute(\"name\");\n\nSystem.out.println(person.toString());\n\nHttpSession session = req.getSession();\nsession.removeAttribute(\"name\");\n//手动注销Session\nsession.invalidate();\n```\n\n\n\n**会话自动过期：web.xml配置**\n\n```xml\n<!--设置Session默认的失效时间--><session-config>    <!--15分钟后Session自动失效，以分钟为单位-->    <session-timeout>15</session-timeout></session-config>\n```\n\n\n\n![1568344679763](/img/javaweb/狂神web/1568344679763.png)\n\n\n\n## 8、JSP\n\n==**静态网页&动态网页**==\n\n|          | **静态网页** | **动态网页**                |\n| -------- | ------------ | --------------------------- |\n| 组成     | html+js+css  | jsp+html;asp+html;php+html; |\n| 交互     | 不可交互     | 可交互                      |\n| 运行方式 | 客户端运行   | 服务端生成，客户端运行      |\n| 数据库   | 无数据库连接 | 连接数据库                  |\n\n### 8.1、什么是JSP\n\n- Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！\n- http://127.0.0.1:8080/login/index.jsp\n\n- 最大的特点：\n  - 写JSP就像在写HTML\n  - 区别：\n    - HTML只给用户提供静态的数据\n    - JSP页面中可以嵌入JAVA代码，为用户提供动态数据；\n\n- **工作原理**\n\n  - 客户端请求\n  - 把 *.jsp 翻译成 *.java \n  - 编译为 *.class\n  - 执行生成servlet\n  - 反馈结果给客户端显示\n        第二次访问 有改动 执行上述过程 \n        无改动 直接执行\n\n  - ![123](/img/javaweb/狂神web/clip_image001-1583305097106.png)\n  - <img src=\"/img/javaweb/狂神web/clip_image001-1583305111348.png\" alt=\"112\" style=\"zoom:80%;\" />\n  - ![44](/img/javaweb/狂神web/clip_image001-1583305154041.png)\n  - ![54](/img/javaweb/狂神web/clip_image001-1583305166669.png)\n\n### 8.2、JSP原理\n\n思路：JSP到底怎么执行的！\n\n- 代码层面没有任何问题\n\n- 服务器内部工作\n\n  tomcat中有一个work目录；\n\n  IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录\n\n  ![1568345873736](/img/javaweb/狂神web/1568345873736.png)\n\n  我电脑的地址：\n\n  ```java\n  C:\\Users\\Administrator\\.IntelliJIdea2018.1\\system\\tomcat\\Unnamed_javaweb-session-cookie\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp\n  ```\n\n  发现页面转变成了Java程序！\n\n  ![1568345948307](/img/javaweb/狂神web/1568345948307.png)\n\n\n\n**浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！**\n\nJSP最终也会被转换成为一个Java类！\n\n**JSP 本质上就是一个Servlet**\n\n```java\n//初始化  public void _jspInit() {        }//销毁  public void _jspDestroy() {  }//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      \n```\n\n1. 判断请求\n\n2. 内置一些对象\n\n   ```java\n   final javax.servlet.jsp.PageContext pageContext;  //页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应\n   ```\n\n3. 输出页面前增加的代码\n\n   ```java\n   response.setContentType(\"text/html\");       //设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;\n   ```\n\n4. 以上的这些个对象我们可以在JSP页面中直接使用！\n\n![1568347078207](/img/javaweb/狂神web/1568347078207.png)\n\n\n\n在JSP页面中；\n\n只要是 JAVA代码就会原封不动的输出；\n\n如果是HTML代码，就会被转换为：\n\n```java\nout.write(\"<html>\\r\\n\");\n```\n\n这样的格式，输出到前端！\n\n\n\n### 8.3、JSP基础语法\n\n任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！\n\n#### JSP 的组成 [**JSP页面的构成**](https://www.cnblogs.com/yangyquin/p/5430231.html)\n\n <img src=\"/img/javaweb/狂神web/clip_image001-1583305406375.png\" alt=\"54\" style=\"zoom:50%;\" />\n\n**==1 静态页面==**\n\n##### ==2 指令==\n\n```xml\n<%@ %><!--page--><%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"  contentType=\"text/html; charset=UTF-8\" isErrorPage=\"true\"%><!--include--><%@ include file=\"foot.html\" %>   静态引入/静态包含<%@ include file=\"foot.jsp\" %>使用jsp要删除<% String path = request.getContextPath( );   String basePath = request.getScheme( )+\"://\"+request %><base href=\"<%=basePath%>\"><jsp:include page=\"foot.html\"></jsp:include>   动态引入/动态包含<jsp:include page=\"foot.jsp\"></jsp:include> (可使用html/jsp)    <!--taglib--><%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>     <!--======================================================================-->    <%@page args.... %><%@include file=\"\"%><%--@include会将两个页面合二为一--%><%@include file=\"common/header.jsp\"%><h1>网页主体</h1><%@include file=\"common/footer.jsp\"%><hr><%--jSP标签    jsp:include：拼接页面，本质还是三个    --%><jsp:include page=\"/common/header.jsp\"/><h1>网页主体</h1><jsp:include page=\"/common/footer.jsp\"/>\n```\n\n##### ==3 声明==\n\n- JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！\n\n```xml\n在JSP页面中定义变量,方法或类  <%!  %><%!  String s = \"这是一个声明\" ;    public  int  add(int x,int y ){         return x+y;     } %>=========================================<%!static {  System.out.println(\"Loading Servlet!\");}private int globalVar = 0;public void kuang(){  System.out.println(\"进入了方法Kuang！\");}%>\n```\n\n##### ==4 表达式==\n\n```xml\n<%= 变量或表达式%> basePath:<%=basePath%><body>    <h1>当前时间： </h1>    <%= new Date() %></body>================================<%--JSP表达式作用：用来将程序的输出，输出到客户端<%= 变量或者表达式%>--%><%= new java.util.Date()%>\n```\n\n##### ==5 脚本段==（小脚本/代码块）\n\n```xml\n在JSP页面中执行的Java代码 语法： <% Java代码 %><%  System.out.println(\"这是一个代码块\");%>================================================== <%--jsp脚本片段--%><%int sum = 0;for (int i = 1; i <=100 ; i++) {  sum+=i;}out.println(\"<h1>Sum=\"+sum+\"</h1>\");%>\n```\n\n```xml\n<!--脚本片段的再实现--><%int x = 10;out.println(x);%><p>这是一个JSP文档</p><%int y = 2;out.println(y);%><hr><%--在代码嵌入HTML元素--%><%for (int i = 0; i < 5; i++) {%><h1>Hello,World  <%=i%> </h1><%}%>\n```\n\n##### ==6 标准动作==\n\n```xml\n<jsp:include page=\"foot.html\"></jsp:include>   动态引入/动态包含<jsp:forward page=\"encoding.jsp\"></jsp:forward>\n```\n\n##### ==7 注释==\n\n- JSP的注释，不会在客户端显示，HTML就会！\n\n\n```xml\n<!-- This is my JSP page. <br> --><%--  <% System.out.println(\"这是一个代码块\");%>--%>//System.out.println(\"这是一个代码块\"); /* System.out.println(\"这是一个代码块1\"); */\n```\n\n\n\n### 8.4、9大内置对象\n\n- PageContext    存东西\n- Request     存东西\n- Response\n- Session      存东西\n- Application   【SerlvetContext】   存东西\n- config    【SerlvetConfig】\n- out\n- page ，不用了解\n- exception\n\n```java\npageContext.setAttribute(\"name1\",\"秦疆1号\"); //保存的数据只在一个页面中有效request.setAttribute(\"name2\",\"秦疆2号\"); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(\"name3\",\"秦疆3号\"); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(\"name4\",\"秦疆4号\");  //保存的数据只在服务器中有效，从打开服务器到关闭服务器\n```\n\nrequest：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！\n\nsession：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；\n\napplication：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；\n\n### 8.5、JSP标签、JSTL标签、EL表达式\n\n```xml\n<!-- JSTL表达式的依赖 --><dependency>    <groupId>javax.servlet.jsp.jstl</groupId>    <artifactId>jstl-api</artifactId>    <version>1.2</version></dependency><!-- standard标签库 --><dependency>    <groupId>taglibs</groupId>    <artifactId>standard</artifactId>    <version>1.1.2</version></dependency>\n```\n\nEL表达式：  ${ }\n\n- **获取数据**\n- **执行运算**\n- **获取web开发的常用对象**\n\n\n\n**JSP标签**\n\n```jsp\n<%--jsp:include--%><%--http://localhost:8080/jsptag.jsp?name=kuangshen&age=12--%><jsp:forward page=\"/jsptag2.jsp\">    <jsp:param name=\"name\" value=\"kuangshen\"></jsp:param>    <jsp:param name=\"age\" value=\"12\"></jsp:param></jsp:forward>\n```\n\n\n\n**JSTL表达式**\n\nJSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！\n\n**格式化标签**\n\n**SQL标签**\n\n**XML 标签**\n\n**核心标签** （掌握部分）\n\n![1568362473764](/img/javaweb/狂神web/1568362473764.png)\n\n**JSTL标签库使用步骤**\n\n- 引入对应的 taglib\n- 使用其中的方法\n- **在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误**\n\nc：if\n\n```jsp\n<head>\n    <title>Title</title>\n</head>\n<body>\n\n\n<h4>if测试</h4>\n\n<hr>\n\n<form action=\"coreif.jsp\" method=\"get\">\n    <%--\n    EL表达式获取表单中的数据\n    ${param.参数名}\n    --%>\n    <input type=\"text\" name=\"username\" value=\"${param.username}\">\n    <input type=\"submit\" value=\"登录\">\n</form>\n\n<%--判断如果提交的用户名是管理员，则登录成功--%>\n<c:if test=\"${param.username=='admin'}\" var=\"isAdmin\">\n    <c:out value=\"管理员欢迎您！\"/>\n</c:if>\n\n<%--自闭合标签--%>\n<c:out value=\"${isAdmin}\"/>\n\n</body>\n```\n\nc:choose   c:when\n\n```jsp\n<body><%--定义一个变量score，值为85--%><c:set var=\"score\" value=\"55\"/><c:choose>    <c:when test=\"${score>=90}\">        你的成绩为优秀    </c:when>    <c:when test=\"${score>=80}\">        你的成绩为一般    </c:when>    <c:when test=\"${score>=70}\">        你的成绩为良好    </c:when>    <c:when test=\"${score<=60}\">        你的成绩为不及格    </c:when></c:choose></body>\n```\n\nc:forEach\n\n```jsp\n<%    ArrayList<String> people = new ArrayList<>();    people.add(0,\"张三\");    people.add(1,\"李四\");    people.add(2,\"王五\");    people.add(3,\"赵六\");    people.add(4,\"田六\");    request.setAttribute(\"list\",people);%><%--var , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%><c:forEach var=\"people\" items=\"${list}\">    <c:out value=\"${people}\"/> <br></c:forEach><hr><c:forEach var=\"people\" items=\"${list}\" begin=\"1\" end=\"3\" step=\"1\" >    <c:out value=\"${people}\"/> <br></c:forEach>\n```\n\n## 9、JavaBean\n\n实体类\n\nJavaBean有特定的写法：\n\n- 必须要有一个无参构造\n- 属性必须私有化\n- 必须有对应的get/set方法；\n\n一般用来和数据库的字段做映射  ORM；\n\nORM ：对象关系映射\n\n- 表--->类\n- 字段-->属性\n- 行记录---->对象\n\n**people表**\n\n| id   | name    | age  | address |\n| ---- | ------- | ---- | ------- |\n| 1    | 秦疆1号 | 3    | 西安    |\n| 2    | 秦疆2号 | 18   | 西安    |\n| 3    | 秦疆3号 | 100  | 西安    |\n\n```java\nclass People{    private int id;    private String name;    private int id;    private String address;}class A{    new People(1,\"秦疆1号\",3，\"西安\");    new People(2,\"秦疆2号\",3，\"西安\");    new People(3,\"秦疆3号\",3，\"西安\");}\n```\n\n\n\n- 过滤器\n- 文件上传\n- 邮件发送\n- JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务\n\n\n\n## 10、MVC三层架构\n\n什么是MVC：  Model     view     Controller  模型、视图、控制器\n\n### 10.1、早些年\n\n![1568423664332](/img/javaweb/狂神web/1568423664332.png)\n\n用户直接访问控制层，控制层就可以直接操作数据库；\n\n```java\nservlet--CRUD-->数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....\n```\n\n### 10.2、MVC三层架构\n\n![1568424227281](/img/javaweb/狂神web/1568424227281.png)\n\n\n\nModel\n\n- 业务处理 ：业务逻辑（Service）\n- 数据持久层：CRUD   （Dao）\n\nView\n\n- 展示数据\n- 提供链接发起Servlet请求 （a，form，img…）\n\nController  （Servlet）\n\n- 接收用户的请求 ：（req：请求参数、Session信息….）\n\n- 交给业务层处理对应的代码 \n\n- 控制视图的跳转  \n\n  ```java\n  登录--->接收用户的登录请求--->处理用户的请求（获取用户登录的参数，username，password）---->交给业务层处理登录业务（判断用户名密码是否正确：事务）--->Dao层查询用户名和密码是否正确-->数据库\n  ```\n\n\n\n## 11、Filter （重点）\n\nFilter：过滤器 ，用来过滤网站的数据；\n\n- 处理中文乱码\n- 登录验证….\n\n![1568424858708](/img/javaweb/狂神web/1568424858708.png)\n\nFilter开发步骤：\n\n1. 导包\n\n2. 编写过滤器\n\n   1. 导包不要错\n\n      ![1568425162525](/img/javaweb/狂神web/1568425162525.png)\n\n      实现Filter接口，重写对应的方法即可\n\n      ```java\n      public class CharacterEncodingFilter implements Filter {    //初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException {        System.out.println(\"CharacterEncodingFilter初始化\");    }    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        request.setCharacterEncoding(\"utf-8\");        response.setCharacterEncoding(\"utf-8\");        response.setContentType(\"text/html;charset=UTF-8\");        System.out.println(\"CharacterEncodingFilter执行前....\");        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(\"CharacterEncodingFilter执行后....\");    }    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() {        System.out.println(\"CharacterEncodingFilter销毁\");    }}\n      ```\n\n3. 在web.xml中配置 Filter\n\n   ```xml\n   <filter>    <filter-name>CharacterEncodingFilter</filter-name>    <filter-class>com.kuang.filter.CharacterEncodingFilter</filter-class></filter><filter-mapping>    <filter-name>CharacterEncodingFilter</filter-name>    <!--只要是 /servlet的任何请求，会经过这个过滤器-->    <url-pattern>/servlet/*</url-pattern>    <!--<url-pattern>/*</url-pattern>--></filter-mapping>\n   ```\n\n   \n\n## 12、监听器\n\n实现一个监听器的接口；（有N种）\n\n1. 编写一个监听器\n\n   实现监听器的接口…\n\n   ```java\n   //统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener {    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) {        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(\"OnlineCount\");        if (onlineCount==null){            onlineCount = new Integer(1);        }else {            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        }        ctx.setAttribute(\"OnlineCount\",onlineCount);    }    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) {        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(\"OnlineCount\");        if (onlineCount==null){            onlineCount = new Integer(0);        }else {            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        }        ctx.setAttribute(\"OnlineCount\",onlineCount);    }    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */}\n   ```\n\n2. web.xml中注册监听器\n\n   ```xml\n   <!--注册监听器--><listener>    <listener-class>com.kuang.listener.OnlineCountListener</listener-class></listener>\n   ```\n\n3. 看情况是否使用！\n\n\n\n## 13、过滤器、监听器常见应用\n\n**监听器：GUI编程中经常使用；**\n\n```java\npublic class TestPanel {\n    public static void main(String[] args) {\n        Frame frame = new Frame(\"中秋节快乐\");  //新建一个窗体\n        Panel panel = new Panel(null); //面板\n        frame.setLayout(null); //设置窗体的布局\n\n        frame.setBounds(300,300,500,500);\n        frame.setBackground(new Color(0,0,255)); //设置背景颜色\n\n        panel.setBounds(50,50,300,300);\n        panel.setBackground(new Color(0,255,0)); //设置背景颜色\n\n        frame.add(panel);\n\n        frame.setVisible(true);\n\n        //监听事件，监听关闭事件\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                super.windowClosing(e);\n            }\n        });\n\n\n    }\n}\n```\n\n\n\n用户登录之后才能进入主页！用户注销后就不能进入主页了！\n\n1. 用户登录之后，向Sesison中放入用户的数据\n\n2. 进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！\n\n   ```java\n   HttpServletRequest request = (HttpServletRequest) req;\n   HttpServletResponse response = (HttpServletResponse) resp;\n   \n   if (request.getSession().getAttribute(Constant.USER_SESSION)==null){\n       response.sendRedirect(\"/error.jsp\");\n   }\n   \n   chain.doFilter(request,response);\n   ```\n\n\n\n\n## 14、JDBC\n\n什么是JDBC ： Java连接数据库！\n\n![1568439601825](/img/javaweb/狂神web/1568439601825.png)\n\n需要jar包的支持：\n\n- java.sql\n- javax.sql\n- mysql-conneter-java…  连接驱动（必须要导入）\n\n\n\n**实验环境搭建**\n\n```sql\nCREATE TABLE users(    id INT PRIMARY KEY,    `name` VARCHAR(40),    `password` VARCHAR(40),    email VARCHAR(60),    birthday DATE);INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(1,'张三','123456','zs@qq.com','2000-01-01');INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(2,'李四','123456','ls@qq.com','2000-01-01');INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(3,'王五','123456','ww@qq.com','2000-01-01');SELECT\t* FROM users;\n```\n\n\n\n导入数据库依赖\n\n```xml\n<!--mysql的驱动--><dependency>    <groupId>mysql</groupId>    <artifactId>mysql-connector-java</artifactId>    <version>5.1.47</version></dependency>\n```\n\nIDEA中连接数据库：\n\n![1568440926845](/img/javaweb/狂神web/1568440926845.png)\n\n\n\n**JDBC 固定步骤：**\n\n1. 加载驱动\n2. 连接数据库,代表数据库\n3. 向数据库发送SQL的对象Statement : CRUD\n4. 编写SQL （根据业务，不同的SQL）\n5. 执行SQL\n6. 关闭连接\n\n```java\npublic class TestJdbc {    public static void main(String[] args) throws ClassNotFoundException, SQLException {        //配置信息        //useUnicode=true&characterEncoding=utf-8 解决中文乱码        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";        String username = \"root\";        String password = \"123456\";        //1.加载驱动        Class.forName(\"com.mysql.jdbc.Driver\");        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = \"select * from users\";        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next()){            System.out.println(\"id=\"+rs.getObject(\"id\"));            System.out.println(\"name=\"+rs.getObject(\"name\"));            System.out.println(\"password=\"+rs.getObject(\"password\"));            System.out.println(\"email=\"+rs.getObject(\"email\"));            System.out.println(\"birthday=\"+rs.getObject(\"birthday\"));        }        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    }}\n```\n\n\n\n**预编译SQL**\n\n```java\npublic class TestJDBC2 {    public static void main(String[] args) throws Exception {        //配置信息        //useUnicode=true&characterEncoding=utf-8 解决中文乱码        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";        String username = \"root\";        String password = \"123456\";        //1.加载驱动        Class.forName(\"com.mysql.jdbc.Driver\");        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = \"insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);\";        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,\"狂神说Java\");//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,\"123456\");//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,\"24736743@qq.com\");//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i>0){            System.out.println(\"插入成功@\");        }        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    }}\n```\n\n\n\n**事务**\n\n要么都成功，要么都失败！\n\nACID原则：保证数据的安全。\n\n```java\n开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:1000    A(900)   --100-->   B(1100) \n```\n\n\n\n**Junit单元测试**\n\n依赖\n\n```xml\n<!--单元测试--><dependency>    <groupId>junit</groupId>    <artifactId>junit</artifactId>    <version>4.12</version></dependency>\n```\n\n简单使用\n\n@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！\n\n```java\n@Test\npublic void test(){\n    System.out.println(\"Hello\");\n}\n```\n\n![1568442261610](/img/javaweb/狂神web/1568442261610.png)\n\n失败的时候是红色：\n\n![1568442289597](/img/javaweb/狂神web/1568442289597.png)\n\n\n\n**搭建一个环境**\n\n```sql\nCREATE TABLE account(\n   id INT PRIMARY KEY AUTO_INCREMENT,\n   `name` VARCHAR(40),\n   money FLOAT\n);\n\nINSERT INTO account(`name`,money) VALUES('A',1000);\nINSERT INTO account(`name`,money) VALUES('B',1000);\nINSERT INTO account(`name`,money) VALUES('C',1000);\n```\n\n```java\n    @Test\n    public void test() {\n        //配置信息\n        //useUnicode=true&characterEncoding=utf-8 解决中文乱码\n        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";\n        String username = \"root\";\n        String password = \"123456\";\n\n        Connection connection = null;\n\n        //1.加载驱动\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            //2.连接数据库,代表数据库\n             connection = DriverManager.getConnection(url, username, password);\n\n            //3.通知数据库开启事务,false 开启\n            connection.setAutoCommit(false);\n\n            String sql = \"update account set money = money-100 where name = 'A'\";\n            connection.prepareStatement(sql).executeUpdate();\n\n            //制造错误\n            //int i = 1/0;\n\n            String sql2 = \"update account set money = money+100 where name = 'B'\";\n            connection.prepareStatement(sql2).executeUpdate();\n\n            connection.commit();//以上两条SQL都执行成功了，就提交事务！\n            System.out.println(\"success\");\n        } catch (Exception e) {\n            try {\n                //如果出现异常，就通知数据库回滚事务\n                connection.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            e.printStackTrace();\n        }finally {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n","source":"_posts/javaWeb笔记.md","raw":"---\ntitle: javaWeb笔记\ndate: 2021-08-19 16:56:49\ntags: javaweb\ncategories: 笔记\ndescription: b站javaweb视频笔记\n---\n\n## 1、基本概念\n\n### 1.1、前言\n\nweb开发：\n\n- web，网页的意思  ， www.baidu.com\n- 静态web\n  - html，css\n  - 提供给所有人看的数据始终不会发生变化！\n- 动态web\n  - 淘宝，几乎是所有的网站；\n  - 提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！\n  - 技术栈：Servlet/JSP，ASP，PHP\n\n在Java中，动态web资源开发的技术统称为JavaWeb；\n\n### 1.2、web应用程序\n\nweb应用程序：可以提供浏览器访问的程序；\n\n- a.html、b.html......多个web资源，这些web资源可以被外界访问，对外界提供服务；\n- 你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。\n- URL \n- 这个统一的web资源会被放在同一个文件夹下，web应用程序-->Tomcat：服务器\n- 一个web应用由多部分组成 （静态web，动态web）\n  - html，css，js\n  - jsp，servlet\n  - Java程序\n  - jar包\n  - 配置文件 （Properties）\n\nweb应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；\n\n#### Web应用程序概述\n\n- Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。\n\n- 一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。\n\n#### 应用程序模式\n\n- 应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。\n\n  <img src=\"/img/javaweb/狂神web/clip_image001.jpg\" alt=\"12\" style=\"zoom:80%;\" />\n\n  <img src=\"/img/javaweb/狂神web/clip_image001-1583293770740.jpg\" alt=\"11\" style=\"zoom:67%;\" />\n\n##### 1，C/S架构\n\n- C/S是Client/Server的缩写。\n- Server即服务器，通常采用高性能的PC或工作站，\n- Client即客户端，需要在客户电脑上安装专用的客户端软件。\n- 例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。\n\n##### 2，B/S架构\n\n- B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。\n\n- 在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。\n\n- 例如京东、淘宝、12306等都是B/S架构。\n\n- WEB应用程序一般是B/S模式。\n\n- B/S优点：\n\n  - 耦合度小，利于分工协作，提高开发效率\n\n  - 具有良好的可扩展性和可维护性\n\n  - 升级成本小\n  - 简化了客户端电脑载荷\n  - 减轻了系统维护与升级的成本和工作量\n  - 降低了用户的总体成本\n\n### 1.3、静态web\n\n- `*.htm, *.html`,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；\n\n![1567822802516](/img/javaweb/狂神web/1567822802516.png)\n\n- 静态web存在的缺点\n  - Web页面无法动态更新，所有用户看到都是同一个页面\n    - 轮播图，点击特效：伪动态\n    - JavaScript [实际开发中，它用的最多]\n    - VBScript\n  - 它无法和数据库交互（数据无法持久化，用户无法交互）\n\n\n\n### 1.4、动态web\n\n页面会动态展示： “Web的页面展示的效果因人而异”；\n\n![1567823191289](/img/javaweb/狂神web/1567823191289.png)\n\n缺点：\n\n- 加入服务器的动态web资源出现了错误，我们需要重新编写我们的**后台程序**,重新发布；\n  - 停机维护\n\n优点：\n\n- Web页面可以动态更新，所有用户看到都不是同一个页面\n- 它可以与数据库交互 （数据持久化：注册，商品信息，用户信息........）\n\n![1567823350584](/img/javaweb/狂神web/1567823350584.png)\n\n#### 静态网页与动态网页\n\n- 静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。\n\n- 动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。\n\n\n\n### 1.5、访问Web资源\n\n#### 什么是URL\n\n- URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。\n- 统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。\n- 简单地说，URL就是Web地址，俗称“网址”。\n\n##### URL的组成\n\n- URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。\n\n- 以这样一个URL:http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。\n\n1. ==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。\n\n2. ==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。\n\n3. ==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。\n\n4. ==路径==： 路径（包括请求的资源）由零个或多个 \"/\" 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。\n\n- ==URL的组成:==\n  - 协议\n  - 主机（包括端口号）\n  - 路径\n\n## 2、web服务器\n\n- Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。\n- 下面介绍几种常用的WEB服务器。\n  - ==WebLogic==\n    - BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。\n    - BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，\n    - 它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。\n  - ==Apache==\n    - Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。\n    - 世界上很多著名的网站都是Apache的产物，\n    - 它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。\n  - ==Tomcat==\n    - Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。\n    - 它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。\n    - Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。\n  - ==Jboss==\n    - 是一个基于==J2EE==的==开放源代码==的应用服务器。\n    - JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。\n    - JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。\n    - 但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。\n\n### 2.1、技术讲解\n\n**ASP:**\n\n- 微软：国内最早流行的就是ASP；\n\n- 在HTML中嵌入了VB的脚本，  ASP + COM；\n\n- 在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱\n\n- 维护成本高！\n\n- C# \n\n- IIS\n\n  ```html\n  <h1>\n      <h1><h1>\n          <h1>\n              <h1>\n                  <h1>\n          <h1>\n              <%\n              System.out.println(\"hello\")\n              %>\n              <h1>\n                  <h1>\n     <h1><h1>\n  <h1>\n  ```\n\n  \n\n**php：**\n\n- PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）\n- 无法承载大访问量的情况（局限性）\n\n\n\n**JSP/Servlet : ** \n\nB/S：浏览和服务器\n\nC/S:  客户端和服务器\n\n- sun公司主推的B/S架构\n- 基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)\n- 可以承载三高问题带来的影响；\n- 语法像ASP ， ASP-->JSP , 加强市场强度；\n\n### 2.2、web服务器\n\n服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；\n\n**==IIS==**\n\n微软的； ASP...,Windows中自带的\n\n==**Tomcat**==\n\n![1567824446428](/img/javaweb/狂神web/1567824446428.png)\n\n面向百度编程；\n\nTomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且**免费**，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。\n\nTomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用[服务器](https://baike.baidu.com/item/服务器)，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择\n\nTomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为**9.0。**\n\n**工作3-5年之后，可以尝试手写Tomcat服务器；**\n\n下载tomcat：\n\n1. 安装 or  解压\n2. 了解配置文件及目录结构\n3. 这个东西的作用\n\n\n\n## 3、Tomcat\n\n### 3.1、 安装tomcat\n\ntomcat官网：http://tomcat.apache.org/\n\n![1567825600842](/img/javaweb/狂神web/1567825600842.png)\n\n![1567825627138](/img/javaweb/狂神web/1567825627138.png)\n\n\n\n### 3.2、Tomcat启动和配置\n\n#### Tomcat目录作用描述\n\n| **目录**        | **说明**                                                  |\n| --------------- | --------------------------------------------------------- |\n| ==**bin**==     | 存放各平台下用于启动和停止Tomcat的脚本文件                |\n| ==**conf**==    | 存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml |\n| ==**lib**==     | 存放tomcat服务器所需的jar文件                             |\n| ==**webapps**== | Web应用的发布目录                                         |\n| ==**work**==    | Jsp运行时生成的Servlet文件                                |\n| ==**logs**==    | 存放tomcat的日志文件                                      |\n| ==**temp**==    | Tomcat运行时存放临时文件                                  |\n\n文件夹作用：\n\n![1567825763180](/img/javaweb/狂神web/1567825763180.png)\n\n**启动。关闭Tomcat**\n\n![1567825840657](/img/javaweb/狂神web/1567825840657.png)\n\n访问测试：http://localhost:8080/\n\n可能遇到的问题：\n\n1. Java环境变量没有配置\n2. 闪退问题：需要配置兼容性\n3. 乱码问题：配置文件中设置\n\n### 3.3、配置\n\n![1567825967256](/img/javaweb/狂神web/1567825967256.png)\n\n可以配置启动的端口号\n\n- tomcat的默认端口号为：8080\n- mysql：3306\n- http：80\n- https：443\n\n```xml\n<Connector port=\"8081\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"8443\" />\n```\n\n可以配置主机的名称\n\n- 默认的主机名为：localhost->127.0.0.1\n- 默认网站应用存放的位置为：webapps\n\n```xml\n  <Host name=\"www.qinjiang.com\"  appBase=\"webapps\"\n        unpackWARs=\"true\" autoDeploy=\"true\">\n```\n\n#### 高难度面试题\n\n请你谈谈网站是如何进行访问的！\n\n1. 输入一个域名；回车\n\n2. 检查本机的 C:\\Windows\\System32\\drivers\\etc\\hosts配置文件下有没有这个域名映射；\n\n   1. 有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问\n\n      ```java\n      127.0.0.1       www.qinjiang.com\n      ```\n\n   2. 没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；\n\n   <img src=\"/img/javaweb/狂神web/1567827057913.png\" alt=\"1567827057913\" style=\"zoom: 67%;\" />\n\n3. 可以配置一下环境变量（可选性）\n\n### 3.4、发布一个web网站\n\n不会就先模仿\n\n- 将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了\n\n网站应该有的结构\n\n```java\n--webapps ：Tomcat服务器的web目录\n\t-ROOT\n\t-kuangstudy ：网站的目录名\n\t\t- WEB-INF\n\t\t\t-classes : java程序\n\t\t\t-lib：web应用所依赖的jar包\n\t\t\t-web.xml ：网站配置文件\n\t\t- index.html 默认的首页\n\t\t- static \n            -css\n            \t-style.css\n            -js\n            -img\n         -.....\n```\n\n\n\nHTTP协议 ： 面试\n\nMaven：构建工具\n\n- Maven安装包\n\nServlet 入门\n\n- HelloWorld！\n- Servlet配置\n- 原理\n\n\n\n## 4、Http\n\n### 4.1、什么是HTTP\n\nHTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。\n\n- 文本：html，字符串，~ ….\n- 超文本：图片，音乐，视频，定位，地图…….\n- 80\n\nHttps：安全的\n\n- 443\n\n### 4.2、两个时代\n\n- http1.0\n\n  - HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接\n  - HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\n\n- http2.0\n\n  - HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。\n\n- HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n  \n\n### 4.3、Http请求\n\n#####  HTTP请求方式\n\n- HTTP请求是指从客户端到服务器端的请求消息。\n- 包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。\n- 根据HTTP标准，HTTP请求可以使用多种请求方法。 \n\n- ==客户端---发请求（Request）---服务器==\n\n百度：\n\n```java\nRequest URL:https://www.baidu.com/   请求地址\nRequest Method:GET    get方法/post方法\nStatus Code:200 OK    状态码：200\nRemote（远程） Address:14.215.177.39:443\n```\n\n```java\nAccept:text/html  \nAccept-Encoding:gzip, deflate, br\nAccept-Language:zh-CN,zh;q=0.9    语言\nCache-Control:max-age=0\nConnection:keep-alive\n```\n\n#### 1、请求行\n\n- 请求行中的请求方式：GET\n\n- 请求方式：**Get，Post**，HEAD,DELETE,PUT,TRACT…\n\n  - get：\n\n    - 请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==\n    - GET是最简单的HTTP方法，\n    - 其主要任务就是要求服务器获得一个资源并把资源发回来，\n    - 请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。\n    - GET请求网址http://localhost:8080/FirstWeb/test?userName=Jack&age=20\n    - GET 请求可被缓存\n    - GET 请求有长度限制\n\n  - post：\n\n    - 请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==\n    - POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，\n    - 请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，\n    - 浏览器的地址栏中不显示参数信息。\n    - POST请求网址 [http://localhost:8080/FirstWeb/test ](http://localhost:8080/FirstWeb/test)\n    - POST 请求不会被缓存\n    - POST 请求对数据长度没有要求\n\n    \n\n#### 2、消息头\n\n```java\nAccept：告诉浏览器，它所支持的数据类型\nAccept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1\nAccept-Language：告诉浏览器，它的语言环境\nCache-Control：缓存控制\nConnection：告诉浏览器，请求完成是断开还是保持连接\nHOST：主机..../.\n```\n\n### 4.4、Http响应\n\n- 服务器---响应-----客户端\n\n百度：\n\n```java\nCache-Control:private    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型\n```\n\n#### 1.响应体\n\n```java\nAccept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；\n```\n\n#### 2.响应状态码\n\n200：请求响应成功  200\n\n3xx：请求重定向 \n\n- 重定向：你重新到我给你新位置去；\n\n4xx：找不到资源   404\n\n- 资源不存在；\n\n5xx：服务器代码错误   500       502:网关错误\n\n#### 常见面试题\n\n当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？\n\n\n\n## 5、Maven\n\n**我为什么要学习这个技术？**\n\n1. 在Javaweb开发中，需要使用大量的jar包，我们手动去导入；\n\n2. 如何能够让一个东西自动帮我导入和配置这个jar包。\n\n   由此，Maven诞生了！\n\n\n\n### 5.1 Maven项目架构管理工具\n\n我们目前用来就是方便导入jar包的！\n\nMaven的核心思想：**约定大于配置**\n\n- 有约束，不要去违反。\n\nMaven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；\n\n### 5.2 下载安装Maven\n\n官网;https://maven.apache.org/\n\n![1567842350606](/img/javaweb/狂神web/1567842350606.png)\n\n下载完成后，解压即可；\n\n小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；\n\n\n\n### 5.3 配置环境变量\n\n在我们的系统环境变量中\n\n配置如下配置：\n\n- M2_HOME     maven目录下的bin目录\n- MAVEN_HOME      maven的目录\n- 在系统的path中配置  %MAVEN_HOME%\\bin\n\n![1567842882993](/img/javaweb/狂神web/1567842882993.png)\n\n测试Maven是否安装成功，保证必须配置完毕！\n\n### 5.4 阿里云镜像\n\n![1567844609399](/img/javaweb/狂神web/1567844609399.png)\n\n- 镜像：mirrors\n  - 作用：加速我们的下载\n- 国内建议使用阿里云的镜像\n\n```xml\n<mirror>    <id>nexus-aliyun</id>      <mirrorOf>*,!jeecg,!jeecg-snapshots</mirrorOf>      <name>Nexus aliyun</name>      <url>http://maven.aliyun.com/nexus/content/groups/public</url> </mirror>\n```\n\n### 5.5 本地仓库\n\n在本地的仓库，远程仓库；\n\n**建立一个本地仓库：**localRepository\n\n```xml\n<localRepository>D:\\Environment\\apache-maven-3.6.2\\maven-repo</localRepository>\n```\n\n### 5.6、在IDEA中使用Maven\n\n1. 启动IDEA\n\n2. 创建一个MavenWeb项目\n\n   ![1567844785602](/img/javaweb/狂神web/1567844785602.png)\n\n   ![1567844841172](/img/javaweb/狂神web/1567844841172.png)\n\n   ![1567844917185](/img/javaweb/狂神web/1567844917185.png)\n\n   ![1567844956177](/img/javaweb/狂神web/1567844956177.png)\n\n   ![1567845029864](/img/javaweb/狂神web/1567845029864.png)\n\n3. 等待项目初始化完毕\n\n   ![1567845105970](/img/javaweb/狂神web/1567845105970.png)\n\n   ![1567845137978](/img/javaweb/狂神web/1567845137978.png)\n\n4. 观察maven仓库中多了什么东西？\n\n5. IDEA中的Maven设置\n\n   注意：IDEA项目创建成功后，看一眼Maven的配置\n\n   ![1567845341956](/img/javaweb/狂神web/1567845341956.png)\n\n   ![1567845413672](/img/javaweb/狂神web/1567845413672.png)\n\n6. 到这里，Maven在IDEA中的配置和使用就OK了!\n\n### 5.7、创建一个普通的Maven项目\n\n![1567845557744](/img/javaweb/狂神web/1567845557744.png)\n\n![1567845717377](/img/javaweb/狂神web/1567845717377.png)\n\n这个只有在Web应用下才会有！\n\n![1567845782034](/img/javaweb/狂神web/1567845782034.png)\n\n### 5.8 标记文件夹功能\n\n![1567845910728](/img/javaweb/狂神web/1567845910728.png)\n\n![1567845957139](/img/javaweb/狂神web/1567845957139.png)\n\n![1567846034906](/img/javaweb/狂神web/1567846034906.png)\n\n![1567846073511](/img/javaweb/狂神web/1567846073511.png)\n\n### 5.9 在 IDEA中配置Tomcat\n\n![1567846140348](/img/javaweb/狂神web/1567846140348.png)\n\n![1567846179573](/img/javaweb/狂神web/1567846179573.png)\n\n![1567846234175](/img/javaweb/狂神web/1567846234175.png)\n\n![1567846369751](/img/javaweb/狂神web/1567846369751.png)\n\n解决警告问题\n\n必须要的配置：**为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；**\n\n![1567846421963](/img/javaweb/狂神web/1567846421963.png)\n\n![1567846546465](/img/javaweb/狂神web/1567846546465.png)\n\n![1567846559111](/img/javaweb/狂神web/1567846559111.png)\n\n![1567846640372](/img/javaweb/狂神web/1567846640372.png)\n\n### 5.10 pom文件\n\npom.xml 是Maven的核心配置文件\n\n![1567846784849](/img/javaweb/狂神web/1567846784849.png)\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--Maven版本和头文件-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <!--这里就是我们刚才配置的GAV-->\n  <groupId>com.kuang</groupId>\n  <artifactId>javaweb-01-maven</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <!--Package：项目的打包方式\n  jar：java应用\n  war：JavaWeb应用\n  -->\n  <packaging>war</packaging>\n\n\n  <!--配置-->\n  <properties>\n    <!--项目的默认构建编码-->\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <!--编码版本-->\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n  </properties>\n\n  <!--项目依赖-->\n  <dependencies>\n    <!--具体依赖的jar包配置文件-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n    </dependency>\n  </dependencies>\n\n  <!--项目构建用的东西-->\n  <build>\n    <finalName>javaweb-01-maven</finalName>\n    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\n      <plugins>\n        <plugin>\n          <artifactId>maven-clean-plugin</artifactId>\n          <version>3.1.0</version>\n        </plugin>\n        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\n        <plugin>\n          <artifactId>maven-resources-plugin</artifactId>\n          <version>3.0.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.8.0</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>2.22.1</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-war-plugin</artifactId>\n          <version>3.2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>2.5.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>2.8.2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n</project>\n\n```\n\n![1567847410771](/img/javaweb/狂神web/1567847410771.png)\n\n\n\nmaven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：\n\n```xml\n<!--在build中配置resources，来防止我们资源导出失败的问题--><build>    <resources>        <resource>            <directory>src/main/resources</directory>            <includes>                <include>**/*.properties</include>                <include>**/*.xml</include>            </includes>            <filtering>true</filtering>        </resource>        <resource>            <directory>src/main/java</directory>            <includes>                <include>**/*.properties</include>                <include>**/*.xml</include>            </includes>            <filtering>true</filtering>        </resource>    </resources></build>\n```\n\n\n\n### 5.12 IDEA操作\n\n![1567847630808](/img/javaweb/狂神web/1567847630808.png)\n\n\n\n![1567847662429](/img/javaweb/狂神web/1567847662429.png)\n\n\n\n### 5.13 解决遇到的问题\n\n1. Maven 3.6.2\n\n   解决方法：降级为3.6.1\n\n   ![1567904721301](/img/javaweb/狂神web/1567904721301.png)\n\n2. Tomcat闪退\n\n   \n\n3. IDEA中每次都要重复配置Maven\n   在IDEA中的全局默认配置中去配置\n\n   ![1567905247201](/img/javaweb/狂神web/1567905247201.png)\n\n   ![1567905291002](/img/javaweb/狂神web/1567905291002.png)\n\n4. Maven项目中Tomcat无法配置\n\n5. maven默认web项目中的web.xml版本问题\n\n   ![1567905537026](/img/javaweb/狂神web/1567905537026.png)\n\n6. 替换为webapp4.0版本和tomcat一致\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?><web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"         version=\"4.0\"         metadata-complete=\"true\"></web-app>\n   ```\n\n   \n\n7. Maven仓库的使用\n\n   地址：https://mvnrepository.com/\n\n   ![1567905870750](/img/javaweb/狂神web/1567905870750.png)\n\n   ![1567905982979](/img/javaweb/狂神web/1567905982979.png)\n\n   ![1567906017448](/img/javaweb/狂神web/1567906017448.png)\n\n   ![1567906039469](/img/javaweb/狂神web/1567906039469.png)\n\n\n\n## 6、Servlet\n\n### 6.1、Servlet简介\n\n- Servlet就是sun公司开发动态web的一门技术\n- Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：\n  - 编写一个类，实现Servlet接口\n  - 把开发好的Java类部署到web服务器中。\n\n- **把实现了Servlet接口的Java程序叫做，Servlet**\n- \n\n### 6.2、HelloServlet\n\n#### 1 Servlet入门\n\n- Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。\n\n- 狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。\n\n- Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。\n\n- 这个==过程==为：\n\n  1、客户端发送请求至服务器端；\n\n  2、服务器将请求信息发送至 Servlet；\n\n  3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；\n\n  4、服务器将响应返回给客户端。\n\n- Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet\n\n- 配置web.xml\n\n```xml\n<!-- 注册一个Servlet --><servlet>   <!-- Servlet标识名 -->   <servlet-name>HelloServlet</servlet-name>   <!-- Servlet类的全限定名 -->   <servlet-class>com.aaa.servlet.HelloServlet</servlet-class></servlet><!-- 配置Servlet映射信息 --><servlet-mapping>   <!-- Servlet标识名和上面一致 -->   <servlet-name>HelloServlet</servlet-name>   <!-- 访问路径 -->   <url-pattern>/hello</url-pattern></servlet-mapping>\n```\n\n\n\n1. 构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；\n\n2. 关于Maven父子工程的理解：\n\n   父项目中会有\n\n   ```xml\n       <modules>        <module>servlet-01</module>    </modules>\n   ```\n\n   子项目会有\n\n   ```xml\n       <parent>        <artifactId>javaweb-02-servlet</artifactId>        <groupId>com.kuang</groupId>        <version>1.0-SNAPSHOT</version>    </parent>\n   ```\n\n   父项目中的java子项目可以直接使用\n\n   ```java\n   son extends father\n   ```\n\n3. Maven环境优化\n\n   1. 修改web.xml为最新的\n   2. 将maven的结构搭建完整\n\n4. 编写一个Servlet程序\n\n   ![1567911804700](/img/javaweb/狂神web/1567911804700.png)\n\n   1. 编写一个普通类\n\n   2. 实现Servlet接口，这里我们直接继承HttpServlet\n\n      ```java\n      public class HelloServlet extends HttpServlet {        //由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(\"Hello,Serlvet\");    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n      ```\n\n5. 编写Servlet的映射\n\n   为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；\n\n   ```xml\n       <!--注册Servlet-->\n       <servlet>\n           <servlet-name>hello</servlet-name>\n           <servlet-class>com.kuang.servlet.HelloServlet</servlet-class>\n       </servlet>\n       <!--Servlet的请求路径-->\n       <servlet-mapping>\n           <servlet-name>hello</servlet-name>\n           <url-pattern>/hello</url-pattern>\n       </servlet-mapping>\n   \n   ```\n\n6. 配置Tomcat\n\n   注意：配置项目发布的路径就可以了\n\n7. 启动测试，OK！\n\n\n\n#### 2 ServletAPI层次结构\n\n**核心技能部分**\n\n     ![222](/img/javaweb/狂神web//clip_image001.png)\n    \n       ![Serv et  Servi  Serv IetCmf i g  -se rServIe 'Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/img/javaweb/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  \n\n**Servlet原理**\n\n##### Servlet接口\n\n- Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。\n\n##### ServletConfig接口\n\n- 在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。\n\n- **ServletConfig的常用方法**\n\n| **方法**                              | **功能说明**                          |\n| ------------------------------------- | ------------------------------------- |\n| String  getInitParameter(String name) | 获取web.xml中名称为name的初始化参数值 |\n| ServletContext  getServletContext()   | 返回Servlet上下文对象                 |\n\n##### GenericServlet类\n\n- 抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。\n\n- **GenericServlet类的常用方法**\n\n| **方法**                              | **功能说明**                 |\n| ------------------------------------- | ---------------------------- |\n| void  init(ServletConfig config)      | 初始化方法                   |\n| String  getInitParameter(String name) | 返回名称为name的初始化参数值 |\n| ServletContext  getServletCotext()    | 返回ServletContext对象       |\n\n##### HttpServlet类\n\n- 抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。\n\n- **HttpServlet类的常用方法**\n\n| **方法**                                                     | **功能说明**                                                 |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| void ==service==  (ServletRequest reg, ServletResponse res)  | 接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。 |\n| void  ==doGet==(HttpServletRequest reg, HttpServletResponse res) | 处理GET请求                                                  |\n| void  ==doPost==(HttpServletRequest reg, HttpServletResponse res) | 处理POST请求                                                 |\n\n- 如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：\n\n  (1) 重写doGet方法来处理GET请求。\n\n  (2) 重写doPost方法来处理POST请求。\n\n  (3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。\n\n  (4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。\n\n- **提示：**\n\n  - HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。\n\n##### HttpServletRequest接口\n\n- HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。\n- 容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。\n\n- **HttpServleRequest 接口的常用方法**\n\n| **方法**                                         | **功能说明**                                                 |\n| ------------------------------------------------ | ------------------------------------------------------------ |\n| String  ==getParameter==(String name)            | 根据页面表单元素名称获取页面提交数据                         |\n| string[]  ==getPararneterValues== (String name)  | 获取页面有重名表单元素（比如复选框）的值                     |\n| void  ==setCharacterEncoding== (String name)     | 设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。 |\n| void  ==setAttribute==(String name,Object value) | 设置请求的参数                                               |\n| ==getRequestDispatcher==(String  path)           | 返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源 |\n\n##### HttpServletResponse接口\n\n- HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。\n- 容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。\n- Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。\n\n- **HttpServleRequest 接口的常用方法**\n\n| **方法**                                   | **功能说明**       |\n| ------------------------------------------ | ------------------ |\n| setContentType(\"text/html;charset=utf-8\"); | 设置响应的内容类型 |\n| PrintWriter  response.getWriter()          | 获得响应的输出流   |\n| response.sendRedirect(redirect)            | 重定向到指定的网址 |\n\n#####  转发与重定向\n\n**1 转发**\n\n- 转发属于**服务器跳转**。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。\n\n- 整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。\n\n- 而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。\n\n- 转发的作用：在多个页面交互过程中实现请求数据的共享。\n\n- 实现转发分为两个步骤：\n\n  1、 需要先获取RequestDispatcher实例\n\n  dispatcher=request.getRequestDispatcher(\"servlet2\");\n\n  2、 调用forward方法\n\n  dispatcher.forward(request, response);\n\n \n\n**2 重定向**\n\n- 重定向是**客户端跳转**。\n\n- 重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。\n\n- 因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。\n\n- 同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。\n\n- 重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现\n\n  \n\n**3 转发与重定向的区别**\n\n- 转发是继续传递、处理==同一个请求==，在==服务器端==进行；\n  - 重定向在==客户端==运行，会产生==新请求==。\n\n- 转发时浏览器地址栏中显示的是==初次发出请求的地址==；\n  - 重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。\n\n- 转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；\n  - 重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。\n\n- 转发只能转发给==当前web应用==的资源； \n  - 重定可以重定向到==任何==资源。\n\n\n\n##### Servlet应用\n\n**使用Servlet处理客户端请求** \n\n前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,\n\n**获得Servlet初始化参数**\n\n通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，\n\n**Servlet访问数据库**\n\n进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。\n\n##### ==Servlet的生命周期==\n\nServlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：\n\n1. 加载\n2. 实例化\n3. 初始化\n4. 服务\n5. 销毁\n\n### 6.3、Servlet原理\n\nServlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：\n\n![1567913793252](/img/javaweb/狂神web/1567913793252.png)\n\n### 6.4、Mapping问题\n\n1. 一个Servlet可以指定一个映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>\n   ```\n\n2. 一个Servlet可以指定多个映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello2</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello3</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello4</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello5</url-pattern>    </servlet-mapping>\n   ```\n\n3. 一个Servlet可以指定通用映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello/*</url-pattern>    </servlet-mapping>\n   ```\n\n4. 默认请求路径\n\n   ```xml\n       <!--默认请求路径-->    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/*</url-pattern>    </servlet-mapping>\n   ```\n\n5. 指定一些后缀或者前缀等等….\n\n   ```xml\n   <!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --><servlet-mapping>    <servlet-name>hello</servlet-name>    <url-pattern>*.qinjiang</url-pattern></servlet-mapping>\n   ```\n\n6. 优先级问题\n   指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；\n\n   ```xml\n   <!--404--><servlet>    <servlet-name>error</servlet-name>    <servlet-class>com.kuang.servlet.ErrorServlet</servlet-class></servlet><servlet-mapping>    <servlet-name>error</servlet-name>    <url-pattern>/*</url-pattern></servlet-mapping>\n   ```\n\n   \n\n### 6.5、ServletContext\n\nweb容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；\n\n#### 1、共享数据\n\n我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；\n\n```java\npublic class HelloServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {                //this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = \"秦疆\"; //数据        context.setAttribute(\"username\",username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    }}\n```\n\n```java\npublic class GetServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        ServletContext context = this.getServletContext();        String username = (String) context.getAttribute(\"username\");        resp.setContentType(\"text/html\");        resp.setCharacterEncoding(\"utf-8\");        resp.getWriter().print(\"名字\"+username);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n```XML\n    <servlet>        <servlet-name>hello</servlet-name>        <servlet-class>com.kuang.servlet.HelloServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>    <servlet>        <servlet-name>getc</servlet-name>        <servlet-class>com.kuang.servlet.GetServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>getc</servlet-name>        <url-pattern>/getc</url-pattern>    </servlet-mapping>\n```\n\n测试访问结果；\n\n\n\n#### 2、获取初始化参数\n\n```xml\n    <!--配置一些web应用初始化参数-->    <context-param>        <param-name>url</param-name>        <param-value>jdbc:mysql://localhost:3306/mybatis</param-value>    </context-param>\n```\n\n```java\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    ServletContext context = this.getServletContext();    String url = context.getInitParameter(\"url\");    resp.getWriter().print(url);}\n```\n\n#### 3、请求转发\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    ServletContext context = this.getServletContext();    System.out.println(\"进入了ServletDemo04\");    //RequestDispatcher requestDispatcher = context.getRequestDispatcher(\"/gp\"); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(\"/gp\").forward(req,resp);}\n```\n\n<img src=\"/img/javaweb/狂神web/1567924457532.png\" alt=\"1567924457532\" style=\"zoom: 80%;\" />\n\n#### 4、读取资源文件\n\nProperties\n\n- 在java目录下新建properties\n- 在resources目录下新建properties\n\n发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:\n\n思路：需要一个文件流；\n\n```properties\nusername=root12312password=zxczxczxc\n```\n\n```java\npublic class ServletDemo05 extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        InputStream is = this.getServletContext().getResourceAsStream(\"/WEB-INF/classes/com/kuang/servlet/aa.properties\");        Properties prop = new Properties();        prop.load(is);        String user = prop.getProperty(\"username\");        String pwd = prop.getProperty(\"password\");        resp.getWriter().print(user+\":\"+pwd);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n访问测试即可ok；\n\n### 6.6、HttpServletResponse\n\nweb服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；\n\n- 如果要获取客户端请求过来的参数：找HttpServletRequest\n- 如果要给客户端响应一些信息：找HttpServletResponse\n\n#### 1、简单分类\n\n负责向浏览器发送数据的方法\n\n```java\nServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;\n```\n\n负责向浏览器发送响应头的方法\n\n```java\n    void setCharacterEncoding(String var1);    void setContentLength(int var1);    void setContentLengthLong(long var1);    void setContentType(String var1);    void setDateHeader(String var1, long var2);    void addDateHeader(String var1, long var2);    void setHeader(String var1, String var2);    void addHeader(String var1, String var2);    void setIntHeader(String var1, int var2);    void addIntHeader(String var1, int var2);\n```\n\n响应的状态码\n\n```java\n    int SC_CONTINUE = 100;\n    int SC_SWITCHING_PROTOCOLS = 101;\n    int SC_OK = 200;\n    int SC_CREATED = 201;\n    int SC_ACCEPTED = 202;\n    int SC_NON_AUTHORITATIVE_INFORMATION = 203;\n    int SC_NO_CONTENT = 204;\n    int SC_RESET_CONTENT = 205;\n    int SC_PARTIAL_CONTENT = 206;\n    int SC_MULTIPLE_CHOICES = 300;\n    int SC_MOVED_PERMANENTLY = 301;\n    int SC_MOVED_TEMPORARILY = 302;\n    int SC_FOUND = 302;\n    int SC_SEE_OTHER = 303;\n    int SC_NOT_MODIFIED = 304;\n    int SC_USE_PROXY = 305;\n    int SC_TEMPORARY_REDIRECT = 307;\n    int SC_BAD_REQUEST = 400;\n    int SC_UNAUTHORIZED = 401;\n    int SC_PAYMENT_REQUIRED = 402;\n    int SC_FORBIDDEN = 403;\n    int SC_NOT_FOUND = 404;\n    int SC_METHOD_NOT_ALLOWED = 405;\n    int SC_NOT_ACCEPTABLE = 406;\n    int SC_PROXY_AUTHENTICATION_REQUIRED = 407;\n    int SC_REQUEST_TIMEOUT = 408;\n    int SC_CONFLICT = 409;\n    int SC_GONE = 410;\n    int SC_LENGTH_REQUIRED = 411;\n    int SC_PRECONDITION_FAILED = 412;\n    int SC_REQUEST_ENTITY_TOO_LARGE = 413;\n    int SC_REQUEST_URI_TOO_LONG = 414;\n    int SC_UNSUPPORTED_MEDIA_TYPE = 415;\n    int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;\n    int SC_EXPECTATION_FAILED = 417;\n    int SC_INTERNAL_SERVER_ERROR = 500;\n    int SC_NOT_IMPLEMENTED = 501;\n    int SC_BAD_GATEWAY = 502;\n    int SC_SERVICE_UNAVAILABLE = 503;\n    int SC_GATEWAY_TIMEOUT = 504;\n    int SC_HTTP_VERSION_NOT_SUPPORTED = 505;\n```\n\n#### 2、下载文件\n\n1. 向浏览器输出消息 （一直在讲，就不说了）\n2. 下载文件\n   1. 要获取下载文件的路径\n   2. 下载的文件名是啥？\n   3. 设置想办法让浏览器能够支持下载我们需要的东西\n   4. 获取下载文件的输入流\n   5. 创建缓冲区\n   6. 获取OutputStream对象\n   7. 将FileOutputStream流写入到buffer缓冲区\n   8. 使用OutputStream将缓冲区中的数据输出到客户端！\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    // 1. 要获取下载文件的路径\n    String realPath = \"F:\\\\班级管理\\\\西开【19525】\\\\2、代码\\\\JavaWeb\\\\javaweb-02-servlet\\\\response\\\\target\\\\classes\\\\秦疆.png\";\n    System.out.println(\"下载文件的路径：\"+realPath);\n    // 2. 下载的文件名是啥？\n    String fileName = realPath.substring(realPath.lastIndexOf(\"\\\\\") + 1);\n    // 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码\n    resp.setHeader(\"Content-Disposition\",\"attachment;filename=\"+URLEncoder.encode(fileName,\"UTF-8\"));\n    // 4. 获取下载文件的输入流\n    FileInputStream in = new FileInputStream(realPath);\n    // 5. 创建缓冲区\n    int len = 0;\n    byte[] buffer = new byte[1024];\n    // 6. 获取OutputStream对象\n    ServletOutputStream out = resp.getOutputStream();\n    // 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！\n    while ((len=in.read(buffer))>0){\n        out.write(buffer,0,len);\n    }\n\n    in.close();\n    out.close();\n}\n```\n\n#### 3、验证码功能\n\n验证怎么来的？\n\n- 前端实现\n- 后端实现，需要用到 Java 的图片类，生产一个图片\n\n```java\npackage com.kuang.servlet;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random;public class ImageServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //如何让浏览器3秒自动刷新一次;        resp.setHeader(\"refresh\",\"3\");                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(\"image/jpeg\");        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(\"expires\",-1);        resp.setHeader(\"Cache-Control\",\"no-cache\");        resp.setHeader(\"Pragma\",\"no-cache\");        //把图片写给浏览器        ImageIO.write(image,\"jpg\", resp.getOutputStream());    }    //生成随机数    private String makeNum(){        Random random = new Random();        String num = random.nextInt(9999999) + \"\";        StringBuffer sb = new StringBuffer();        for (int i = 0; i < 7-num.length() ; i++) {            sb.append(\"0\");        }        num = sb.toString() + num;        return num;    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n#### 4、实现重定向\n\n![1567931587955](/img/javaweb/狂神web/1567931587955.png)\n\nB一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向\n\n常见场景：\n\n- 用户登录\n\n```java\nvoid sendRedirect(String var1) throws IOException;\n```\n\n测试：\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    /*        resp.setHeader(\"Location\",\"/r/img\");        resp.setStatus(302);         */    resp.sendRedirect(\"/r/img\");//重定向}\n```\n\n面试题：请你聊聊重定向和转发的区别？\n\n相同点\n\n- 页面都会实现跳转\n\n不同点\n\n- 请求转发的时候，url不会产生变化\n- 重定向时候，url地址栏会发生变化；\n\n![1567932163430](/img/javaweb/狂神web/1567932163430.png)\n\n#### 5、简单实现登录重定向\n\n```jsp\n<%--这里提交的路径，需要寻找到项目的路径--%><%--${pageContext.request.contextPath}代表当前的项目--%><form action=\"${pageContext.request.contextPath}/login\" method=\"get\">    用户名：<input type=\"text\" name=\"username\"> <br>    密码：<input type=\"password\" name=\"password\"> <br>    <input type=\"submit\"></form>\n```\n\n```JAVA\n    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //处理请求        String username = req.getParameter(\"username\");        String password = req.getParameter(\"password\");        System.out.println(username+\":\"+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(\"/r/success.jsp\");    }\n```\n\n```xml\n  <servlet>    <servlet-name>requset</servlet-name>    <servlet-class>com.kuang.servlet.RequestTest</servlet-class>  </servlet>  <servlet-mapping>    <servlet-name>requset</servlet-name>    <url-pattern>/login</url-pattern>  </servlet-mapping>\n```\n\n```jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %><html><head>    <title>Title</title></head><body><h1>Success</h1></body></html>\n```\n\n### 6.7、HttpServletRequest\n\nHttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；\n\n![1567933996830](/img/javaweb/狂神web/1567933996830.png)\n\n![1567934023106](/img/javaweb/狂神web/1567934023106.png)\n\n#### 获取参数，请求转发\n\n![1567934110794](/img/javaweb/狂神web/1567934110794.png)\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    req.setCharacterEncoding(\"utf-8\");    resp.setCharacterEncoding(\"utf-8\");    String username = req.getParameter(\"username\");    String password = req.getParameter(\"password\");    String[] hobbys = req.getParameterValues(\"hobbys\");    System.out.println(\"=============================\");    //后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(\"=============================\");    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(\"/success.jsp\").forward(req,resp);}\n```\n\n**面试题：请你聊聊重定向和转发的区别？**\n\n相同点\n\n- 页面都会实现跳转\n\n不同点\n\n- 请求转发的时候，url不会产生变化   307\n- 重定向时候，url地址栏会发生变化； 302\n\n### 6.8、处理中文乱码\n\n```xml\n注册<form action=\"show.jsp\" method=\"post\">  <input  type=\"text\" name=\"name\">  <input  type=\"submit\" value=\"注册\">  </form>     <%//脚本段   String name = request.getParameter(\"name\");    %>        name:<%=name %>   //表达式     This is my JSP page. <br>//处理中文乱码1.   <%   request.setCharacterEncoding(\"UTF-8\");   response.setContentType(\"text/html;charset=utf-8\");   String name = request.getParameter(\"name\");   %>2.    <%   response.setContentType(\"text/html;charset=utf-8\");   String name = request.getParameter(\"name\");      name = new String(name.getBytes(\"ISO-8859-1\"),\"utf-8\");    %>        name:<%=name %>\n```\n\n\n\n## 7、Cookie、Session\n\n### 7.1、会话\n\n**会话**：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；\n\n**有状态会话**：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；\n\n**你能怎么证明你是西开的学生？**\n\n你              西开\n\n1. 发票                西开给你发票\n2. 学校登记        西开标记你来过了\n\n**一个网站，怎么证明你来过？**\n\n客户端              服务端\n\n1. 服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie\n2. 服务器登记你来过了，下次你来的时候我来匹配你； seesion\n\n\n\n### 7.2、保存会话的两种技术\n\n**cookie**\n\n- 客户端技术   （响应，请求）\n\n**session**\n\n- 服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！\n\n\n\n常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！\n\n### 7.3、Cookie\n\n![1568344447291](/img/javaweb/狂神web/1568344447291.png)\n\n1. 从请求中拿到cookie信息\n2. 服务器响应给客户端cookie\n\n```java\nCookie[] cookies = req.getCookies(); //获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(\"lastLoginTime\", System.currentTimeMillis()+\"\"); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie\n```\n\n**cookie：一般会保存在本地的 用户目录下 appdata；**\n\n\n\n一个网站cookie是否存在上限！**聊聊细节问题**\n\n- 一个Cookie只能保存一个信息；\n- 一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；\n- Cookie大小有限制4kb；\n- 300个cookie浏览器上限\n\n\n\n**删除Cookie；**\n\n- 不设置有效期，关闭浏览器，自动失效；\n- 设置有效期时间为 0 ；\n\n\n\n**编码解码：**\n\n```java\nURLEncoder.encode(\"秦疆\",\"utf-8\")URLDecoder.decode(cookie.getValue(),\"UTF-8\")\n```\n\n\n\n### 7.4、Session（重点）\n\n![1568344560794](/img/javaweb/狂神web/1568344560794.png)\n\n什么是Session：\n\n- 服务器会给每一个用户（浏览器）创建一个Seesion对象；\n- 一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；\n- 用户登录之后，整个网站它都可以访问！--> 保存用户的信息；保存购物车的信息…..\n\n![1568342773861](/img/javaweb/狂神web/1568342773861.png)\n\nSession和cookie的区别：\n\n- Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）\n- Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）\n- Session对象由服务创建；\n\n\n\n使用场景：\n\n- 保存一个登录用户的信息；\n- 购物车信息；\n- 在整个网站中经常会使用的数据，我们将它保存在Session中；\n\n\n\n使用Session：\n\n```java\npackage com.kuang.servlet;\n\nimport com.kuang.pojo.Person;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\npublic class SessionDemo01 extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        \n        //解决乱码问题\n        req.setCharacterEncoding(\"UTF-8\");\n        resp.setCharacterEncoding(\"UTF-8\");\n        resp.setContentType(\"text/html;charset=utf-8\");\n        \n        //得到Session\n        HttpSession session = req.getSession();\n        //给Session中存东西\n        session.setAttribute(\"name\",new Person(\"秦疆\",1));\n        //获取Session的ID\n        String sessionId = session.getId();\n\n        //判断Session是不是新创建\n        if (session.isNew()){\n            resp.getWriter().write(\"session创建成功,ID:\"+sessionId);\n        }else {\n            resp.getWriter().write(\"session以及在服务器中存在了,ID:\"+sessionId);\n        }\n\n        //Session创建的时候做了什么事情；\n//        Cookie cookie = new Cookie(\"JSESSIONID\",sessionId);\n//        resp.addCookie(cookie);\n\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doGet(req, resp);\n    }\n}\n\n//得到Session\nHttpSession session = req.getSession();\n\nPerson person = (Person) session.getAttribute(\"name\");\n\nSystem.out.println(person.toString());\n\nHttpSession session = req.getSession();\nsession.removeAttribute(\"name\");\n//手动注销Session\nsession.invalidate();\n```\n\n\n\n**会话自动过期：web.xml配置**\n\n```xml\n<!--设置Session默认的失效时间--><session-config>    <!--15分钟后Session自动失效，以分钟为单位-->    <session-timeout>15</session-timeout></session-config>\n```\n\n\n\n![1568344679763](/img/javaweb/狂神web/1568344679763.png)\n\n\n\n## 8、JSP\n\n==**静态网页&动态网页**==\n\n|          | **静态网页** | **动态网页**                |\n| -------- | ------------ | --------------------------- |\n| 组成     | html+js+css  | jsp+html;asp+html;php+html; |\n| 交互     | 不可交互     | 可交互                      |\n| 运行方式 | 客户端运行   | 服务端生成，客户端运行      |\n| 数据库   | 无数据库连接 | 连接数据库                  |\n\n### 8.1、什么是JSP\n\n- Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！\n- http://127.0.0.1:8080/login/index.jsp\n\n- 最大的特点：\n  - 写JSP就像在写HTML\n  - 区别：\n    - HTML只给用户提供静态的数据\n    - JSP页面中可以嵌入JAVA代码，为用户提供动态数据；\n\n- **工作原理**\n\n  - 客户端请求\n  - 把 *.jsp 翻译成 *.java \n  - 编译为 *.class\n  - 执行生成servlet\n  - 反馈结果给客户端显示\n        第二次访问 有改动 执行上述过程 \n        无改动 直接执行\n\n  - ![123](/img/javaweb/狂神web/clip_image001-1583305097106.png)\n  - <img src=\"/img/javaweb/狂神web/clip_image001-1583305111348.png\" alt=\"112\" style=\"zoom:80%;\" />\n  - ![44](/img/javaweb/狂神web/clip_image001-1583305154041.png)\n  - ![54](/img/javaweb/狂神web/clip_image001-1583305166669.png)\n\n### 8.2、JSP原理\n\n思路：JSP到底怎么执行的！\n\n- 代码层面没有任何问题\n\n- 服务器内部工作\n\n  tomcat中有一个work目录；\n\n  IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录\n\n  ![1568345873736](/img/javaweb/狂神web/1568345873736.png)\n\n  我电脑的地址：\n\n  ```java\n  C:\\Users\\Administrator\\.IntelliJIdea2018.1\\system\\tomcat\\Unnamed_javaweb-session-cookie\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp\n  ```\n\n  发现页面转变成了Java程序！\n\n  ![1568345948307](/img/javaweb/狂神web/1568345948307.png)\n\n\n\n**浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！**\n\nJSP最终也会被转换成为一个Java类！\n\n**JSP 本质上就是一个Servlet**\n\n```java\n//初始化  public void _jspInit() {        }//销毁  public void _jspDestroy() {  }//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      \n```\n\n1. 判断请求\n\n2. 内置一些对象\n\n   ```java\n   final javax.servlet.jsp.PageContext pageContext;  //页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应\n   ```\n\n3. 输出页面前增加的代码\n\n   ```java\n   response.setContentType(\"text/html\");       //设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;\n   ```\n\n4. 以上的这些个对象我们可以在JSP页面中直接使用！\n\n![1568347078207](/img/javaweb/狂神web/1568347078207.png)\n\n\n\n在JSP页面中；\n\n只要是 JAVA代码就会原封不动的输出；\n\n如果是HTML代码，就会被转换为：\n\n```java\nout.write(\"<html>\\r\\n\");\n```\n\n这样的格式，输出到前端！\n\n\n\n### 8.3、JSP基础语法\n\n任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！\n\n#### JSP 的组成 [**JSP页面的构成**](https://www.cnblogs.com/yangyquin/p/5430231.html)\n\n <img src=\"/img/javaweb/狂神web/clip_image001-1583305406375.png\" alt=\"54\" style=\"zoom:50%;\" />\n\n**==1 静态页面==**\n\n##### ==2 指令==\n\n```xml\n<%@ %><!--page--><%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"  contentType=\"text/html; charset=UTF-8\" isErrorPage=\"true\"%><!--include--><%@ include file=\"foot.html\" %>   静态引入/静态包含<%@ include file=\"foot.jsp\" %>使用jsp要删除<% String path = request.getContextPath( );   String basePath = request.getScheme( )+\"://\"+request %><base href=\"<%=basePath%>\"><jsp:include page=\"foot.html\"></jsp:include>   动态引入/动态包含<jsp:include page=\"foot.jsp\"></jsp:include> (可使用html/jsp)    <!--taglib--><%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>     <!--======================================================================-->    <%@page args.... %><%@include file=\"\"%><%--@include会将两个页面合二为一--%><%@include file=\"common/header.jsp\"%><h1>网页主体</h1><%@include file=\"common/footer.jsp\"%><hr><%--jSP标签    jsp:include：拼接页面，本质还是三个    --%><jsp:include page=\"/common/header.jsp\"/><h1>网页主体</h1><jsp:include page=\"/common/footer.jsp\"/>\n```\n\n##### ==3 声明==\n\n- JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！\n\n```xml\n在JSP页面中定义变量,方法或类  <%!  %><%!  String s = \"这是一个声明\" ;    public  int  add(int x,int y ){         return x+y;     } %>=========================================<%!static {  System.out.println(\"Loading Servlet!\");}private int globalVar = 0;public void kuang(){  System.out.println(\"进入了方法Kuang！\");}%>\n```\n\n##### ==4 表达式==\n\n```xml\n<%= 变量或表达式%> basePath:<%=basePath%><body>    <h1>当前时间： </h1>    <%= new Date() %></body>================================<%--JSP表达式作用：用来将程序的输出，输出到客户端<%= 变量或者表达式%>--%><%= new java.util.Date()%>\n```\n\n##### ==5 脚本段==（小脚本/代码块）\n\n```xml\n在JSP页面中执行的Java代码 语法： <% Java代码 %><%  System.out.println(\"这是一个代码块\");%>================================================== <%--jsp脚本片段--%><%int sum = 0;for (int i = 1; i <=100 ; i++) {  sum+=i;}out.println(\"<h1>Sum=\"+sum+\"</h1>\");%>\n```\n\n```xml\n<!--脚本片段的再实现--><%int x = 10;out.println(x);%><p>这是一个JSP文档</p><%int y = 2;out.println(y);%><hr><%--在代码嵌入HTML元素--%><%for (int i = 0; i < 5; i++) {%><h1>Hello,World  <%=i%> </h1><%}%>\n```\n\n##### ==6 标准动作==\n\n```xml\n<jsp:include page=\"foot.html\"></jsp:include>   动态引入/动态包含<jsp:forward page=\"encoding.jsp\"></jsp:forward>\n```\n\n##### ==7 注释==\n\n- JSP的注释，不会在客户端显示，HTML就会！\n\n\n```xml\n<!-- This is my JSP page. <br> --><%--  <% System.out.println(\"这是一个代码块\");%>--%>//System.out.println(\"这是一个代码块\"); /* System.out.println(\"这是一个代码块1\"); */\n```\n\n\n\n### 8.4、9大内置对象\n\n- PageContext    存东西\n- Request     存东西\n- Response\n- Session      存东西\n- Application   【SerlvetContext】   存东西\n- config    【SerlvetConfig】\n- out\n- page ，不用了解\n- exception\n\n```java\npageContext.setAttribute(\"name1\",\"秦疆1号\"); //保存的数据只在一个页面中有效request.setAttribute(\"name2\",\"秦疆2号\"); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(\"name3\",\"秦疆3号\"); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(\"name4\",\"秦疆4号\");  //保存的数据只在服务器中有效，从打开服务器到关闭服务器\n```\n\nrequest：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！\n\nsession：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；\n\napplication：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；\n\n### 8.5、JSP标签、JSTL标签、EL表达式\n\n```xml\n<!-- JSTL表达式的依赖 --><dependency>    <groupId>javax.servlet.jsp.jstl</groupId>    <artifactId>jstl-api</artifactId>    <version>1.2</version></dependency><!-- standard标签库 --><dependency>    <groupId>taglibs</groupId>    <artifactId>standard</artifactId>    <version>1.1.2</version></dependency>\n```\n\nEL表达式：  ${ }\n\n- **获取数据**\n- **执行运算**\n- **获取web开发的常用对象**\n\n\n\n**JSP标签**\n\n```jsp\n<%--jsp:include--%><%--http://localhost:8080/jsptag.jsp?name=kuangshen&age=12--%><jsp:forward page=\"/jsptag2.jsp\">    <jsp:param name=\"name\" value=\"kuangshen\"></jsp:param>    <jsp:param name=\"age\" value=\"12\"></jsp:param></jsp:forward>\n```\n\n\n\n**JSTL表达式**\n\nJSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！\n\n**格式化标签**\n\n**SQL标签**\n\n**XML 标签**\n\n**核心标签** （掌握部分）\n\n![1568362473764](/img/javaweb/狂神web/1568362473764.png)\n\n**JSTL标签库使用步骤**\n\n- 引入对应的 taglib\n- 使用其中的方法\n- **在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误**\n\nc：if\n\n```jsp\n<head>\n    <title>Title</title>\n</head>\n<body>\n\n\n<h4>if测试</h4>\n\n<hr>\n\n<form action=\"coreif.jsp\" method=\"get\">\n    <%--\n    EL表达式获取表单中的数据\n    ${param.参数名}\n    --%>\n    <input type=\"text\" name=\"username\" value=\"${param.username}\">\n    <input type=\"submit\" value=\"登录\">\n</form>\n\n<%--判断如果提交的用户名是管理员，则登录成功--%>\n<c:if test=\"${param.username=='admin'}\" var=\"isAdmin\">\n    <c:out value=\"管理员欢迎您！\"/>\n</c:if>\n\n<%--自闭合标签--%>\n<c:out value=\"${isAdmin}\"/>\n\n</body>\n```\n\nc:choose   c:when\n\n```jsp\n<body><%--定义一个变量score，值为85--%><c:set var=\"score\" value=\"55\"/><c:choose>    <c:when test=\"${score>=90}\">        你的成绩为优秀    </c:when>    <c:when test=\"${score>=80}\">        你的成绩为一般    </c:when>    <c:when test=\"${score>=70}\">        你的成绩为良好    </c:when>    <c:when test=\"${score<=60}\">        你的成绩为不及格    </c:when></c:choose></body>\n```\n\nc:forEach\n\n```jsp\n<%    ArrayList<String> people = new ArrayList<>();    people.add(0,\"张三\");    people.add(1,\"李四\");    people.add(2,\"王五\");    people.add(3,\"赵六\");    people.add(4,\"田六\");    request.setAttribute(\"list\",people);%><%--var , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%><c:forEach var=\"people\" items=\"${list}\">    <c:out value=\"${people}\"/> <br></c:forEach><hr><c:forEach var=\"people\" items=\"${list}\" begin=\"1\" end=\"3\" step=\"1\" >    <c:out value=\"${people}\"/> <br></c:forEach>\n```\n\n## 9、JavaBean\n\n实体类\n\nJavaBean有特定的写法：\n\n- 必须要有一个无参构造\n- 属性必须私有化\n- 必须有对应的get/set方法；\n\n一般用来和数据库的字段做映射  ORM；\n\nORM ：对象关系映射\n\n- 表--->类\n- 字段-->属性\n- 行记录---->对象\n\n**people表**\n\n| id   | name    | age  | address |\n| ---- | ------- | ---- | ------- |\n| 1    | 秦疆1号 | 3    | 西安    |\n| 2    | 秦疆2号 | 18   | 西安    |\n| 3    | 秦疆3号 | 100  | 西安    |\n\n```java\nclass People{    private int id;    private String name;    private int id;    private String address;}class A{    new People(1,\"秦疆1号\",3，\"西安\");    new People(2,\"秦疆2号\",3，\"西安\");    new People(3,\"秦疆3号\",3，\"西安\");}\n```\n\n\n\n- 过滤器\n- 文件上传\n- 邮件发送\n- JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务\n\n\n\n## 10、MVC三层架构\n\n什么是MVC：  Model     view     Controller  模型、视图、控制器\n\n### 10.1、早些年\n\n![1568423664332](/img/javaweb/狂神web/1568423664332.png)\n\n用户直接访问控制层，控制层就可以直接操作数据库；\n\n```java\nservlet--CRUD-->数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....\n```\n\n### 10.2、MVC三层架构\n\n![1568424227281](/img/javaweb/狂神web/1568424227281.png)\n\n\n\nModel\n\n- 业务处理 ：业务逻辑（Service）\n- 数据持久层：CRUD   （Dao）\n\nView\n\n- 展示数据\n- 提供链接发起Servlet请求 （a，form，img…）\n\nController  （Servlet）\n\n- 接收用户的请求 ：（req：请求参数、Session信息….）\n\n- 交给业务层处理对应的代码 \n\n- 控制视图的跳转  \n\n  ```java\n  登录--->接收用户的登录请求--->处理用户的请求（获取用户登录的参数，username，password）---->交给业务层处理登录业务（判断用户名密码是否正确：事务）--->Dao层查询用户名和密码是否正确-->数据库\n  ```\n\n\n\n## 11、Filter （重点）\n\nFilter：过滤器 ，用来过滤网站的数据；\n\n- 处理中文乱码\n- 登录验证….\n\n![1568424858708](/img/javaweb/狂神web/1568424858708.png)\n\nFilter开发步骤：\n\n1. 导包\n\n2. 编写过滤器\n\n   1. 导包不要错\n\n      ![1568425162525](/img/javaweb/狂神web/1568425162525.png)\n\n      实现Filter接口，重写对应的方法即可\n\n      ```java\n      public class CharacterEncodingFilter implements Filter {    //初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException {        System.out.println(\"CharacterEncodingFilter初始化\");    }    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        request.setCharacterEncoding(\"utf-8\");        response.setCharacterEncoding(\"utf-8\");        response.setContentType(\"text/html;charset=UTF-8\");        System.out.println(\"CharacterEncodingFilter执行前....\");        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(\"CharacterEncodingFilter执行后....\");    }    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() {        System.out.println(\"CharacterEncodingFilter销毁\");    }}\n      ```\n\n3. 在web.xml中配置 Filter\n\n   ```xml\n   <filter>    <filter-name>CharacterEncodingFilter</filter-name>    <filter-class>com.kuang.filter.CharacterEncodingFilter</filter-class></filter><filter-mapping>    <filter-name>CharacterEncodingFilter</filter-name>    <!--只要是 /servlet的任何请求，会经过这个过滤器-->    <url-pattern>/servlet/*</url-pattern>    <!--<url-pattern>/*</url-pattern>--></filter-mapping>\n   ```\n\n   \n\n## 12、监听器\n\n实现一个监听器的接口；（有N种）\n\n1. 编写一个监听器\n\n   实现监听器的接口…\n\n   ```java\n   //统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener {    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) {        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(\"OnlineCount\");        if (onlineCount==null){            onlineCount = new Integer(1);        }else {            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        }        ctx.setAttribute(\"OnlineCount\",onlineCount);    }    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) {        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(\"OnlineCount\");        if (onlineCount==null){            onlineCount = new Integer(0);        }else {            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        }        ctx.setAttribute(\"OnlineCount\",onlineCount);    }    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */}\n   ```\n\n2. web.xml中注册监听器\n\n   ```xml\n   <!--注册监听器--><listener>    <listener-class>com.kuang.listener.OnlineCountListener</listener-class></listener>\n   ```\n\n3. 看情况是否使用！\n\n\n\n## 13、过滤器、监听器常见应用\n\n**监听器：GUI编程中经常使用；**\n\n```java\npublic class TestPanel {\n    public static void main(String[] args) {\n        Frame frame = new Frame(\"中秋节快乐\");  //新建一个窗体\n        Panel panel = new Panel(null); //面板\n        frame.setLayout(null); //设置窗体的布局\n\n        frame.setBounds(300,300,500,500);\n        frame.setBackground(new Color(0,0,255)); //设置背景颜色\n\n        panel.setBounds(50,50,300,300);\n        panel.setBackground(new Color(0,255,0)); //设置背景颜色\n\n        frame.add(panel);\n\n        frame.setVisible(true);\n\n        //监听事件，监听关闭事件\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                super.windowClosing(e);\n            }\n        });\n\n\n    }\n}\n```\n\n\n\n用户登录之后才能进入主页！用户注销后就不能进入主页了！\n\n1. 用户登录之后，向Sesison中放入用户的数据\n\n2. 进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！\n\n   ```java\n   HttpServletRequest request = (HttpServletRequest) req;\n   HttpServletResponse response = (HttpServletResponse) resp;\n   \n   if (request.getSession().getAttribute(Constant.USER_SESSION)==null){\n       response.sendRedirect(\"/error.jsp\");\n   }\n   \n   chain.doFilter(request,response);\n   ```\n\n\n\n\n## 14、JDBC\n\n什么是JDBC ： Java连接数据库！\n\n![1568439601825](/img/javaweb/狂神web/1568439601825.png)\n\n需要jar包的支持：\n\n- java.sql\n- javax.sql\n- mysql-conneter-java…  连接驱动（必须要导入）\n\n\n\n**实验环境搭建**\n\n```sql\nCREATE TABLE users(    id INT PRIMARY KEY,    `name` VARCHAR(40),    `password` VARCHAR(40),    email VARCHAR(60),    birthday DATE);INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(1,'张三','123456','zs@qq.com','2000-01-01');INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(2,'李四','123456','ls@qq.com','2000-01-01');INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(3,'王五','123456','ww@qq.com','2000-01-01');SELECT\t* FROM users;\n```\n\n\n\n导入数据库依赖\n\n```xml\n<!--mysql的驱动--><dependency>    <groupId>mysql</groupId>    <artifactId>mysql-connector-java</artifactId>    <version>5.1.47</version></dependency>\n```\n\nIDEA中连接数据库：\n\n![1568440926845](/img/javaweb/狂神web/1568440926845.png)\n\n\n\n**JDBC 固定步骤：**\n\n1. 加载驱动\n2. 连接数据库,代表数据库\n3. 向数据库发送SQL的对象Statement : CRUD\n4. 编写SQL （根据业务，不同的SQL）\n5. 执行SQL\n6. 关闭连接\n\n```java\npublic class TestJdbc {    public static void main(String[] args) throws ClassNotFoundException, SQLException {        //配置信息        //useUnicode=true&characterEncoding=utf-8 解决中文乱码        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";        String username = \"root\";        String password = \"123456\";        //1.加载驱动        Class.forName(\"com.mysql.jdbc.Driver\");        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = \"select * from users\";        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next()){            System.out.println(\"id=\"+rs.getObject(\"id\"));            System.out.println(\"name=\"+rs.getObject(\"name\"));            System.out.println(\"password=\"+rs.getObject(\"password\"));            System.out.println(\"email=\"+rs.getObject(\"email\"));            System.out.println(\"birthday=\"+rs.getObject(\"birthday\"));        }        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    }}\n```\n\n\n\n**预编译SQL**\n\n```java\npublic class TestJDBC2 {    public static void main(String[] args) throws Exception {        //配置信息        //useUnicode=true&characterEncoding=utf-8 解决中文乱码        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";        String username = \"root\";        String password = \"123456\";        //1.加载驱动        Class.forName(\"com.mysql.jdbc.Driver\");        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = \"insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);\";        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,\"狂神说Java\");//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,\"123456\");//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,\"24736743@qq.com\");//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i>0){            System.out.println(\"插入成功@\");        }        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    }}\n```\n\n\n\n**事务**\n\n要么都成功，要么都失败！\n\nACID原则：保证数据的安全。\n\n```java\n开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:1000    A(900)   --100-->   B(1100) \n```\n\n\n\n**Junit单元测试**\n\n依赖\n\n```xml\n<!--单元测试--><dependency>    <groupId>junit</groupId>    <artifactId>junit</artifactId>    <version>4.12</version></dependency>\n```\n\n简单使用\n\n@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！\n\n```java\n@Test\npublic void test(){\n    System.out.println(\"Hello\");\n}\n```\n\n![1568442261610](/img/javaweb/狂神web/1568442261610.png)\n\n失败的时候是红色：\n\n![1568442289597](/img/javaweb/狂神web/1568442289597.png)\n\n\n\n**搭建一个环境**\n\n```sql\nCREATE TABLE account(\n   id INT PRIMARY KEY AUTO_INCREMENT,\n   `name` VARCHAR(40),\n   money FLOAT\n);\n\nINSERT INTO account(`name`,money) VALUES('A',1000);\nINSERT INTO account(`name`,money) VALUES('B',1000);\nINSERT INTO account(`name`,money) VALUES('C',1000);\n```\n\n```java\n    @Test\n    public void test() {\n        //配置信息\n        //useUnicode=true&characterEncoding=utf-8 解决中文乱码\n        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";\n        String username = \"root\";\n        String password = \"123456\";\n\n        Connection connection = null;\n\n        //1.加载驱动\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            //2.连接数据库,代表数据库\n             connection = DriverManager.getConnection(url, username, password);\n\n            //3.通知数据库开启事务,false 开启\n            connection.setAutoCommit(false);\n\n            String sql = \"update account set money = money-100 where name = 'A'\";\n            connection.prepareStatement(sql).executeUpdate();\n\n            //制造错误\n            //int i = 1/0;\n\n            String sql2 = \"update account set money = money+100 where name = 'B'\";\n            connection.prepareStatement(sql2).executeUpdate();\n\n            connection.commit();//以上两条SQL都执行成功了，就提交事务！\n            System.out.println(\"success\");\n        } catch (Exception e) {\n            try {\n                //如果出现异常，就通知数据库回滚事务\n                connection.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            e.printStackTrace();\n        }finally {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n","slug":"javaWeb笔记","published":1,"updated":"2021-08-20T01:05:03.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksjr6j4r000lfgu9ad156hxs","content":"<h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><h3 id=\"1-1、前言\"><a href=\"#1-1、前言\" class=\"headerlink\" title=\"1.1、前言\"></a>1.1、前言</h3><p>web开发：</p>\n<ul>\n<li>web，网页的意思  ， <a href=\"http://www.baidu.com/\">www.baidu.com</a></li>\n<li>静态web<ul>\n<li>html，css</li>\n<li>提供给所有人看的数据始终不会发生变化！</li>\n</ul>\n</li>\n<li>动态web<ul>\n<li>淘宝，几乎是所有的网站；</li>\n<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li>\n<li>技术栈：Servlet/JSP，ASP，PHP</li>\n</ul>\n</li>\n</ul>\n<p>在Java中，动态web资源开发的技术统称为JavaWeb；</p>\n<h3 id=\"1-2、web应用程序\"><a href=\"#1-2、web应用程序\" class=\"headerlink\" title=\"1.2、web应用程序\"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>\n<ul>\n<li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li>\n<li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li>\n<li>URL </li>\n<li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>\n<li>一个web应用由多部分组成 （静态web，动态web）<ul>\n<li>html，css，js</li>\n<li>jsp，servlet</li>\n<li>Java程序</li>\n<li>jar包</li>\n<li>配置文件 （Properties）</li>\n</ul>\n</li>\n</ul>\n<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p>\n<h4 id=\"Web应用程序概述\"><a href=\"#Web应用程序概述\" class=\"headerlink\" title=\"Web应用程序概述\"></a>Web应用程序概述</h4><ul>\n<li><p>Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。</p>\n</li>\n<li><p>一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。</p>\n</li>\n</ul>\n<h4 id=\"应用程序模式\"><a href=\"#应用程序模式\" class=\"headerlink\" title=\"应用程序模式\"></a>应用程序模式</h4><ul>\n<li><p>应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。</p>\n<img src=\"/img/javaweb/狂神web/clip_image001.jpg\" alt=\"12\" style=\"zoom:80%;\" />\n\n<img src=\"/img/javaweb/狂神web/clip_image001-1583293770740.jpg\" alt=\"11\" style=\"zoom:67%;\" /></li>\n</ul>\n<h5 id=\"1，C-S架构\"><a href=\"#1，C-S架构\" class=\"headerlink\" title=\"1，C/S架构\"></a>1，C/S架构</h5><ul>\n<li>C/S是Client/Server的缩写。</li>\n<li>Server即服务器，通常采用高性能的PC或工作站，</li>\n<li>Client即客户端，需要在客户电脑上安装专用的客户端软件。</li>\n<li>例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。</li>\n</ul>\n<h5 id=\"2，B-S架构\"><a href=\"#2，B-S架构\" class=\"headerlink\" title=\"2，B/S架构\"></a>2，B/S架构</h5><ul>\n<li><p>B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。</p>\n</li>\n<li><p>在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。</p>\n</li>\n<li><p>例如京东、淘宝、12306等都是B/S架构。</p>\n</li>\n<li><p>WEB应用程序一般是B/S模式。</p>\n</li>\n<li><p>B/S优点：</p>\n<ul>\n<li><p>耦合度小，利于分工协作，提高开发效率</p>\n</li>\n<li><p>具有良好的可扩展性和可维护性</p>\n</li>\n<li><p>升级成本小</p>\n</li>\n<li><p>简化了客户端电脑载荷</p>\n</li>\n<li><p>减轻了系统维护与升级的成本和工作量</p>\n</li>\n<li><p>降低了用户的总体成本</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3、静态web\"><a href=\"#1-3、静态web\" class=\"headerlink\" title=\"1.3、静态web\"></a>1.3、静态web</h3><ul>\n<li><code>*.htm, *.html</code>,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567822802516.png\" alt=\"1567822802516\"></p>\n<ul>\n<li>静态web存在的缺点<ul>\n<li>Web页面无法动态更新，所有用户看到都是同一个页面<ul>\n<li>轮播图，点击特效：伪动态</li>\n<li>JavaScript [实际开发中，它用的最多]</li>\n<li>VBScript</li>\n</ul>\n</li>\n<li>它无法和数据库交互（数据无法持久化，用户无法交互）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4、动态web\"><a href=\"#1-4、动态web\" class=\"headerlink\" title=\"1.4、动态web\"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567823191289.png\" alt=\"1567823191289\"></p>\n<p>缺点：</p>\n<ul>\n<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul>\n<li>停机维护</li>\n</ul>\n</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>Web页面可以动态更新，所有用户看到都不是同一个页面</li>\n<li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567823350584.png\" alt=\"1567823350584\"></p>\n<h4 id=\"静态网页与动态网页\"><a href=\"#静态网页与动态网页\" class=\"headerlink\" title=\"静态网页与动态网页\"></a>静态网页与动态网页</h4><ul>\n<li><p>静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。</p>\n</li>\n<li><p>动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。</p>\n</li>\n</ul>\n<h3 id=\"1-5、访问Web资源\"><a href=\"#1-5、访问Web资源\" class=\"headerlink\" title=\"1.5、访问Web资源\"></a>1.5、访问Web资源</h3><h4 id=\"什么是URL\"><a href=\"#什么是URL\" class=\"headerlink\" title=\"什么是URL\"></a>什么是URL</h4><ul>\n<li>URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。</li>\n<li>统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。</li>\n<li>简单地说，URL就是Web地址，俗称“网址”。</li>\n</ul>\n<h5 id=\"URL的组成\"><a href=\"#URL的组成\" class=\"headerlink\" title=\"URL的组成\"></a>URL的组成</h5><ul>\n<li><p>URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。</p>\n</li>\n<li><p>以这样一个URL:<a href=\"http://localhost:8080/FirstWeb/index.jsp%E4%B8%BA%E4%BE%8B%E6%9D%A5%E5%88%86%E6%9E%90URL%E7%9A%84%E7%BB%84%E6%88%90%E3%80%82\">http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。</a></p>\n</li>\n</ul>\n<ol>\n<li><p>==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。</p>\n</li>\n<li><p>==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。</p>\n</li>\n<li><p>==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。</p>\n</li>\n<li><p>==路径==： 路径（包括请求的资源）由零个或多个 “/“ 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。</p>\n</li>\n</ol>\n<ul>\n<li>==URL的组成:==<ul>\n<li>协议</li>\n<li>主机（包括端口号）</li>\n<li>路径</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、web服务器\"><a href=\"#2、web服务器\" class=\"headerlink\" title=\"2、web服务器\"></a>2、web服务器</h2><ul>\n<li>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</li>\n<li>下面介绍几种常用的WEB服务器。<ul>\n<li>==WebLogic==<ul>\n<li>BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。</li>\n<li>BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，</li>\n<li>它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。</li>\n</ul>\n</li>\n<li>==Apache==<ul>\n<li>Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。</li>\n<li>世界上很多著名的网站都是Apache的产物，</li>\n<li>它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。</li>\n</ul>\n</li>\n<li>==Tomcat==<ul>\n<li>Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。</li>\n<li>它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。</li>\n<li>Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。</li>\n</ul>\n</li>\n<li>==Jboss==<ul>\n<li>是一个基于==J2EE==的==开放源代码==的应用服务器。</li>\n<li>JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。</li>\n<li>JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。</li>\n<li>但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1、技术讲解\"><a href=\"#2-1、技术讲解\" class=\"headerlink\" title=\"2.1、技术讲解\"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p>\n<ul>\n<li><p>微软：国内最早流行的就是ASP；</p>\n</li>\n<li><p>在HTML中嵌入了VB的脚本，  ASP + COM；</p>\n</li>\n<li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p>\n</li>\n<li><p>维护成本高！</p>\n</li>\n<li><p>C# </p>\n</li>\n<li><p>IIS</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            &lt;%</span><br><span class=\"line\">            System.out.println(&quot;hello&quot;)</span><br><span class=\"line\">            %&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>php：</strong></p>\n<ul>\n<li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li>\n<li>无法承载大访问量的情况（局限性）</li>\n</ul>\n<p>**JSP/Servlet : ** </p>\n<p>B/S：浏览和服务器</p>\n<p>C/S:  客户端和服务器</p>\n<ul>\n<li>sun公司主推的B/S架构</li>\n<li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li>\n<li>可以承载三高问题带来的影响；</li>\n<li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li>\n</ul>\n<h3 id=\"2-2、web服务器\"><a href=\"#2-2、web服务器\" class=\"headerlink\" title=\"2.2、web服务器\"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p>\n<p><strong>==IIS==</strong></p>\n<p>微软的； ASP…,Windows中自带的</p>\n<p>==<strong>Tomcat</strong>==</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567824446428.png\" alt=\"1567824446428\"></p>\n<p>面向百度编程；</p>\n<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>\n<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href=\"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8\">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p>\n<p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p>\n<p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p>\n<p>下载tomcat：</p>\n<ol>\n<li>安装 or  解压</li>\n<li>了解配置文件及目录结构</li>\n<li>这个东西的作用</li>\n</ol>\n<h2 id=\"3、Tomcat\"><a href=\"#3、Tomcat\" class=\"headerlink\" title=\"3、Tomcat\"></a>3、Tomcat</h2><h3 id=\"3-1、-安装tomcat\"><a href=\"#3-1、-安装tomcat\" class=\"headerlink\" title=\"3.1、 安装tomcat\"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href=\"http://tomcat.apache.org/\">http://tomcat.apache.org/</a></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825600842.png\" alt=\"1567825600842\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825627138.png\" alt=\"1567825627138\"></p>\n<h3 id=\"3-2、Tomcat启动和配置\"><a href=\"#3-2、Tomcat启动和配置\" class=\"headerlink\" title=\"3.2、Tomcat启动和配置\"></a>3.2、Tomcat启动和配置</h3><h4 id=\"Tomcat目录作用描述\"><a href=\"#Tomcat目录作用描述\" class=\"headerlink\" title=\"Tomcat目录作用描述\"></a>Tomcat目录作用描述</h4><table>\n<thead>\n<tr>\n<th><strong>目录</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==<strong>bin</strong>==</td>\n<td>存放各平台下用于启动和停止Tomcat的脚本文件</td>\n</tr>\n<tr>\n<td>==<strong>conf</strong>==</td>\n<td>存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml</td>\n</tr>\n<tr>\n<td>==<strong>lib</strong>==</td>\n<td>存放tomcat服务器所需的jar文件</td>\n</tr>\n<tr>\n<td>==<strong>webapps</strong>==</td>\n<td>Web应用的发布目录</td>\n</tr>\n<tr>\n<td>==<strong>work</strong>==</td>\n<td>Jsp运行时生成的Servlet文件</td>\n</tr>\n<tr>\n<td>==<strong>logs</strong>==</td>\n<td>存放tomcat的日志文件</td>\n</tr>\n<tr>\n<td>==<strong>temp</strong>==</td>\n<td>Tomcat运行时存放临时文件</td>\n</tr>\n</tbody></table>\n<p>文件夹作用：</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825763180.png\" alt=\"1567825763180\"></p>\n<p><strong>启动。关闭Tomcat</strong></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825840657.png\" alt=\"1567825840657\"></p>\n<p>访问测试：<a href=\"http://localhost:8080/\">http://localhost:8080/</a></p>\n<p>可能遇到的问题：</p>\n<ol>\n<li>Java环境变量没有配置</li>\n<li>闪退问题：需要配置兼容性</li>\n<li>乱码问题：配置文件中设置</li>\n</ol>\n<h3 id=\"3-3、配置\"><a href=\"#3-3、配置\" class=\"headerlink\" title=\"3.3、配置\"></a>3.3、配置</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825967256.png\" alt=\"1567825967256\"></p>\n<p>可以配置启动的端口号</p>\n<ul>\n<li>tomcat的默认端口号为：8080</li>\n<li>mysql：3306</li>\n<li>http：80</li>\n<li>https：443</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8081&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">&quot;20000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">redirectPort</span>=<span class=\"string\">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以配置主机的名称</p>\n<ul>\n<li>默认的主机名为：localhost-&gt;127.0.0.1</li>\n<li>默认网站应用存放的位置为：webapps</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;www.qinjiang.com&quot;</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">&quot;webapps&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">unpackWARs</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高难度面试题\"><a href=\"#高难度面试题\" class=\"headerlink\" title=\"高难度面试题\"></a>高难度面试题</h4><p>请你谈谈网站是如何进行访问的！</p>\n<ol>\n<li><p>输入一个域名；回车</p>\n</li>\n<li><p>检查本机的 C:\\Windows\\System32\\drivers\\etc\\hosts配置文件下有没有这个域名映射；</p>\n<ol>\n<li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>       www.qinjiang.com</span><br></pre></td></tr></table></figure></li>\n<li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p>\n</li>\n</ol>\n<img src=\"/img/javaweb/狂神web/1567827057913.png\" alt=\"1567827057913\" style=\"zoom: 67%;\" /></li>\n<li><p>可以配置一下环境变量（可选性）</p>\n</li>\n</ol>\n<h3 id=\"3-4、发布一个web网站\"><a href=\"#3-4、发布一个web网站\" class=\"headerlink\" title=\"3.4、发布一个web网站\"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p>\n<ul>\n<li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li>\n</ul>\n<p>网站应该有的结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--webapps ：Tomcat服务器的web目录</span><br><span class=\"line\">\t-ROOT</span><br><span class=\"line\">\t-kuangstudy ：网站的目录名</span><br><span class=\"line\">\t\t- WEB-INF</span><br><span class=\"line\">\t\t\t-classes : java程序</span><br><span class=\"line\">\t\t\t-lib：web应用所依赖的jar包</span><br><span class=\"line\">\t\t\t-web.xml ：网站配置文件</span><br><span class=\"line\">\t\t- index.html 默认的首页</span><br><span class=\"line\">\t\t- <span class=\"keyword\">static</span> </span><br><span class=\"line\">            -css</span><br><span class=\"line\">            \t-style.css</span><br><span class=\"line\">            -js</span><br><span class=\"line\">            -img</span><br><span class=\"line\">         -.....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>HTTP协议 ： 面试</p>\n<p>Maven：构建工具</p>\n<ul>\n<li>Maven安装包</li>\n</ul>\n<p>Servlet 入门</p>\n<ul>\n<li>HelloWorld！</li>\n<li>Servlet配置</li>\n<li>原理</li>\n</ul>\n<h2 id=\"4、Http\"><a href=\"#4、Http\" class=\"headerlink\" title=\"4、Http\"></a>4、Http</h2><h3 id=\"4-1、什么是HTTP\"><a href=\"#4-1、什么是HTTP\" class=\"headerlink\" title=\"4.1、什么是HTTP\"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>\n<ul>\n<li>文本：html，字符串，~ ….</li>\n<li>超文本：图片，音乐，视频，定位，地图…….</li>\n<li>80</li>\n</ul>\n<p>Https：安全的</p>\n<ul>\n<li>443</li>\n</ul>\n<h3 id=\"4-2、两个时代\"><a href=\"#4-2、两个时代\" class=\"headerlink\" title=\"4.2、两个时代\"></a>4.2、两个时代</h3><ul>\n<li><p>http1.0</p>\n<ul>\n<li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li>\n<li>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</li>\n</ul>\n</li>\n<li><p>http2.0</p>\n<ul>\n<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li>\n</ul>\n</li>\n<li><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n</li>\n</ul>\n<h3 id=\"4-3、Http请求\"><a href=\"#4-3、Http请求\" class=\"headerlink\" title=\"4.3、Http请求\"></a>4.3、Http请求</h3><h5 id=\"HTTP请求方式\"><a href=\"#HTTP请求方式\" class=\"headerlink\" title=\"HTTP请求方式\"></a>HTTP请求方式</h5><ul>\n<li><p>HTTP请求是指从客户端到服务器端的请求消息。</p>\n</li>\n<li><p>包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。</p>\n</li>\n<li><p>根据HTTP标准，HTTP请求可以使用多种请求方法。 </p>\n</li>\n<li><p>==客户端—发请求（Request）—服务器==</p>\n</li>\n</ul>\n<p>百度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL:https:<span class=\"comment\">//www.baidu.com/   请求地址</span></span><br><span class=\"line\">Request Method:GET    get方法/post方法</span><br><span class=\"line\">Status Code:<span class=\"number\">200</span> OK    状态码：<span class=\"number\">200</span></span><br><span class=\"line\">Remote（远程） Address:<span class=\"number\">14.215</span><span class=\"number\">.177</span><span class=\"number\">.39</span>:<span class=\"number\">443</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:text/html  </span><br><span class=\"line\">Accept-Encoding:gzip, deflate, br</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=<span class=\"number\">0.9</span>    语言</span><br><span class=\"line\">Cache-Control:max-age=<span class=\"number\">0</span></span><br><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、请求行\"><a href=\"#1、请求行\" class=\"headerlink\" title=\"1、请求行\"></a>1、请求行</h4><ul>\n<li><p>请求行中的请求方式：GET</p>\n</li>\n<li><p>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…</p>\n<ul>\n<li><p>get：</p>\n<ul>\n<li>请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==</li>\n<li>GET是最简单的HTTP方法，</li>\n<li>其主要任务就是要求服务器获得一个资源并把资源发回来，</li>\n<li>请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。</li>\n<li>GET请求网址<a href=\"http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20\">http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20</a></li>\n<li>GET 请求可被缓存</li>\n<li>GET 请求有长度限制</li>\n</ul>\n</li>\n<li><p>post：</p>\n<ul>\n<li>请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==</li>\n<li>POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，</li>\n<li>请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，</li>\n<li>浏览器的地址栏中不显示参数信息。</li>\n<li>POST请求网址 <a href=\"http://localhost:8080/FirstWeb/test\">http://localhost:8080/FirstWeb/test </a></li>\n<li>POST 请求不会被缓存</li>\n<li>POST 请求对数据长度没有要求</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、消息头\"><a href=\"#2、消息头\" class=\"headerlink\" title=\"2、消息头\"></a>2、消息头</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept：告诉浏览器，它所支持的数据类型</span><br><span class=\"line\">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class=\"number\">8</span>   GB2312  ISO8859-<span class=\"number\">1</span></span><br><span class=\"line\">Accept-Language：告诉浏览器，它的语言环境</span><br><span class=\"line\">Cache-Control：缓存控制</span><br><span class=\"line\">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class=\"line\">HOST：主机..../.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4、Http响应\"><a href=\"#4-4、Http响应\" class=\"headerlink\" title=\"4.4、Http响应\"></a>4.4、Http响应</h3><ul>\n<li>服务器—响应—–客户端</li>\n</ul>\n<p>百度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:<span class=\"keyword\">private</span>    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-响应体\"><a href=\"#1-响应体\" class=\"headerlink\" title=\"1.响应体\"></a>1.响应体</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class=\"number\">8</span>   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-响应状态码\"><a href=\"#2-响应状态码\" class=\"headerlink\" title=\"2.响应状态码\"></a>2.响应状态码</h4><p>200：请求响应成功  200</p>\n<p>3xx：请求重定向 </p>\n<ul>\n<li>重定向：你重新到我给你新位置去；</li>\n</ul>\n<p>4xx：找不到资源   404</p>\n<ul>\n<li>资源不存在；</li>\n</ul>\n<p>5xx：服务器代码错误   500       502:网关错误</p>\n<h4 id=\"常见面试题\"><a href=\"#常见面试题\" class=\"headerlink\" title=\"常见面试题\"></a>常见面试题</h4><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>\n<h2 id=\"5、Maven\"><a href=\"#5、Maven\" class=\"headerlink\" title=\"5、Maven\"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p>\n<ol>\n<li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p>\n</li>\n<li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p>\n<p>由此，Maven诞生了！</p>\n</li>\n</ol>\n<h3 id=\"5-1-Maven项目架构管理工具\"><a href=\"#5-1-Maven项目架构管理工具\" class=\"headerlink\" title=\"5.1 Maven项目架构管理工具\"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p>\n<p>Maven的核心思想：<strong>约定大于配置</strong></p>\n<ul>\n<li>有约束，不要去违反。</li>\n</ul>\n<p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p>\n<h3 id=\"5-2-下载安装Maven\"><a href=\"#5-2-下载安装Maven\" class=\"headerlink\" title=\"5.2 下载安装Maven\"></a>5.2 下载安装Maven</h3><p>官网;<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567842350606.png\" alt=\"1567842350606\"></p>\n<p>下载完成后，解压即可；</p>\n<p>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p>\n<h3 id=\"5-3-配置环境变量\"><a href=\"#5-3-配置环境变量\" class=\"headerlink\" title=\"5.3 配置环境变量\"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p>\n<p>配置如下配置：</p>\n<ul>\n<li>M2_HOME     maven目录下的bin目录</li>\n<li>MAVEN_HOME      maven的目录</li>\n<li>在系统的path中配置  %MAVEN_HOME%\\bin</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567842882993.png\" alt=\"1567842882993\"></p>\n<p>测试Maven是否安装成功，保证必须配置完毕！</p>\n<h3 id=\"5-4-阿里云镜像\"><a href=\"#5-4-阿里云镜像\" class=\"headerlink\" title=\"5.4 阿里云镜像\"></a>5.4 阿里云镜像</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844609399.png\" alt=\"1567844609399\"></p>\n<ul>\n<li>镜像：mirrors<ul>\n<li>作用：加速我们的下载</li>\n</ul>\n</li>\n<li>国内建议使用阿里云的镜像</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5-本地仓库\"><a href=\"#5-5-本地仓库\" class=\"headerlink\" title=\"5.5 本地仓库\"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p>\n<p><strong>建立一个本地仓库：</strong>localRepository</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\Environment\\apache-maven-3.6.2\\maven-repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-6、在IDEA中使用Maven\"><a href=\"#5-6、在IDEA中使用Maven\" class=\"headerlink\" title=\"5.6、在IDEA中使用Maven\"></a>5.6、在IDEA中使用Maven</h3><ol>\n<li><p>启动IDEA</p>\n</li>\n<li><p>创建一个MavenWeb项目</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844785602.png\" alt=\"1567844785602\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844841172.png\" alt=\"1567844841172\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844917185.png\" alt=\"1567844917185\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844956177.png\" alt=\"1567844956177\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845029864.png\" alt=\"1567845029864\"></p>\n</li>\n<li><p>等待项目初始化完毕</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845105970.png\" alt=\"1567845105970\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845137978.png\" alt=\"1567845137978\"></p>\n</li>\n<li><p>观察maven仓库中多了什么东西？</p>\n</li>\n<li><p>IDEA中的Maven设置</p>\n<p>注意：IDEA项目创建成功后，看一眼Maven的配置</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845341956.png\" alt=\"1567845341956\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845413672.png\" alt=\"1567845413672\"></p>\n</li>\n<li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p>\n</li>\n</ol>\n<h3 id=\"5-7、创建一个普通的Maven项目\"><a href=\"#5-7、创建一个普通的Maven项目\" class=\"headerlink\" title=\"5.7、创建一个普通的Maven项目\"></a>5.7、创建一个普通的Maven项目</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845557744.png\" alt=\"1567845557744\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845717377.png\" alt=\"1567845717377\"></p>\n<p>这个只有在Web应用下才会有！</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845782034.png\" alt=\"1567845782034\"></p>\n<h3 id=\"5-8-标记文件夹功能\"><a href=\"#5-8-标记文件夹功能\" class=\"headerlink\" title=\"5.8 标记文件夹功能\"></a>5.8 标记文件夹功能</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845910728.png\" alt=\"1567845910728\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845957139.png\" alt=\"1567845957139\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846034906.png\" alt=\"1567846034906\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846073511.png\" alt=\"1567846073511\"></p>\n<h3 id=\"5-9-在-IDEA中配置Tomcat\"><a href=\"#5-9-在-IDEA中配置Tomcat\" class=\"headerlink\" title=\"5.9 在 IDEA中配置Tomcat\"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846140348.png\" alt=\"1567846140348\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846179573.png\" alt=\"1567846179573\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846234175.png\" alt=\"1567846234175\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846369751.png\" alt=\"1567846369751\"></p>\n<p>解决警告问题</p>\n<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846421963.png\" alt=\"1567846421963\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846546465.png\" alt=\"1567846546465\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846559111.png\" alt=\"1567846559111\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846640372.png\" alt=\"1567846640372\"></p>\n<h3 id=\"5-10-pom文件\"><a href=\"#5-10-pom文件\" class=\"headerlink\" title=\"5.10 pom文件\"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846784849.png\" alt=\"1567846784849\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.kuang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--Package：项目的打包方式</span></span><br><span class=\"line\"><span class=\"comment\">  jar：java应用</span></span><br><span class=\"line\"><span class=\"comment\">  war：JavaWeb应用</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--配置--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--编码版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目依赖--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目构建用的东西--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span><span class=\"comment\">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-clean-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-install-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567847410771.png\" alt=\"1567847410771\"></p>\n<p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-12-IDEA操作\"><a href=\"#5-12-IDEA操作\" class=\"headerlink\" title=\"5.12 IDEA操作\"></a>5.12 IDEA操作</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567847630808.png\" alt=\"1567847630808\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567847662429.png\" alt=\"1567847662429\"></p>\n<h3 id=\"5-13-解决遇到的问题\"><a href=\"#5-13-解决遇到的问题\" class=\"headerlink\" title=\"5.13 解决遇到的问题\"></a>5.13 解决遇到的问题</h3><ol>\n<li><p>Maven 3.6.2</p>\n<p>解决方法：降级为3.6.1</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567904721301.png\" alt=\"1567904721301\"></p>\n</li>\n<li><p>Tomcat闪退</p>\n</li>\n<li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905247201.png\" alt=\"1567905247201\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905291002.png\" alt=\"1567905291002\"></p>\n</li>\n<li><p>Maven项目中Tomcat无法配置</p>\n</li>\n<li><p>maven默认web项目中的web.xml版本问题</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905537026.png\" alt=\"1567905537026\"></p>\n</li>\n<li><p>替换为webapp4.0版本和tomcat一致</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span>         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>         <span class=\"attr\">metadata-complete</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Maven仓库的使用</p>\n<p>地址：<a href=\"https://mvnrepository.com/\">https://mvnrepository.com/</a></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905870750.png\" alt=\"1567905870750\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905982979.png\" alt=\"1567905982979\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567906017448.png\" alt=\"1567906017448\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567906039469.png\" alt=\"1567906039469\"></p>\n</li>\n</ol>\n<h2 id=\"6、Servlet\"><a href=\"#6、Servlet\" class=\"headerlink\" title=\"6、Servlet\"></a>6、Servlet</h2><h3 id=\"6-1、Servlet简介\"><a href=\"#6-1、Servlet简介\" class=\"headerlink\" title=\"6.1、Servlet简介\"></a>6.1、Servlet简介</h3><ul>\n<li><p>Servlet就是sun公司开发动态web的一门技术</p>\n</li>\n<li><p>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：</p>\n<ul>\n<li>编写一个类，实现Servlet接口</li>\n<li>把开发好的Java类部署到web服务器中。</li>\n</ul>\n</li>\n<li><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"6-2、HelloServlet\"><a href=\"#6-2、HelloServlet\" class=\"headerlink\" title=\"6.2、HelloServlet\"></a>6.2、HelloServlet</h3><h4 id=\"1-Servlet入门\"><a href=\"#1-Servlet入门\" class=\"headerlink\" title=\"1 Servlet入门\"></a>1 Servlet入门</h4><ul>\n<li><p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。</p>\n</li>\n<li><p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。</p>\n</li>\n<li><p>Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>\n</li>\n<li><p>这个==过程==为：</p>\n<p>1、客户端发送请求至服务器端；</p>\n<p>2、服务器将请求信息发送至 Servlet；</p>\n<p>3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；</p>\n<p>4、服务器将响应返回给客户端。</p>\n</li>\n<li><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p>\n</li>\n<li><p>配置web.xml</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注册一个Servlet --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet标识名 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet类的全限定名 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.aaa.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span><span class=\"comment\">&lt;!-- 配置Servlet映射信息 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet标识名和上面一致 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   <span class=\"comment\">&lt;!-- 访问路径 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p>\n</li>\n<li><p>关于Maven父子工程的理解：</p>\n<p>父项目中会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>servlet-01<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子项目会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaweb-02-servlet<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.kuang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父项目中的java子项目可以直接使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">son extends father</span><br></pre></td></tr></table></figure></li>\n<li><p>Maven环境优化</p>\n<ol>\n<li>修改web.xml为最新的</li>\n<li>将maven的结构搭建完整</li>\n</ol>\n</li>\n<li><p>编写一个Servlet程序</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567911804700.png\" alt=\"1567911804700\"></p>\n<ol>\n<li><p>编写一个普通类</p>\n</li>\n<li><p>实现Servlet接口，这里我们直接继承HttpServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;        <span class=\"comment\">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(&quot;Hello,Serlvet&quot;);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>编写Servlet的映射</p>\n<p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册Servlet--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure></li>\n<li><p>配置Tomcat</p>\n<p>注意：配置项目发布的路径就可以了</p>\n</li>\n<li><p>启动测试，OK！</p>\n</li>\n</ol>\n<h4 id=\"2-ServletAPI层次结构\"><a href=\"#2-ServletAPI层次结构\" class=\"headerlink\" title=\"2 ServletAPI层次结构\"></a>2 ServletAPI层次结构</h4><p><strong>核心技能部分</strong></p>\n<pre><code> ![222](/img/javaweb/狂神web//clip_image001.png)\n\n   ![Serv et  Servi  Serv IetCmf i g  -se rServIe &#39;Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/img/javaweb/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  \n</code></pre>\n<p><strong>Servlet原理</strong></p>\n<h5 id=\"Servlet接口\"><a href=\"#Servlet接口\" class=\"headerlink\" title=\"Servlet接口\"></a>Servlet接口</h5><ul>\n<li>Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。</li>\n</ul>\n<h5 id=\"ServletConfig接口\"><a href=\"#ServletConfig接口\" class=\"headerlink\" title=\"ServletConfig接口\"></a>ServletConfig接口</h5><ul>\n<li><p>在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。</p>\n</li>\n<li><p><strong>ServletConfig的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String  getInitParameter(String name)</td>\n<td>获取web.xml中名称为name的初始化参数值</td>\n</tr>\n<tr>\n<td>ServletContext  getServletContext()</td>\n<td>返回Servlet上下文对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"GenericServlet类\"><a href=\"#GenericServlet类\" class=\"headerlink\" title=\"GenericServlet类\"></a>GenericServlet类</h5><ul>\n<li><p>抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。</p>\n</li>\n<li><p><strong>GenericServlet类的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void  init(ServletConfig config)</td>\n<td>初始化方法</td>\n</tr>\n<tr>\n<td>String  getInitParameter(String name)</td>\n<td>返回名称为name的初始化参数值</td>\n</tr>\n<tr>\n<td>ServletContext  getServletCotext()</td>\n<td>返回ServletContext对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"HttpServlet类\"><a href=\"#HttpServlet类\" class=\"headerlink\" title=\"HttpServlet类\"></a>HttpServlet类</h5><ul>\n<li><p>抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。</p>\n</li>\n<li><p><strong>HttpServlet类的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void ==service==  (ServletRequest reg, ServletResponse res)</td>\n<td>接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。</td>\n</tr>\n<tr>\n<td>void  ==doGet==(HttpServletRequest reg, HttpServletResponse res)</td>\n<td>处理GET请求</td>\n</tr>\n<tr>\n<td>void  ==doPost==(HttpServletRequest reg, HttpServletResponse res)</td>\n<td>处理POST请求</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：</p>\n<p>(1) 重写doGet方法来处理GET请求。</p>\n<p>(2) 重写doPost方法来处理POST请求。</p>\n<p>(3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。</p>\n<p>(4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。</p>\n</li>\n<li><p><strong>提示：</strong></p>\n<ul>\n<li>HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"HttpServletRequest接口\"><a href=\"#HttpServletRequest接口\" class=\"headerlink\" title=\"HttpServletRequest接口\"></a>HttpServletRequest接口</h5><ul>\n<li><p>HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。</p>\n</li>\n<li><p>容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。</p>\n</li>\n<li><p><strong>HttpServleRequest 接口的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String  ==getParameter==(String name)</td>\n<td>根据页面表单元素名称获取页面提交数据</td>\n</tr>\n<tr>\n<td>string[]  ==getPararneterValues== (String name)</td>\n<td>获取页面有重名表单元素（比如复选框）的值</td>\n</tr>\n<tr>\n<td>void  ==setCharacterEncoding== (String name)</td>\n<td>设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。</td>\n</tr>\n<tr>\n<td>void  ==setAttribute==(String name,Object value)</td>\n<td>设置请求的参数</td>\n</tr>\n<tr>\n<td>==getRequestDispatcher==(String  path)</td>\n<td>返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源</td>\n</tr>\n</tbody></table>\n<h5 id=\"HttpServletResponse接口\"><a href=\"#HttpServletResponse接口\" class=\"headerlink\" title=\"HttpServletResponse接口\"></a>HttpServletResponse接口</h5><ul>\n<li><p>HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。</p>\n</li>\n<li><p>容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。</p>\n</li>\n<li><p>Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。</p>\n</li>\n<li><p><strong>HttpServleRequest 接口的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setContentType(“text/html;charset=utf-8”);</td>\n<td>设置响应的内容类型</td>\n</tr>\n<tr>\n<td>PrintWriter  response.getWriter()</td>\n<td>获得响应的输出流</td>\n</tr>\n<tr>\n<td>response.sendRedirect(redirect)</td>\n<td>重定向到指定的网址</td>\n</tr>\n</tbody></table>\n<h5 id=\"转发与重定向\"><a href=\"#转发与重定向\" class=\"headerlink\" title=\"转发与重定向\"></a>转发与重定向</h5><p><strong>1 转发</strong></p>\n<ul>\n<li><p>转发属于<strong>服务器跳转</strong>。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。</p>\n</li>\n<li><p>整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。</p>\n</li>\n<li><p>而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。</p>\n</li>\n<li><p>转发的作用：在多个页面交互过程中实现请求数据的共享。</p>\n</li>\n<li><p>实现转发分为两个步骤：</p>\n<p>1、 需要先获取RequestDispatcher实例</p>\n<p>dispatcher=request.getRequestDispatcher(“servlet2”);</p>\n<p>2、 调用forward方法</p>\n<p>dispatcher.forward(request, response);</p>\n</li>\n</ul>\n<p><strong>2 重定向</strong></p>\n<ul>\n<li><p>重定向是<strong>客户端跳转</strong>。</p>\n</li>\n<li><p>重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。</p>\n</li>\n<li><p>因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。</p>\n</li>\n<li><p>同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。</p>\n</li>\n<li><p>重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现</p>\n</li>\n</ul>\n<p><strong>3 转发与重定向的区别</strong></p>\n<ul>\n<li><p>转发是继续传递、处理==同一个请求==，在==服务器端==进行；</p>\n<ul>\n<li>重定向在==客户端==运行，会产生==新请求==。</li>\n</ul>\n</li>\n<li><p>转发时浏览器地址栏中显示的是==初次发出请求的地址==；</p>\n<ul>\n<li>重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。</li>\n</ul>\n</li>\n<li><p>转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；</p>\n<ul>\n<li>重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。</li>\n</ul>\n</li>\n<li><p>转发只能转发给==当前web应用==的资源； </p>\n<ul>\n<li>重定可以重定向到==任何==资源。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Servlet应用\"><a href=\"#Servlet应用\" class=\"headerlink\" title=\"Servlet应用\"></a>Servlet应用</h5><p><strong>使用Servlet处理客户端请求</strong> </p>\n<p>前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,</p>\n<p><strong>获得Servlet初始化参数</strong></p>\n<p>通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，</p>\n<p><strong>Servlet访问数据库</strong></p>\n<p>进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。</p>\n<h5 id=\"Servlet的生命周期\"><a href=\"#Servlet的生命周期\" class=\"headerlink\" title=\"==Servlet的生命周期==\"></a>==Servlet的生命周期==</h5><p>Servlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：</p>\n<ol>\n<li>加载</li>\n<li>实例化</li>\n<li>初始化</li>\n<li>服务</li>\n<li>销毁</li>\n</ol>\n<h3 id=\"6-3、Servlet原理\"><a href=\"#6-3、Servlet原理\" class=\"headerlink\" title=\"6.3、Servlet原理\"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567913793252.png\" alt=\"1567913793252\"></p>\n<h3 id=\"6-4、Mapping问题\"><a href=\"#6-4、Mapping问题\" class=\"headerlink\" title=\"6.4、Mapping问题\"></a>6.4、Mapping问题</h3><ol>\n<li><p>一个Servlet可以指定一个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>一个Servlet可以指定多个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello2<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello3<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello4<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello5<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>一个Servlet可以指定通用映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>默认请求路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--默认请求路径--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>指定一些后缀或者前缀等等….</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.qinjiang<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--404--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"6-5、ServletContext\"><a href=\"#6-5、ServletContext\" class=\"headerlink\" title=\"6.5、ServletContext\"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>\n<h4 id=\"1、共享数据\"><a href=\"#1、共享数据\" class=\"headerlink\" title=\"1、共享数据\"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;                <span class=\"comment\">//this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = &quot;秦疆&quot;; //数据        context.setAttribute(&quot;username&quot;,username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        ServletContext context = <span class=\"keyword\">this</span>.getServletContext();        String username = (String) context.getAttribute(<span class=\"string\">&quot;username&quot;</span>);        resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);        resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);        resp.getWriter().print(<span class=\"string\">&quot;名字&quot;</span>+username);    &#125;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/getc<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试访问结果；</p>\n<h4 id=\"2、获取初始化参数\"><a href=\"#2、获取初始化参数\" class=\"headerlink\" title=\"2、获取初始化参数\"></a>2、获取初始化参数</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置一些web应用初始化参数--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class=\"keyword\">this</span>.getServletContext();    String url = context.getInitParameter(<span class=\"string\">&quot;url&quot;</span>);    resp.getWriter().print(url);&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、请求转发\"><a href=\"#3、请求转发\" class=\"headerlink\" title=\"3、请求转发\"></a>3、请求转发</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class=\"keyword\">this</span>.getServletContext();    System.out.println(<span class=\"string\">&quot;进入了ServletDemo04&quot;</span>);    <span class=\"comment\">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(&quot;/gp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/img/javaweb/狂神web/1567924457532.png\" alt=\"1567924457532\" style=\"zoom: 80%;\" />\n\n<h4 id=\"4、读取资源文件\"><a href=\"#4、读取资源文件\" class=\"headerlink\" title=\"4、读取资源文件\"></a>4、读取资源文件</h4><p>Properties</p>\n<ul>\n<li>在java目录下新建properties</li>\n<li>在resources目录下新建properties</li>\n</ul>\n<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p>\n<p>思路：需要一个文件流；</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root12312password=zxczxczxc</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo05</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        InputStream is = <span class=\"keyword\">this</span>.getServletContext().getResourceAsStream(<span class=\"string\">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);        Properties prop = <span class=\"keyword\">new</span> Properties();        prop.load(is);        String user = prop.getProperty(<span class=\"string\">&quot;username&quot;</span>);        String pwd = prop.getProperty(<span class=\"string\">&quot;password&quot;</span>);        resp.getWriter().print(user+<span class=\"string\">&quot;:&quot;</span>+pwd);    &#125;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问测试即可ok；</p>\n<h3 id=\"6-6、HttpServletResponse\"><a href=\"#6-6、HttpServletResponse\" class=\"headerlink\" title=\"6.6、HttpServletResponse\"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>\n<ul>\n<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>\n<li>如果要给客户端响应一些信息：找HttpServletResponse</li>\n</ul>\n<h4 id=\"1、简单分类\"><a href=\"#1、简单分类\" class=\"headerlink\" title=\"1、简单分类\"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ServletOutputStream <span class=\"title\">getOutputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;<span class=\"function\">PrintWriter <span class=\"title\">getWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p>负责向浏览器发送响应头的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterEncoding</span><span class=\"params\">(String var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLength</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLengthLong</span><span class=\"params\">(<span class=\"keyword\">long</span> var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentType</span><span class=\"params\">(String var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String var1, String var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addHeader</span><span class=\"params\">(String var1, String var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>响应的状态码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> SC_CONTINUE = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SWITCHING_PROTOCOLS = <span class=\"number\">101</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_OK = <span class=\"number\">200</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_CREATED = <span class=\"number\">201</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_ACCEPTED = <span class=\"number\">202</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class=\"number\">203</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NO_CONTENT = <span class=\"number\">204</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_RESET_CONTENT = <span class=\"number\">205</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PARTIAL_CONTENT = <span class=\"number\">206</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MULTIPLE_CHOICES = <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MOVED_PERMANENTLY = <span class=\"number\">301</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MOVED_TEMPORARILY = <span class=\"number\">302</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_FOUND = <span class=\"number\">302</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SEE_OTHER = <span class=\"number\">303</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_MODIFIED = <span class=\"number\">304</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_USE_PROXY = <span class=\"number\">305</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_TEMPORARY_REDIRECT = <span class=\"number\">307</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_BAD_REQUEST = <span class=\"number\">400</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_UNAUTHORIZED = <span class=\"number\">401</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PAYMENT_REQUIRED = <span class=\"number\">402</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_FORBIDDEN = <span class=\"number\">403</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_FOUND = <span class=\"number\">404</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_METHOD_NOT_ALLOWED = <span class=\"number\">405</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_ACCEPTABLE = <span class=\"number\">406</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class=\"number\">407</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_TIMEOUT = <span class=\"number\">408</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_CONFLICT = <span class=\"number\">409</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_GONE = <span class=\"number\">410</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_LENGTH_REQUIRED = <span class=\"number\">411</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PRECONDITION_FAILED = <span class=\"number\">412</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class=\"number\">413</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_URI_TOO_LONG = <span class=\"number\">414</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class=\"number\">415</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class=\"number\">416</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_EXPECTATION_FAILED = <span class=\"number\">417</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_INTERNAL_SERVER_ERROR = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_IMPLEMENTED = <span class=\"number\">501</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_BAD_GATEWAY = <span class=\"number\">502</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SERVICE_UNAVAILABLE = <span class=\"number\">503</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_GATEWAY_TIMEOUT = <span class=\"number\">504</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class=\"number\">505</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、下载文件\"><a href=\"#2、下载文件\" class=\"headerlink\" title=\"2、下载文件\"></a>2、下载文件</h4><ol>\n<li>向浏览器输出消息 （一直在讲，就不说了）</li>\n<li>下载文件<ol>\n<li>要获取下载文件的路径</li>\n<li>下载的文件名是啥？</li>\n<li>设置想办法让浏览器能够支持下载我们需要的东西</li>\n<li>获取下载文件的输入流</li>\n<li>创建缓冲区</li>\n<li>获取OutputStream对象</li>\n<li>将FileOutputStream流写入到buffer缓冲区</li>\n<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 要获取下载文件的路径</span></span><br><span class=\"line\">    String realPath = <span class=\"string\">&quot;F:\\\\班级管理\\\\西开【19525】\\\\2、代码\\\\JavaWeb\\\\javaweb-02-servlet\\\\response\\\\target\\\\classes\\\\秦疆.png&quot;</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 下载的文件名是啥？</span></span><br><span class=\"line\">    String fileName = realPath.substring(realPath.lastIndexOf(<span class=\"string\">&quot;\\\\&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class=\"line\">    resp.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 4. 获取下载文件的输入流</span></span><br><span class=\"line\">    FileInputStream in = <span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">    <span class=\"comment\">// 5. 创建缓冲区</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 6. 获取OutputStream对象</span></span><br><span class=\"line\">    ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">    <span class=\"comment\">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((len=in.read(buffer))&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        out.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、验证码功能\"><a href=\"#3、验证码功能\" class=\"headerlink\" title=\"3、验证码功能\"></a>3、验证码功能</h4><p>验证怎么来的？</p>\n<ul>\n<li>前端实现</li>\n<li>后端实现，需要用到 Java 的图片类，生产一个图片</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.servlet;<span class=\"keyword\">import</span> javax.imageio.ImageIO;<span class=\"keyword\">import</span> javax.servlet.ServletException;<span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;<span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;<span class=\"keyword\">import</span> java.awt.*;<span class=\"keyword\">import</span> java.awt.image.BufferedImage;<span class=\"keyword\">import</span> java.io.IOException;<span class=\"keyword\">import</span> java.util.Random;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        <span class=\"comment\">//如何让浏览器3秒自动刷新一次;        resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(&quot;image/jpeg&quot;);        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(&quot;expires&quot;,-1);        resp.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);        resp.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);        //把图片写给浏览器        ImageIO.write(image,&quot;jpg&quot;, resp.getOutputStream());    &#125;    //生成随机数    private String makeNum()&#123;        Random random = new Random();        String num = random.nextInt(9999999) + &quot;&quot;;        StringBuffer sb = new StringBuffer();        for (int i = 0; i &lt; 7-num.length() ; i++) &#123;            sb.append(&quot;0&quot;);        &#125;        num = sb.toString() + num;        return num;    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、实现重定向\"><a href=\"#4、实现重定向\" class=\"headerlink\" title=\"4、实现重定向\"></a>4、实现重定向</h4><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567931587955.png\" alt=\"1567931587955\"></p>\n<p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p>\n<p>常见场景：</p>\n<ul>\n<li>用户登录</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendRedirect</span><span class=\"params\">(String var1)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    <span class=\"comment\">/*        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);        resp.setStatus(302);         */</span>    resp.sendRedirect(<span class=\"string\">&quot;/r/img&quot;</span>);<span class=\"comment\">//重定向&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>面试题：请你聊聊重定向和转发的区别？</p>\n<p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发的时候，url不会产生变化</li>\n<li>重定向时候，url地址栏会发生变化；</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567932163430.png\" alt=\"1567932163430\"></p>\n<h4 id=\"5、简单实现登录重定向\"><a href=\"#5、简单实现登录重定向\" class=\"headerlink\" title=\"5、简单实现登录重定向\"></a>5、简单实现登录重定向</h4><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;&lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;    用户名：&lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt; &lt;br&gt;    密码：&lt;input type=<span class=\"string\">&quot;password&quot;</span> name=<span class=\"string\">&quot;password&quot;</span>&gt; &lt;br&gt;    &lt;input type=<span class=\"string\">&quot;submit&quot;</span>&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        <span class=\"comment\">//处理请求        String username = req.getParameter(&quot;username&quot;);        String password = req.getParameter(&quot;password&quot;);        System.out.println(username+&quot;:&quot;+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(&quot;/r/success.jsp&quot;);    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>requset<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>requset<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/login<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Success&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-7、HttpServletRequest\"><a href=\"#6-7、HttpServletRequest\" class=\"headerlink\" title=\"6.7、HttpServletRequest\"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567933996830.png\" alt=\"1567933996830\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567934023106.png\" alt=\"1567934023106\"></p>\n<h4 id=\"获取参数，请求转发\"><a href=\"#获取参数，请求转发\" class=\"headerlink\" title=\"获取参数，请求转发\"></a>获取参数，请求转发</h4><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567934110794.png\" alt=\"1567934110794\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    req.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);    resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);    String username = req.getParameter(<span class=\"string\">&quot;username&quot;</span>);    String password = req.getParameter(<span class=\"string\">&quot;password&quot;</span>);    String[] hobbys = req.getParameterValues(<span class=\"string\">&quot;hobbys&quot;</span>);    System.out.println(<span class=\"string\">&quot;=============================&quot;</span>);    <span class=\"comment\">//后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(&quot;=============================&quot;);    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(&quot;/success.jsp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p>\n<p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发的时候，url不会产生变化   307</li>\n<li>重定向时候，url地址栏会发生变化； 302</li>\n</ul>\n<h3 id=\"6-8、处理中文乱码\"><a href=\"#6-8、处理中文乱码\" class=\"headerlink\" title=\"6.8、处理中文乱码\"></a>6.8、处理中文乱码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;show.jsp&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;注册&quot;</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>     &lt;%//脚本段   String name = request.getParameter(&quot;name&quot;);    %&gt;        name:&lt;%=name %&gt;   //表达式     This is my JSP page. <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>//处理中文乱码1.   &lt;%   request.setCharacterEncoding(&quot;UTF-8&quot;);   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);   %&gt;2.    &lt;%   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);      name = new String(name.getBytes(&quot;ISO-8859-1&quot;),&quot;utf-8&quot;);    %&gt;        name:&lt;%=name %&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7、Cookie、Session\"><a href=\"#7、Cookie、Session\" class=\"headerlink\" title=\"7、Cookie、Session\"></a>7、Cookie、Session</h2><h3 id=\"7-1、会话\"><a href=\"#7-1、会话\" class=\"headerlink\" title=\"7.1、会话\"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p>\n<p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p>\n<p><strong>你能怎么证明你是西开的学生？</strong></p>\n<p>你              西开</p>\n<ol>\n<li>发票                西开给你发票</li>\n<li>学校登记        西开标记你来过了</li>\n</ol>\n<p><strong>一个网站，怎么证明你来过？</strong></p>\n<p>客户端              服务端</p>\n<ol>\n<li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li>\n<li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li>\n</ol>\n<h3 id=\"7-2、保存会话的两种技术\"><a href=\"#7-2、保存会话的两种技术\" class=\"headerlink\" title=\"7.2、保存会话的两种技术\"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p>\n<ul>\n<li>客户端技术   （响应，请求）</li>\n</ul>\n<p><strong>session</strong></p>\n<ul>\n<li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li>\n</ul>\n<p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p>\n<h3 id=\"7-3、Cookie\"><a href=\"#7-3、Cookie\" class=\"headerlink\" title=\"7.3、Cookie\"></a>7.3、Cookie</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568344447291.png\" alt=\"1568344447291\"></p>\n<ol>\n<li>从请求中拿到cookie信息</li>\n<li>服务器响应给客户端cookie</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie[] cookies = req.getCookies(); <span class=\"comment\">//获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis()+&quot;&quot;); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p>\n<p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p>\n<ul>\n<li>一个Cookie只能保存一个信息；</li>\n<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>\n<li>Cookie大小有限制4kb；</li>\n<li>300个cookie浏览器上限</li>\n</ul>\n<p><strong>删除Cookie；</strong></p>\n<ul>\n<li>不设置有效期，关闭浏览器，自动失效；</li>\n<li>设置有效期时间为 0 ；</li>\n</ul>\n<p><strong>编码解码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URLEncoder.encode(<span class=\"string\">&quot;秦疆&quot;</span>,<span class=\"string\">&quot;utf-8&quot;</span>)URLDecoder.decode(cookie.getValue(),<span class=\"string\">&quot;UTF-8&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-4、Session（重点）\"><a href=\"#7-4、Session（重点）\" class=\"headerlink\" title=\"7.4、Session（重点）\"></a>7.4、Session（重点）</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568344560794.png\" alt=\"1568344560794\"></p>\n<p>什么是Session：</p>\n<ul>\n<li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li>\n<li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li>\n<li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568342773861.png\" alt=\"1568342773861\"></p>\n<p>Session和cookie的区别：</p>\n<ul>\n<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li>\n<li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li>\n<li>Session对象由服务创建；</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>保存一个登录用户的信息；</li>\n<li>购物车信息；</li>\n<li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li>\n</ul>\n<p>使用Session：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.kuang.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionDemo01</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//解决乱码问题</span></span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        resp.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//得到Session</span></span><br><span class=\"line\">        HttpSession session = req.getSession();</span><br><span class=\"line\">        <span class=\"comment\">//给Session中存东西</span></span><br><span class=\"line\">        session.setAttribute(<span class=\"string\">&quot;name&quot;</span>,<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;秦疆&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"comment\">//获取Session的ID</span></span><br><span class=\"line\">        String sessionId = session.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断Session是不是新创建</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session.isNew())&#123;</span><br><span class=\"line\">            resp.getWriter().write(<span class=\"string\">&quot;session创建成功,ID:&quot;</span>+sessionId);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.getWriter().write(<span class=\"string\">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Session创建的时候做了什么事情；</span></span><br><span class=\"line\"><span class=\"comment\">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span></span><br><span class=\"line\"><span class=\"comment\">//        resp.addCookie(cookie);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//得到Session</span></span><br><span class=\"line\">HttpSession session = req.getSession();</span><br><span class=\"line\"></span><br><span class=\"line\">Person person = (Person) session.getAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(person.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">HttpSession session = req.getSession();</span><br><span class=\"line\">session.removeAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//手动注销Session</span></span><br><span class=\"line\">session.invalidate();</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>会话自动过期：web.xml配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--设置Session默认的失效时间--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span>    <span class=\"comment\">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568344679763.png\" alt=\"1568344679763\"></p>\n<h2 id=\"8、JSP\"><a href=\"#8、JSP\" class=\"headerlink\" title=\"8、JSP\"></a>8、JSP</h2><p>==<strong>静态网页&amp;动态网页</strong>==</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>静态网页</strong></th>\n<th><strong>动态网页</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组成</td>\n<td>html+js+css</td>\n<td>jsp+html;asp+html;php+html;</td>\n</tr>\n<tr>\n<td>交互</td>\n<td>不可交互</td>\n<td>可交互</td>\n</tr>\n<tr>\n<td>运行方式</td>\n<td>客户端运行</td>\n<td>服务端生成，客户端运行</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td>无数据库连接</td>\n<td>连接数据库</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-1、什么是JSP\"><a href=\"#8-1、什么是JSP\" class=\"headerlink\" title=\"8.1、什么是JSP\"></a>8.1、什么是JSP</h3><ul>\n<li><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p>\n</li>\n<li><p><a href=\"http://127.0.0.1:8080/login/index.jsp\">http://127.0.0.1:8080/login/index.jsp</a></p>\n</li>\n<li><p>最大的特点：</p>\n<ul>\n<li>写JSP就像在写HTML</li>\n<li>区别：<ul>\n<li>HTML只给用户提供静态的数据</li>\n<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>工作原理</strong></p>\n<ul>\n<li><p>客户端请求</p>\n</li>\n<li><p>把 *.jsp 翻译成 *.java </p>\n</li>\n<li><p>编译为 *.class</p>\n</li>\n<li><p>执行生成servlet</p>\n</li>\n<li><p>反馈结果给客户端显示</p>\n<pre><code>第二次访问 有改动 执行上述过程 \n无改动 直接执行\n</code></pre>\n</li>\n<li><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305097106.png\" alt=\"123\"></p>\n</li>\n<li><img src=\"/img/javaweb/狂神web/clip_image001-1583305111348.png\" alt=\"112\" style=\"zoom:80%;\" /></li>\n<li><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305154041.png\" alt=\"44\"></p>\n</li>\n<li><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305166669.png\" alt=\"54\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-2、JSP原理\"><a href=\"#8-2、JSP原理\" class=\"headerlink\" title=\"8.2、JSP原理\"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p>\n<ul>\n<li><p>代码层面没有任何问题</p>\n</li>\n<li><p>服务器内部工作</p>\n<p>tomcat中有一个work目录；</p>\n<p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568345873736.png\" alt=\"1568345873736\"></p>\n<p>我电脑的地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\.IntelliJIdea2018<span class=\"number\">.1</span>\\system\\tomcat\\Unnamed_javaweb-session-cookie\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp</span><br></pre></td></tr></table></figure>\n\n<p>发现页面转变成了Java程序！</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568345948307.png\" alt=\"1568345948307\"></p>\n</li>\n</ul>\n<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p>\n<p>JSP最终也会被转换成为一个Java类！</p>\n<p><strong>JSP 本质上就是一个Servlet</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化  public void _jspInit() &#123;        &#125;//销毁  public void _jspDestroy() &#123;  &#125;//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      </span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>判断请求</p>\n</li>\n<li><p>内置一些对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> javax.servlet.jsp.PageContext pageContext;  <span class=\"comment\">//页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应</span></span><br></pre></td></tr></table></figure></li>\n<li><p>输出页面前增加的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);       <span class=\"comment\">//设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p>\n</li>\n</ol>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568347078207.png\" alt=\"1568347078207\"></p>\n<p>在JSP页面中；</p>\n<p>只要是 JAVA代码就会原封不动的输出；</p>\n<p>如果是HTML代码，就会被转换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out.write(<span class=\"string\">&quot;&lt;html&gt;\\r\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样的格式，输出到前端！</p>\n<h3 id=\"8-3、JSP基础语法\"><a href=\"#8-3、JSP基础语法\" class=\"headerlink\" title=\"8.3、JSP基础语法\"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p>\n<h4 id=\"JSP-的组成-JSP页面的构成\"><a href=\"#JSP-的组成-JSP页面的构成\" class=\"headerlink\" title=\"JSP 的组成 JSP页面的构成\"></a>JSP 的组成 <a href=\"https://www.cnblogs.com/yangyquin/p/5430231.html\"><strong>JSP页面的构成</strong></a></h4> <img src=\"/img/javaweb/狂神web/clip_image001-1583305406375.png\" alt=\"54\" style=\"zoom:50%;\" />\n\n<p><strong>==1 静态页面==</strong></p>\n<h5 id=\"2-指令\"><a href=\"#2-指令\" class=\"headerlink\" title=\"==2 指令==\"></a>==2 指令==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ %&gt;<span class=\"comment\">&lt;!--page--&gt;</span>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;  contentType=&quot;text/html; charset=UTF-8&quot; isErrorPage=&quot;true&quot;%&gt;<span class=\"comment\">&lt;!--include--&gt;</span>&lt;%@ include file=&quot;foot.html&quot; %&gt;   静态引入/静态包含&lt;%@ include file=&quot;foot.jsp&quot; %&gt;使用jsp要删除&lt;% String path = request.getContextPath( );   String basePath = request.getScheme( )+&quot;://&quot;+request %&gt;<span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span>   动态引入/动态包含<span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.jsp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span> (可使用html/jsp)    <span class=\"comment\">&lt;!--taglib--&gt;</span>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;     <span class=\"comment\">&lt;!--======================================================================--&gt;</span>    &lt;%@page args.... %&gt;&lt;%@include file=&quot;&quot;%&gt;&lt;%--@include会将两个页面合二为一--%&gt;&lt;%@include file=&quot;common/header.jsp&quot;%&gt;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网页主体<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&lt;%@include file=&quot;common/footer.jsp&quot;%&gt;<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>&lt;%--jSP标签    jsp:include：拼接页面，本质还是三个    --%&gt;<span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;/common/header.jsp&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网页主体<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;/common/footer.jsp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-声明\"><a href=\"#3-声明\" class=\"headerlink\" title=\"==3 声明==\"></a>==3 声明==</h5><ul>\n<li>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在JSP页面中定义变量,方法或类  &lt;%!  %&gt;&lt;%!  String s = &quot;这是一个声明&quot; ;    public  int  add(int x,int y )&#123;         return x+y;     &#125; %&gt;=========================================&lt;%!static &#123;  System.out.println(&quot;Loading Servlet!&quot;);&#125;private int globalVar = 0;public void kuang()&#123;  System.out.println(&quot;进入了方法Kuang！&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-表达式\"><a href=\"#4-表达式\" class=\"headerlink\" title=\"==4 表达式==\"></a>==4 表达式==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= 变量或表达式%&gt; basePath:&lt;%=basePath%&gt;<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>当前时间： <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>    &lt;%= new Date() %&gt;<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>================================&lt;%--JSP表达式作用：用来将程序的输出，输出到客户端&lt;%= 变量或者表达式%&gt;--%&gt;&lt;%= new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-脚本段-（小脚本-代码块）\"><a href=\"#5-脚本段-（小脚本-代码块）\" class=\"headerlink\" title=\"==5 脚本段==（小脚本/代码块）\"></a>==5 脚本段==（小脚本/代码块）</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在JSP页面中执行的Java代码 语法： &lt;% Java代码 %&gt;&lt;%  System.out.println(&quot;这是一个代码块&quot;);%&gt;================================================== &lt;%--jsp脚本片段--%&gt;&lt;%int sum = 0;for (int i = 1; i &lt;=100 ; i++) &#123;  sum+=i;&#125;out.println(&quot;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Sum=&quot;+sum+&quot;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&quot;);%&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--脚本片段的再实现--&gt;</span>&lt;%int x = 10;out.println(x);%&gt;<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个JSP文档<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&lt;%int y = 2;out.println(y);%&gt;<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>&lt;%--在代码嵌入HTML元素--%&gt;&lt;%for (int i = 0; i &lt; 5; i++) &#123;%&gt;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello,World  &lt;%=i%&gt; <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-标准动作\"><a href=\"#6-标准动作\" class=\"headerlink\" title=\"==6 标准动作==\"></a>==6 标准动作==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span>   动态引入/动态包含<span class=\"tag\">&lt;<span class=\"name\">jsp:forward</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;encoding.jsp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:forward</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-注释\"><a href=\"#7-注释\" class=\"headerlink\" title=\"==7 注释==\"></a>==7 注释==</h5><ul>\n<li>JSP的注释，不会在客户端显示，HTML就会！</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- This is my JSP page. &lt;br&gt; --&gt;</span>&lt;%--  &lt;% System.out.println(&quot;这是一个代码块&quot;);%&gt;--%&gt;//System.out.println(&quot;这是一个代码块&quot;); /* System.out.println(&quot;这是一个代码块1&quot;); */</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-4、9大内置对象\"><a href=\"#8-4、9大内置对象\" class=\"headerlink\" title=\"8.4、9大内置对象\"></a>8.4、9大内置对象</h3><ul>\n<li>PageContext    存东西</li>\n<li>Request     存东西</li>\n<li>Response</li>\n<li>Session      存东西</li>\n<li>Application   【SerlvetContext】   存东西</li>\n<li>config    【SerlvetConfig】</li>\n<li>out</li>\n<li>page ，不用了解</li>\n<li>exception</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageContext.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;秦疆1号&quot;</span>); <span class=\"comment\">//保存的数据只在一个页面中有效request.setAttribute(&quot;name2&quot;,&quot;秦疆2号&quot;); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(&quot;name3&quot;,&quot;秦疆3号&quot;); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(&quot;name4&quot;,&quot;秦疆4号&quot;);  //保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>\n\n<p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p>\n<p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p>\n<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p>\n<h3 id=\"8-5、JSP标签、JSTL标签、EL表达式\"><a href=\"#8-5、JSP标签、JSTL标签、EL表达式\" class=\"headerlink\" title=\"8.5、JSP标签、JSTL标签、EL表达式\"></a>8.5、JSP标签、JSTL标签、EL表达式</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- JSTL表达式的依赖 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span><span class=\"comment\">&lt;!-- standard标签库 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>EL表达式：  ${ }</p>\n<ul>\n<li><strong>获取数据</strong></li>\n<li><strong>执行运算</strong></li>\n<li><strong>获取web开发的常用对象</strong></li>\n</ul>\n<p><strong>JSP标签</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--jsp:include--%&gt;&lt;%--http:<span class=\"comment\">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12--%&gt;&lt;jsp:forward page=&quot;/jsptag2.jsp&quot;&gt;    &lt;jsp:param name=&quot;name&quot; value=&quot;kuangshen&quot;&gt;&lt;/jsp:param&gt;    &lt;jsp:param name=&quot;age&quot; value=&quot;12&quot;&gt;&lt;/jsp:param&gt;&lt;/jsp:forward&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>JSTL表达式</strong></p>\n<p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>\n<p><strong>格式化标签</strong></p>\n<p><strong>SQL标签</strong></p>\n<p><strong>XML 标签</strong></p>\n<p><strong>核心标签</strong> （掌握部分）</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568362473764.png\" alt=\"1568362473764\"></p>\n<p><strong>JSTL标签库使用步骤</strong></p>\n<ul>\n<li>引入对应的 taglib</li>\n<li>使用其中的方法</li>\n<li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li>\n</ul>\n<p>c：if</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h4&gt;<span class=\"keyword\">if</span>测试&lt;/h4&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;coreif.jsp&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;</span><br><span class=\"line\">    &lt;%--</span><br><span class=\"line\">    EL表达式获取表单中的数据</span><br><span class=\"line\">    $&#123;param.参数名&#125;</span><br><span class=\"line\">    --%&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;登录&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class=\"keyword\">var</span>=<span class=\"string\">&quot;isAdmin&quot;</span>&gt;</span><br><span class=\"line\">    &lt;c:out value=<span class=\"string\">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%--自闭合标签--%&gt;</span><br><span class=\"line\">&lt;c:out value=<span class=\"string\">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>c:choose   c:when</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;&lt;%--定义一个变量score，值为<span class=\"number\">85</span>--%&gt;&lt;c:set <span class=\"keyword\">var</span>=<span class=\"string\">&quot;score&quot;</span> value=<span class=\"string\">&quot;55&quot;</span>/&gt;&lt;c:choose&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;        你的成绩为优秀    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;        你的成绩为一般    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;        你的成绩为良好    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;        你的成绩为不及格    &lt;/c:when&gt;&lt;/c:choose&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>c:forEach</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%    ArrayList&lt;String&gt; people = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();    people.add(<span class=\"number\">0</span>,<span class=\"string\">&quot;张三&quot;</span>);    people.add(<span class=\"number\">1</span>,<span class=\"string\">&quot;李四&quot;</span>);    people.add(<span class=\"number\">2</span>,<span class=\"string\">&quot;王五&quot;</span>);    people.add(<span class=\"number\">3</span>,<span class=\"string\">&quot;赵六&quot;</span>);    people.add(<span class=\"number\">4</span>,<span class=\"string\">&quot;田六&quot;</span>);    request.setAttribute(<span class=\"string\">&quot;list&quot;</span>,people);%&gt;&lt;%--<span class=\"keyword\">var</span> , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%&gt;&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;people&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span>&gt;    &lt;c:out value=<span class=\"string\">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;&lt;hr&gt;&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;people&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span> begin=<span class=\"string\">&quot;1&quot;</span> end=<span class=\"string\">&quot;3&quot;</span> step=<span class=\"string\">&quot;1&quot;</span> &gt;    &lt;c:out value=<span class=\"string\">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、JavaBean\"><a href=\"#9、JavaBean\" class=\"headerlink\" title=\"9、JavaBean\"></a>9、JavaBean</h2><p>实体类</p>\n<p>JavaBean有特定的写法：</p>\n<ul>\n<li>必须要有一个无参构造</li>\n<li>属性必须私有化</li>\n<li>必须有对应的get/set方法；</li>\n</ul>\n<p>一般用来和数据库的字段做映射  ORM；</p>\n<p>ORM ：对象关系映射</p>\n<ul>\n<li>表—&gt;类</li>\n<li>字段–&gt;属性</li>\n<li>行记录—-&gt;对象</li>\n</ul>\n<p><strong>people表</strong></p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>秦疆1号</td>\n<td>3</td>\n<td>西安</td>\n</tr>\n<tr>\n<td>2</td>\n<td>秦疆2号</td>\n<td>18</td>\n<td>西安</td>\n</tr>\n<tr>\n<td>3</td>\n<td>秦疆3号</td>\n<td>100</td>\n<td>西安</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;    <span class=\"keyword\">private</span> String name;    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;    <span class=\"keyword\">private</span> String address;&#125;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;    <span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,<span class=\"string\">&quot;秦疆1号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);    <span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,<span class=\"string\">&quot;秦疆2号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);    <span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,<span class=\"string\">&quot;秦疆3号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>过滤器</li>\n<li>文件上传</li>\n<li>邮件发送</li>\n<li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li>\n</ul>\n<h2 id=\"10、MVC三层架构\"><a href=\"#10、MVC三层架构\" class=\"headerlink\" title=\"10、MVC三层架构\"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p>\n<h3 id=\"10-1、早些年\"><a href=\"#10-1、早些年\" class=\"headerlink\" title=\"10.1、早些年\"></a>10.1、早些年</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568423664332.png\" alt=\"1568423664332\"></p>\n<p>用户直接访问控制层，控制层就可以直接操作数据库；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">servlet--CRUD--&gt;数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2、MVC三层架构\"><a href=\"#10-2、MVC三层架构\" class=\"headerlink\" title=\"10.2、MVC三层架构\"></a>10.2、MVC三层架构</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568424227281.png\" alt=\"1568424227281\"></p>\n<p>Model</p>\n<ul>\n<li>业务处理 ：业务逻辑（Service）</li>\n<li>数据持久层：CRUD   （Dao）</li>\n</ul>\n<p>View</p>\n<ul>\n<li>展示数据</li>\n<li>提供链接发起Servlet请求 （a，form，img…）</li>\n</ul>\n<p>Controller  （Servlet）</p>\n<ul>\n<li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p>\n</li>\n<li><p>交给业务层处理对应的代码 </p>\n</li>\n<li><p>控制视图的跳转  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"11、Filter-（重点）\"><a href=\"#11、Filter-（重点）\" class=\"headerlink\" title=\"11、Filter （重点）\"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p>\n<ul>\n<li>处理中文乱码</li>\n<li>登录验证….</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568424858708.png\" alt=\"1568424858708\"></p>\n<p>Filter开发步骤：</p>\n<ol>\n<li><p>导包</p>\n</li>\n<li><p>编写过滤器</p>\n<ol>\n<li><p>导包不要错</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568425162525.png\" alt=\"1568425162525\"></p>\n<p>实现Filter接口，重写对应的方法即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;    <span class=\"comment\">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException &#123;        System.out.println(&quot;CharacterEncodingFilter初始化&quot;);    &#125;    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;        request.setCharacterEncoding(&quot;utf-8&quot;);        response.setCharacterEncoding(&quot;utf-8&quot;);        response.setContentType(&quot;text/html;charset=UTF-8&quot;);        System.out.println(&quot;CharacterEncodingFilter执行前....&quot;);        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(&quot;CharacterEncodingFilter执行后....&quot;);    &#125;    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() &#123;        System.out.println(&quot;CharacterEncodingFilter销毁&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>在web.xml中配置 Filter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>    <span class=\"comment\">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/servlet/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"comment\">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"12、监听器\"><a href=\"#12、监听器\" class=\"headerlink\" title=\"12、监听器\"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p>\n<ol>\n<li><p>编写一个监听器</p>\n<p>实现监听器的接口…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener &#123;    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(1);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(0);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>web.xml中注册监听器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册监听器--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>看情况是否使用！</p>\n</li>\n</ol>\n<h2 id=\"13、过滤器、监听器常见应用\"><a href=\"#13、过滤器、监听器常见应用\" class=\"headerlink\" title=\"13、过滤器、监听器常见应用\"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPanel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Frame frame = <span class=\"keyword\">new</span> Frame(<span class=\"string\">&quot;中秋节快乐&quot;</span>);  <span class=\"comment\">//新建一个窗体</span></span><br><span class=\"line\">        Panel panel = <span class=\"keyword\">new</span> Panel(<span class=\"keyword\">null</span>); <span class=\"comment\">//面板</span></span><br><span class=\"line\">        frame.setLayout(<span class=\"keyword\">null</span>); <span class=\"comment\">//设置窗体的布局</span></span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setBounds(<span class=\"number\">300</span>,<span class=\"number\">300</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        frame.setBackground(<span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>)); <span class=\"comment\">//设置背景颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        panel.setBounds(<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        panel.setBackground(<span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>)); <span class=\"comment\">//设置背景颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(panel);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//监听事件，监听关闭事件</span></span><br><span class=\"line\">        frame.addWindowListener(<span class=\"keyword\">new</span> WindowAdapter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">windowClosing</span><span class=\"params\">(WindowEvent e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.windowClosing(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>\n<ol>\n<li><p>用户登录之后，向Sesison中放入用户的数据</p>\n</li>\n<li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    response.sendRedirect(<span class=\"string\">&quot;/error.jsp&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"14、JDBC\"><a href=\"#14、JDBC\" class=\"headerlink\" title=\"14、JDBC\"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568439601825.png\" alt=\"1568439601825\"></p>\n<p>需要jar包的支持：</p>\n<ul>\n<li>java.sql</li>\n<li>javax.sql</li>\n<li>mysql-conneter-java…  连接驱动（必须要导入）</li>\n</ul>\n<p><strong>实验环境搭建</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users(    id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,    `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),    `password` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),    email <span class=\"type\">VARCHAR</span>(<span class=\"number\">60</span>),    birthday <span class=\"type\">DATE</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;zs@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ls@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;王五&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ww@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">SELECT</span>\t<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>导入数据库依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--mysql的驱动--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>IDEA中连接数据库：</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568440926845.png\" alt=\"1568440926845\"></p>\n<p><strong>JDBC 固定步骤：</strong></p>\n<ol>\n<li>加载驱动</li>\n<li>连接数据库,代表数据库</li>\n<li>向数据库发送SQL的对象Statement : CRUD</li>\n<li>编写SQL （根据业务，不同的SQL）</li>\n<li>执行SQL</li>\n<li>关闭连接</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJdbc</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;        <span class=\"comment\">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = &quot;select * from users&quot;;        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next())&#123;            System.out.println(&quot;id=&quot;+rs.getObject(&quot;id&quot;));            System.out.println(&quot;name=&quot;+rs.getObject(&quot;name&quot;));            System.out.println(&quot;password=&quot;+rs.getObject(&quot;password&quot;));            System.out.println(&quot;email=&quot;+rs.getObject(&quot;email&quot;));            System.out.println(&quot;birthday=&quot;+rs.getObject(&quot;birthday&quot;));        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>预编译SQL</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJDBC2</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;        <span class=\"comment\">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = &quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;;        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,&quot;狂神说Java&quot;);//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,&quot;123456&quot;);//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,&quot;24736743@qq.com&quot;);//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i&gt;0)&#123;            System.out.println(&quot;插入成功@&quot;);        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>事务</strong></p>\n<p>要么都成功，要么都失败！</p>\n<p>ACID原则：保证数据的安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:<span class=\"number\">1000</span>    A(<span class=\"number\">900</span>)   --<span class=\"number\">100</span>--&gt;   B(<span class=\"number\">1100</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Junit单元测试</strong></p>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--单元测试--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>简单使用</p>\n<p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568442261610.png\" alt=\"1568442261610\"></p>\n<p>失败的时候是红色：</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568442289597.png\" alt=\"1568442289597\"></p>\n<p><strong>搭建一个环境</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> account(</span><br><span class=\"line\">   id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class=\"line\">   `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),</span><br><span class=\"line\">   money <span class=\"type\">FLOAT</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置信息</span></span><br><span class=\"line\">    <span class=\"comment\">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class=\"line\">    String url=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class=\"line\">    String username = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">    String password = <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.加载驱动</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.连接数据库,代表数据库</span></span><br><span class=\"line\">         connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.通知数据库开启事务,false 开启</span></span><br><span class=\"line\">        connection.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String sql = <span class=\"string\">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class=\"line\">        connection.prepareStatement(sql).executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//制造错误</span></span><br><span class=\"line\">        <span class=\"comment\">//int i = 1/0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String sql2 = <span class=\"string\">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">        connection.prepareStatement(sql2).executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        connection.commit();<span class=\"comment\">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果出现异常，就通知数据库回滚事务</span></span><br><span class=\"line\">            connection.rollback();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e1) &#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}},"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><h3 id=\"1-1、前言\"><a href=\"#1-1、前言\" class=\"headerlink\" title=\"1.1、前言\"></a>1.1、前言</h3><p>web开发：</p>\n<ul>\n<li>web，网页的意思  ， <a href=\"http://www.baidu.com/\">www.baidu.com</a></li>\n<li>静态web<ul>\n<li>html，css</li>\n<li>提供给所有人看的数据始终不会发生变化！</li>\n</ul>\n</li>\n<li>动态web<ul>\n<li>淘宝，几乎是所有的网站；</li>\n<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li>\n<li>技术栈：Servlet/JSP，ASP，PHP</li>\n</ul>\n</li>\n</ul>\n<p>在Java中，动态web资源开发的技术统称为JavaWeb；</p>\n<h3 id=\"1-2、web应用程序\"><a href=\"#1-2、web应用程序\" class=\"headerlink\" title=\"1.2、web应用程序\"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>\n<ul>\n<li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li>\n<li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li>\n<li>URL </li>\n<li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>\n<li>一个web应用由多部分组成 （静态web，动态web）<ul>\n<li>html，css，js</li>\n<li>jsp，servlet</li>\n<li>Java程序</li>\n<li>jar包</li>\n<li>配置文件 （Properties）</li>\n</ul>\n</li>\n</ul>\n<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p>\n<h4 id=\"Web应用程序概述\"><a href=\"#Web应用程序概述\" class=\"headerlink\" title=\"Web应用程序概述\"></a>Web应用程序概述</h4><ul>\n<li><p>Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。</p>\n</li>\n<li><p>一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。</p>\n</li>\n</ul>\n<h4 id=\"应用程序模式\"><a href=\"#应用程序模式\" class=\"headerlink\" title=\"应用程序模式\"></a>应用程序模式</h4><ul>\n<li><p>应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。</p>\n<img src=\"/img/javaweb/狂神web/clip_image001.jpg\" alt=\"12\" style=\"zoom:80%;\" />\n\n<img src=\"/img/javaweb/狂神web/clip_image001-1583293770740.jpg\" alt=\"11\" style=\"zoom:67%;\" /></li>\n</ul>\n<h5 id=\"1，C-S架构\"><a href=\"#1，C-S架构\" class=\"headerlink\" title=\"1，C/S架构\"></a>1，C/S架构</h5><ul>\n<li>C/S是Client/Server的缩写。</li>\n<li>Server即服务器，通常采用高性能的PC或工作站，</li>\n<li>Client即客户端，需要在客户电脑上安装专用的客户端软件。</li>\n<li>例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。</li>\n</ul>\n<h5 id=\"2，B-S架构\"><a href=\"#2，B-S架构\" class=\"headerlink\" title=\"2，B/S架构\"></a>2，B/S架构</h5><ul>\n<li><p>B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。</p>\n</li>\n<li><p>在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。</p>\n</li>\n<li><p>例如京东、淘宝、12306等都是B/S架构。</p>\n</li>\n<li><p>WEB应用程序一般是B/S模式。</p>\n</li>\n<li><p>B/S优点：</p>\n<ul>\n<li><p>耦合度小，利于分工协作，提高开发效率</p>\n</li>\n<li><p>具有良好的可扩展性和可维护性</p>\n</li>\n<li><p>升级成本小</p>\n</li>\n<li><p>简化了客户端电脑载荷</p>\n</li>\n<li><p>减轻了系统维护与升级的成本和工作量</p>\n</li>\n<li><p>降低了用户的总体成本</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3、静态web\"><a href=\"#1-3、静态web\" class=\"headerlink\" title=\"1.3、静态web\"></a>1.3、静态web</h3><ul>\n<li><code>*.htm, *.html</code>,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567822802516.png\" alt=\"1567822802516\"></p>\n<ul>\n<li>静态web存在的缺点<ul>\n<li>Web页面无法动态更新，所有用户看到都是同一个页面<ul>\n<li>轮播图，点击特效：伪动态</li>\n<li>JavaScript [实际开发中，它用的最多]</li>\n<li>VBScript</li>\n</ul>\n</li>\n<li>它无法和数据库交互（数据无法持久化，用户无法交互）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4、动态web\"><a href=\"#1-4、动态web\" class=\"headerlink\" title=\"1.4、动态web\"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567823191289.png\" alt=\"1567823191289\"></p>\n<p>缺点：</p>\n<ul>\n<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul>\n<li>停机维护</li>\n</ul>\n</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>Web页面可以动态更新，所有用户看到都不是同一个页面</li>\n<li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567823350584.png\" alt=\"1567823350584\"></p>\n<h4 id=\"静态网页与动态网页\"><a href=\"#静态网页与动态网页\" class=\"headerlink\" title=\"静态网页与动态网页\"></a>静态网页与动态网页</h4><ul>\n<li><p>静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。</p>\n</li>\n<li><p>动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。</p>\n</li>\n</ul>\n<h3 id=\"1-5、访问Web资源\"><a href=\"#1-5、访问Web资源\" class=\"headerlink\" title=\"1.5、访问Web资源\"></a>1.5、访问Web资源</h3><h4 id=\"什么是URL\"><a href=\"#什么是URL\" class=\"headerlink\" title=\"什么是URL\"></a>什么是URL</h4><ul>\n<li>URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。</li>\n<li>统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。</li>\n<li>简单地说，URL就是Web地址，俗称“网址”。</li>\n</ul>\n<h5 id=\"URL的组成\"><a href=\"#URL的组成\" class=\"headerlink\" title=\"URL的组成\"></a>URL的组成</h5><ul>\n<li><p>URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。</p>\n</li>\n<li><p>以这样一个URL:<a href=\"http://localhost:8080/FirstWeb/index.jsp%E4%B8%BA%E4%BE%8B%E6%9D%A5%E5%88%86%E6%9E%90URL%E7%9A%84%E7%BB%84%E6%88%90%E3%80%82\">http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。</a></p>\n</li>\n</ul>\n<ol>\n<li><p>==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。</p>\n</li>\n<li><p>==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。</p>\n</li>\n<li><p>==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。</p>\n</li>\n<li><p>==路径==： 路径（包括请求的资源）由零个或多个 “/“ 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。</p>\n</li>\n</ol>\n<ul>\n<li>==URL的组成:==<ul>\n<li>协议</li>\n<li>主机（包括端口号）</li>\n<li>路径</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、web服务器\"><a href=\"#2、web服务器\" class=\"headerlink\" title=\"2、web服务器\"></a>2、web服务器</h2><ul>\n<li>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</li>\n<li>下面介绍几种常用的WEB服务器。<ul>\n<li>==WebLogic==<ul>\n<li>BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。</li>\n<li>BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，</li>\n<li>它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。</li>\n</ul>\n</li>\n<li>==Apache==<ul>\n<li>Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。</li>\n<li>世界上很多著名的网站都是Apache的产物，</li>\n<li>它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。</li>\n</ul>\n</li>\n<li>==Tomcat==<ul>\n<li>Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。</li>\n<li>它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。</li>\n<li>Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。</li>\n</ul>\n</li>\n<li>==Jboss==<ul>\n<li>是一个基于==J2EE==的==开放源代码==的应用服务器。</li>\n<li>JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。</li>\n<li>JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。</li>\n<li>但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1、技术讲解\"><a href=\"#2-1、技术讲解\" class=\"headerlink\" title=\"2.1、技术讲解\"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p>\n<ul>\n<li><p>微软：国内最早流行的就是ASP；</p>\n</li>\n<li><p>在HTML中嵌入了VB的脚本，  ASP + COM；</p>\n</li>\n<li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p>\n</li>\n<li><p>维护成本高！</p>\n</li>\n<li><p>C# </p>\n</li>\n<li><p>IIS</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            &lt;%</span><br><span class=\"line\">            System.out.println(&quot;hello&quot;)</span><br><span class=\"line\">            %&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>php：</strong></p>\n<ul>\n<li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li>\n<li>无法承载大访问量的情况（局限性）</li>\n</ul>\n<p>**JSP/Servlet : ** </p>\n<p>B/S：浏览和服务器</p>\n<p>C/S:  客户端和服务器</p>\n<ul>\n<li>sun公司主推的B/S架构</li>\n<li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li>\n<li>可以承载三高问题带来的影响；</li>\n<li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li>\n</ul>\n<h3 id=\"2-2、web服务器\"><a href=\"#2-2、web服务器\" class=\"headerlink\" title=\"2.2、web服务器\"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p>\n<p><strong>==IIS==</strong></p>\n<p>微软的； ASP…,Windows中自带的</p>\n<p>==<strong>Tomcat</strong>==</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567824446428.png\" alt=\"1567824446428\"></p>\n<p>面向百度编程；</p>\n<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>\n<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href=\"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8\">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p>\n<p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p>\n<p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p>\n<p>下载tomcat：</p>\n<ol>\n<li>安装 or  解压</li>\n<li>了解配置文件及目录结构</li>\n<li>这个东西的作用</li>\n</ol>\n<h2 id=\"3、Tomcat\"><a href=\"#3、Tomcat\" class=\"headerlink\" title=\"3、Tomcat\"></a>3、Tomcat</h2><h3 id=\"3-1、-安装tomcat\"><a href=\"#3-1、-安装tomcat\" class=\"headerlink\" title=\"3.1、 安装tomcat\"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href=\"http://tomcat.apache.org/\">http://tomcat.apache.org/</a></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825600842.png\" alt=\"1567825600842\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825627138.png\" alt=\"1567825627138\"></p>\n<h3 id=\"3-2、Tomcat启动和配置\"><a href=\"#3-2、Tomcat启动和配置\" class=\"headerlink\" title=\"3.2、Tomcat启动和配置\"></a>3.2、Tomcat启动和配置</h3><h4 id=\"Tomcat目录作用描述\"><a href=\"#Tomcat目录作用描述\" class=\"headerlink\" title=\"Tomcat目录作用描述\"></a>Tomcat目录作用描述</h4><table>\n<thead>\n<tr>\n<th><strong>目录</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==<strong>bin</strong>==</td>\n<td>存放各平台下用于启动和停止Tomcat的脚本文件</td>\n</tr>\n<tr>\n<td>==<strong>conf</strong>==</td>\n<td>存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml</td>\n</tr>\n<tr>\n<td>==<strong>lib</strong>==</td>\n<td>存放tomcat服务器所需的jar文件</td>\n</tr>\n<tr>\n<td>==<strong>webapps</strong>==</td>\n<td>Web应用的发布目录</td>\n</tr>\n<tr>\n<td>==<strong>work</strong>==</td>\n<td>Jsp运行时生成的Servlet文件</td>\n</tr>\n<tr>\n<td>==<strong>logs</strong>==</td>\n<td>存放tomcat的日志文件</td>\n</tr>\n<tr>\n<td>==<strong>temp</strong>==</td>\n<td>Tomcat运行时存放临时文件</td>\n</tr>\n</tbody></table>\n<p>文件夹作用：</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825763180.png\" alt=\"1567825763180\"></p>\n<p><strong>启动。关闭Tomcat</strong></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825840657.png\" alt=\"1567825840657\"></p>\n<p>访问测试：<a href=\"http://localhost:8080/\">http://localhost:8080/</a></p>\n<p>可能遇到的问题：</p>\n<ol>\n<li>Java环境变量没有配置</li>\n<li>闪退问题：需要配置兼容性</li>\n<li>乱码问题：配置文件中设置</li>\n</ol>\n<h3 id=\"3-3、配置\"><a href=\"#3-3、配置\" class=\"headerlink\" title=\"3.3、配置\"></a>3.3、配置</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567825967256.png\" alt=\"1567825967256\"></p>\n<p>可以配置启动的端口号</p>\n<ul>\n<li>tomcat的默认端口号为：8080</li>\n<li>mysql：3306</li>\n<li>http：80</li>\n<li>https：443</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8081&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">&quot;20000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">redirectPort</span>=<span class=\"string\">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以配置主机的名称</p>\n<ul>\n<li>默认的主机名为：localhost-&gt;127.0.0.1</li>\n<li>默认网站应用存放的位置为：webapps</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;www.qinjiang.com&quot;</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">&quot;webapps&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">unpackWARs</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高难度面试题\"><a href=\"#高难度面试题\" class=\"headerlink\" title=\"高难度面试题\"></a>高难度面试题</h4><p>请你谈谈网站是如何进行访问的！</p>\n<ol>\n<li><p>输入一个域名；回车</p>\n</li>\n<li><p>检查本机的 C:\\Windows\\System32\\drivers\\etc\\hosts配置文件下有没有这个域名映射；</p>\n<ol>\n<li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>       www.qinjiang.com</span><br></pre></td></tr></table></figure></li>\n<li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p>\n</li>\n</ol>\n<img src=\"/img/javaweb/狂神web/1567827057913.png\" alt=\"1567827057913\" style=\"zoom: 67%;\" /></li>\n<li><p>可以配置一下环境变量（可选性）</p>\n</li>\n</ol>\n<h3 id=\"3-4、发布一个web网站\"><a href=\"#3-4、发布一个web网站\" class=\"headerlink\" title=\"3.4、发布一个web网站\"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p>\n<ul>\n<li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li>\n</ul>\n<p>网站应该有的结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--webapps ：Tomcat服务器的web目录</span><br><span class=\"line\">\t-ROOT</span><br><span class=\"line\">\t-kuangstudy ：网站的目录名</span><br><span class=\"line\">\t\t- WEB-INF</span><br><span class=\"line\">\t\t\t-classes : java程序</span><br><span class=\"line\">\t\t\t-lib：web应用所依赖的jar包</span><br><span class=\"line\">\t\t\t-web.xml ：网站配置文件</span><br><span class=\"line\">\t\t- index.html 默认的首页</span><br><span class=\"line\">\t\t- <span class=\"keyword\">static</span> </span><br><span class=\"line\">            -css</span><br><span class=\"line\">            \t-style.css</span><br><span class=\"line\">            -js</span><br><span class=\"line\">            -img</span><br><span class=\"line\">         -.....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>HTTP协议 ： 面试</p>\n<p>Maven：构建工具</p>\n<ul>\n<li>Maven安装包</li>\n</ul>\n<p>Servlet 入门</p>\n<ul>\n<li>HelloWorld！</li>\n<li>Servlet配置</li>\n<li>原理</li>\n</ul>\n<h2 id=\"4、Http\"><a href=\"#4、Http\" class=\"headerlink\" title=\"4、Http\"></a>4、Http</h2><h3 id=\"4-1、什么是HTTP\"><a href=\"#4-1、什么是HTTP\" class=\"headerlink\" title=\"4.1、什么是HTTP\"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>\n<ul>\n<li>文本：html，字符串，~ ….</li>\n<li>超文本：图片，音乐，视频，定位，地图…….</li>\n<li>80</li>\n</ul>\n<p>Https：安全的</p>\n<ul>\n<li>443</li>\n</ul>\n<h3 id=\"4-2、两个时代\"><a href=\"#4-2、两个时代\" class=\"headerlink\" title=\"4.2、两个时代\"></a>4.2、两个时代</h3><ul>\n<li><p>http1.0</p>\n<ul>\n<li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li>\n<li>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</li>\n</ul>\n</li>\n<li><p>http2.0</p>\n<ul>\n<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li>\n</ul>\n</li>\n<li><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n</li>\n</ul>\n<h3 id=\"4-3、Http请求\"><a href=\"#4-3、Http请求\" class=\"headerlink\" title=\"4.3、Http请求\"></a>4.3、Http请求</h3><h5 id=\"HTTP请求方式\"><a href=\"#HTTP请求方式\" class=\"headerlink\" title=\"HTTP请求方式\"></a>HTTP请求方式</h5><ul>\n<li><p>HTTP请求是指从客户端到服务器端的请求消息。</p>\n</li>\n<li><p>包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。</p>\n</li>\n<li><p>根据HTTP标准，HTTP请求可以使用多种请求方法。 </p>\n</li>\n<li><p>==客户端—发请求（Request）—服务器==</p>\n</li>\n</ul>\n<p>百度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL:https:<span class=\"comment\">//www.baidu.com/   请求地址</span></span><br><span class=\"line\">Request Method:GET    get方法/post方法</span><br><span class=\"line\">Status Code:<span class=\"number\">200</span> OK    状态码：<span class=\"number\">200</span></span><br><span class=\"line\">Remote（远程） Address:<span class=\"number\">14.215</span><span class=\"number\">.177</span><span class=\"number\">.39</span>:<span class=\"number\">443</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:text/html  </span><br><span class=\"line\">Accept-Encoding:gzip, deflate, br</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=<span class=\"number\">0.9</span>    语言</span><br><span class=\"line\">Cache-Control:max-age=<span class=\"number\">0</span></span><br><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、请求行\"><a href=\"#1、请求行\" class=\"headerlink\" title=\"1、请求行\"></a>1、请求行</h4><ul>\n<li><p>请求行中的请求方式：GET</p>\n</li>\n<li><p>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…</p>\n<ul>\n<li><p>get：</p>\n<ul>\n<li>请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==</li>\n<li>GET是最简单的HTTP方法，</li>\n<li>其主要任务就是要求服务器获得一个资源并把资源发回来，</li>\n<li>请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。</li>\n<li>GET请求网址<a href=\"http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20\">http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20</a></li>\n<li>GET 请求可被缓存</li>\n<li>GET 请求有长度限制</li>\n</ul>\n</li>\n<li><p>post：</p>\n<ul>\n<li>请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==</li>\n<li>POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，</li>\n<li>请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，</li>\n<li>浏览器的地址栏中不显示参数信息。</li>\n<li>POST请求网址 <a href=\"http://localhost:8080/FirstWeb/test\">http://localhost:8080/FirstWeb/test </a></li>\n<li>POST 请求不会被缓存</li>\n<li>POST 请求对数据长度没有要求</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、消息头\"><a href=\"#2、消息头\" class=\"headerlink\" title=\"2、消息头\"></a>2、消息头</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept：告诉浏览器，它所支持的数据类型</span><br><span class=\"line\">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class=\"number\">8</span>   GB2312  ISO8859-<span class=\"number\">1</span></span><br><span class=\"line\">Accept-Language：告诉浏览器，它的语言环境</span><br><span class=\"line\">Cache-Control：缓存控制</span><br><span class=\"line\">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class=\"line\">HOST：主机..../.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4、Http响应\"><a href=\"#4-4、Http响应\" class=\"headerlink\" title=\"4.4、Http响应\"></a>4.4、Http响应</h3><ul>\n<li>服务器—响应—–客户端</li>\n</ul>\n<p>百度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:<span class=\"keyword\">private</span>    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-响应体\"><a href=\"#1-响应体\" class=\"headerlink\" title=\"1.响应体\"></a>1.响应体</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class=\"number\">8</span>   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-响应状态码\"><a href=\"#2-响应状态码\" class=\"headerlink\" title=\"2.响应状态码\"></a>2.响应状态码</h4><p>200：请求响应成功  200</p>\n<p>3xx：请求重定向 </p>\n<ul>\n<li>重定向：你重新到我给你新位置去；</li>\n</ul>\n<p>4xx：找不到资源   404</p>\n<ul>\n<li>资源不存在；</li>\n</ul>\n<p>5xx：服务器代码错误   500       502:网关错误</p>\n<h4 id=\"常见面试题\"><a href=\"#常见面试题\" class=\"headerlink\" title=\"常见面试题\"></a>常见面试题</h4><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>\n<h2 id=\"5、Maven\"><a href=\"#5、Maven\" class=\"headerlink\" title=\"5、Maven\"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p>\n<ol>\n<li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p>\n</li>\n<li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p>\n<p>由此，Maven诞生了！</p>\n</li>\n</ol>\n<h3 id=\"5-1-Maven项目架构管理工具\"><a href=\"#5-1-Maven项目架构管理工具\" class=\"headerlink\" title=\"5.1 Maven项目架构管理工具\"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p>\n<p>Maven的核心思想：<strong>约定大于配置</strong></p>\n<ul>\n<li>有约束，不要去违反。</li>\n</ul>\n<p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p>\n<h3 id=\"5-2-下载安装Maven\"><a href=\"#5-2-下载安装Maven\" class=\"headerlink\" title=\"5.2 下载安装Maven\"></a>5.2 下载安装Maven</h3><p>官网;<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567842350606.png\" alt=\"1567842350606\"></p>\n<p>下载完成后，解压即可；</p>\n<p>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p>\n<h3 id=\"5-3-配置环境变量\"><a href=\"#5-3-配置环境变量\" class=\"headerlink\" title=\"5.3 配置环境变量\"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p>\n<p>配置如下配置：</p>\n<ul>\n<li>M2_HOME     maven目录下的bin目录</li>\n<li>MAVEN_HOME      maven的目录</li>\n<li>在系统的path中配置  %MAVEN_HOME%\\bin</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567842882993.png\" alt=\"1567842882993\"></p>\n<p>测试Maven是否安装成功，保证必须配置完毕！</p>\n<h3 id=\"5-4-阿里云镜像\"><a href=\"#5-4-阿里云镜像\" class=\"headerlink\" title=\"5.4 阿里云镜像\"></a>5.4 阿里云镜像</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844609399.png\" alt=\"1567844609399\"></p>\n<ul>\n<li>镜像：mirrors<ul>\n<li>作用：加速我们的下载</li>\n</ul>\n</li>\n<li>国内建议使用阿里云的镜像</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5-本地仓库\"><a href=\"#5-5-本地仓库\" class=\"headerlink\" title=\"5.5 本地仓库\"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p>\n<p><strong>建立一个本地仓库：</strong>localRepository</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\Environment\\apache-maven-3.6.2\\maven-repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-6、在IDEA中使用Maven\"><a href=\"#5-6、在IDEA中使用Maven\" class=\"headerlink\" title=\"5.6、在IDEA中使用Maven\"></a>5.6、在IDEA中使用Maven</h3><ol>\n<li><p>启动IDEA</p>\n</li>\n<li><p>创建一个MavenWeb项目</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844785602.png\" alt=\"1567844785602\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844841172.png\" alt=\"1567844841172\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844917185.png\" alt=\"1567844917185\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567844956177.png\" alt=\"1567844956177\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845029864.png\" alt=\"1567845029864\"></p>\n</li>\n<li><p>等待项目初始化完毕</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845105970.png\" alt=\"1567845105970\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845137978.png\" alt=\"1567845137978\"></p>\n</li>\n<li><p>观察maven仓库中多了什么东西？</p>\n</li>\n<li><p>IDEA中的Maven设置</p>\n<p>注意：IDEA项目创建成功后，看一眼Maven的配置</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845341956.png\" alt=\"1567845341956\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845413672.png\" alt=\"1567845413672\"></p>\n</li>\n<li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p>\n</li>\n</ol>\n<h3 id=\"5-7、创建一个普通的Maven项目\"><a href=\"#5-7、创建一个普通的Maven项目\" class=\"headerlink\" title=\"5.7、创建一个普通的Maven项目\"></a>5.7、创建一个普通的Maven项目</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845557744.png\" alt=\"1567845557744\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845717377.png\" alt=\"1567845717377\"></p>\n<p>这个只有在Web应用下才会有！</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845782034.png\" alt=\"1567845782034\"></p>\n<h3 id=\"5-8-标记文件夹功能\"><a href=\"#5-8-标记文件夹功能\" class=\"headerlink\" title=\"5.8 标记文件夹功能\"></a>5.8 标记文件夹功能</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845910728.png\" alt=\"1567845910728\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567845957139.png\" alt=\"1567845957139\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846034906.png\" alt=\"1567846034906\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846073511.png\" alt=\"1567846073511\"></p>\n<h3 id=\"5-9-在-IDEA中配置Tomcat\"><a href=\"#5-9-在-IDEA中配置Tomcat\" class=\"headerlink\" title=\"5.9 在 IDEA中配置Tomcat\"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846140348.png\" alt=\"1567846140348\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846179573.png\" alt=\"1567846179573\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846234175.png\" alt=\"1567846234175\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846369751.png\" alt=\"1567846369751\"></p>\n<p>解决警告问题</p>\n<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846421963.png\" alt=\"1567846421963\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846546465.png\" alt=\"1567846546465\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846559111.png\" alt=\"1567846559111\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846640372.png\" alt=\"1567846640372\"></p>\n<h3 id=\"5-10-pom文件\"><a href=\"#5-10-pom文件\" class=\"headerlink\" title=\"5.10 pom文件\"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567846784849.png\" alt=\"1567846784849\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.kuang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--Package：项目的打包方式</span></span><br><span class=\"line\"><span class=\"comment\">  jar：java应用</span></span><br><span class=\"line\"><span class=\"comment\">  war：JavaWeb应用</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--配置--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--编码版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目依赖--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目构建用的东西--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span><span class=\"comment\">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-clean-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-install-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567847410771.png\" alt=\"1567847410771\"></p>\n<p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-12-IDEA操作\"><a href=\"#5-12-IDEA操作\" class=\"headerlink\" title=\"5.12 IDEA操作\"></a>5.12 IDEA操作</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567847630808.png\" alt=\"1567847630808\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567847662429.png\" alt=\"1567847662429\"></p>\n<h3 id=\"5-13-解决遇到的问题\"><a href=\"#5-13-解决遇到的问题\" class=\"headerlink\" title=\"5.13 解决遇到的问题\"></a>5.13 解决遇到的问题</h3><ol>\n<li><p>Maven 3.6.2</p>\n<p>解决方法：降级为3.6.1</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567904721301.png\" alt=\"1567904721301\"></p>\n</li>\n<li><p>Tomcat闪退</p>\n</li>\n<li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905247201.png\" alt=\"1567905247201\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905291002.png\" alt=\"1567905291002\"></p>\n</li>\n<li><p>Maven项目中Tomcat无法配置</p>\n</li>\n<li><p>maven默认web项目中的web.xml版本问题</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905537026.png\" alt=\"1567905537026\"></p>\n</li>\n<li><p>替换为webapp4.0版本和tomcat一致</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span>         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>         <span class=\"attr\">metadata-complete</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Maven仓库的使用</p>\n<p>地址：<a href=\"https://mvnrepository.com/\">https://mvnrepository.com/</a></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905870750.png\" alt=\"1567905870750\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567905982979.png\" alt=\"1567905982979\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567906017448.png\" alt=\"1567906017448\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567906039469.png\" alt=\"1567906039469\"></p>\n</li>\n</ol>\n<h2 id=\"6、Servlet\"><a href=\"#6、Servlet\" class=\"headerlink\" title=\"6、Servlet\"></a>6、Servlet</h2><h3 id=\"6-1、Servlet简介\"><a href=\"#6-1、Servlet简介\" class=\"headerlink\" title=\"6.1、Servlet简介\"></a>6.1、Servlet简介</h3><ul>\n<li><p>Servlet就是sun公司开发动态web的一门技术</p>\n</li>\n<li><p>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：</p>\n<ul>\n<li>编写一个类，实现Servlet接口</li>\n<li>把开发好的Java类部署到web服务器中。</li>\n</ul>\n</li>\n<li><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"6-2、HelloServlet\"><a href=\"#6-2、HelloServlet\" class=\"headerlink\" title=\"6.2、HelloServlet\"></a>6.2、HelloServlet</h3><h4 id=\"1-Servlet入门\"><a href=\"#1-Servlet入门\" class=\"headerlink\" title=\"1 Servlet入门\"></a>1 Servlet入门</h4><ul>\n<li><p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。</p>\n</li>\n<li><p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。</p>\n</li>\n<li><p>Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>\n</li>\n<li><p>这个==过程==为：</p>\n<p>1、客户端发送请求至服务器端；</p>\n<p>2、服务器将请求信息发送至 Servlet；</p>\n<p>3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；</p>\n<p>4、服务器将响应返回给客户端。</p>\n</li>\n<li><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p>\n</li>\n<li><p>配置web.xml</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注册一个Servlet --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet标识名 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet类的全限定名 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.aaa.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span><span class=\"comment\">&lt;!-- 配置Servlet映射信息 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet标识名和上面一致 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   <span class=\"comment\">&lt;!-- 访问路径 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p>\n</li>\n<li><p>关于Maven父子工程的理解：</p>\n<p>父项目中会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>servlet-01<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子项目会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaweb-02-servlet<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.kuang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父项目中的java子项目可以直接使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">son extends father</span><br></pre></td></tr></table></figure></li>\n<li><p>Maven环境优化</p>\n<ol>\n<li>修改web.xml为最新的</li>\n<li>将maven的结构搭建完整</li>\n</ol>\n</li>\n<li><p>编写一个Servlet程序</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567911804700.png\" alt=\"1567911804700\"></p>\n<ol>\n<li><p>编写一个普通类</p>\n</li>\n<li><p>实现Servlet接口，这里我们直接继承HttpServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;        <span class=\"comment\">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(&quot;Hello,Serlvet&quot;);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>编写Servlet的映射</p>\n<p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册Servlet--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure></li>\n<li><p>配置Tomcat</p>\n<p>注意：配置项目发布的路径就可以了</p>\n</li>\n<li><p>启动测试，OK！</p>\n</li>\n</ol>\n<h4 id=\"2-ServletAPI层次结构\"><a href=\"#2-ServletAPI层次结构\" class=\"headerlink\" title=\"2 ServletAPI层次结构\"></a>2 ServletAPI层次结构</h4><p><strong>核心技能部分</strong></p>\n<pre><code> ![222](/img/javaweb/狂神web//clip_image001.png)\n\n   ![Serv et  Servi  Serv IetCmf i g  -se rServIe &#39;Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/img/javaweb/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  \n</code></pre>\n<p><strong>Servlet原理</strong></p>\n<h5 id=\"Servlet接口\"><a href=\"#Servlet接口\" class=\"headerlink\" title=\"Servlet接口\"></a>Servlet接口</h5><ul>\n<li>Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。</li>\n</ul>\n<h5 id=\"ServletConfig接口\"><a href=\"#ServletConfig接口\" class=\"headerlink\" title=\"ServletConfig接口\"></a>ServletConfig接口</h5><ul>\n<li><p>在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。</p>\n</li>\n<li><p><strong>ServletConfig的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String  getInitParameter(String name)</td>\n<td>获取web.xml中名称为name的初始化参数值</td>\n</tr>\n<tr>\n<td>ServletContext  getServletContext()</td>\n<td>返回Servlet上下文对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"GenericServlet类\"><a href=\"#GenericServlet类\" class=\"headerlink\" title=\"GenericServlet类\"></a>GenericServlet类</h5><ul>\n<li><p>抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。</p>\n</li>\n<li><p><strong>GenericServlet类的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void  init(ServletConfig config)</td>\n<td>初始化方法</td>\n</tr>\n<tr>\n<td>String  getInitParameter(String name)</td>\n<td>返回名称为name的初始化参数值</td>\n</tr>\n<tr>\n<td>ServletContext  getServletCotext()</td>\n<td>返回ServletContext对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"HttpServlet类\"><a href=\"#HttpServlet类\" class=\"headerlink\" title=\"HttpServlet类\"></a>HttpServlet类</h5><ul>\n<li><p>抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。</p>\n</li>\n<li><p><strong>HttpServlet类的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void ==service==  (ServletRequest reg, ServletResponse res)</td>\n<td>接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。</td>\n</tr>\n<tr>\n<td>void  ==doGet==(HttpServletRequest reg, HttpServletResponse res)</td>\n<td>处理GET请求</td>\n</tr>\n<tr>\n<td>void  ==doPost==(HttpServletRequest reg, HttpServletResponse res)</td>\n<td>处理POST请求</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：</p>\n<p>(1) 重写doGet方法来处理GET请求。</p>\n<p>(2) 重写doPost方法来处理POST请求。</p>\n<p>(3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。</p>\n<p>(4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。</p>\n</li>\n<li><p><strong>提示：</strong></p>\n<ul>\n<li>HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"HttpServletRequest接口\"><a href=\"#HttpServletRequest接口\" class=\"headerlink\" title=\"HttpServletRequest接口\"></a>HttpServletRequest接口</h5><ul>\n<li><p>HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。</p>\n</li>\n<li><p>容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。</p>\n</li>\n<li><p><strong>HttpServleRequest 接口的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String  ==getParameter==(String name)</td>\n<td>根据页面表单元素名称获取页面提交数据</td>\n</tr>\n<tr>\n<td>string[]  ==getPararneterValues== (String name)</td>\n<td>获取页面有重名表单元素（比如复选框）的值</td>\n</tr>\n<tr>\n<td>void  ==setCharacterEncoding== (String name)</td>\n<td>设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。</td>\n</tr>\n<tr>\n<td>void  ==setAttribute==(String name,Object value)</td>\n<td>设置请求的参数</td>\n</tr>\n<tr>\n<td>==getRequestDispatcher==(String  path)</td>\n<td>返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源</td>\n</tr>\n</tbody></table>\n<h5 id=\"HttpServletResponse接口\"><a href=\"#HttpServletResponse接口\" class=\"headerlink\" title=\"HttpServletResponse接口\"></a>HttpServletResponse接口</h5><ul>\n<li><p>HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。</p>\n</li>\n<li><p>容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。</p>\n</li>\n<li><p>Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。</p>\n</li>\n<li><p><strong>HttpServleRequest 接口的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setContentType(“text/html;charset=utf-8”);</td>\n<td>设置响应的内容类型</td>\n</tr>\n<tr>\n<td>PrintWriter  response.getWriter()</td>\n<td>获得响应的输出流</td>\n</tr>\n<tr>\n<td>response.sendRedirect(redirect)</td>\n<td>重定向到指定的网址</td>\n</tr>\n</tbody></table>\n<h5 id=\"转发与重定向\"><a href=\"#转发与重定向\" class=\"headerlink\" title=\"转发与重定向\"></a>转发与重定向</h5><p><strong>1 转发</strong></p>\n<ul>\n<li><p>转发属于<strong>服务器跳转</strong>。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。</p>\n</li>\n<li><p>整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。</p>\n</li>\n<li><p>而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。</p>\n</li>\n<li><p>转发的作用：在多个页面交互过程中实现请求数据的共享。</p>\n</li>\n<li><p>实现转发分为两个步骤：</p>\n<p>1、 需要先获取RequestDispatcher实例</p>\n<p>dispatcher=request.getRequestDispatcher(“servlet2”);</p>\n<p>2、 调用forward方法</p>\n<p>dispatcher.forward(request, response);</p>\n</li>\n</ul>\n<p><strong>2 重定向</strong></p>\n<ul>\n<li><p>重定向是<strong>客户端跳转</strong>。</p>\n</li>\n<li><p>重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。</p>\n</li>\n<li><p>因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。</p>\n</li>\n<li><p>同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。</p>\n</li>\n<li><p>重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现</p>\n</li>\n</ul>\n<p><strong>3 转发与重定向的区别</strong></p>\n<ul>\n<li><p>转发是继续传递、处理==同一个请求==，在==服务器端==进行；</p>\n<ul>\n<li>重定向在==客户端==运行，会产生==新请求==。</li>\n</ul>\n</li>\n<li><p>转发时浏览器地址栏中显示的是==初次发出请求的地址==；</p>\n<ul>\n<li>重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。</li>\n</ul>\n</li>\n<li><p>转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；</p>\n<ul>\n<li>重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。</li>\n</ul>\n</li>\n<li><p>转发只能转发给==当前web应用==的资源； </p>\n<ul>\n<li>重定可以重定向到==任何==资源。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Servlet应用\"><a href=\"#Servlet应用\" class=\"headerlink\" title=\"Servlet应用\"></a>Servlet应用</h5><p><strong>使用Servlet处理客户端请求</strong> </p>\n<p>前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,</p>\n<p><strong>获得Servlet初始化参数</strong></p>\n<p>通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，</p>\n<p><strong>Servlet访问数据库</strong></p>\n<p>进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。</p>\n<h5 id=\"Servlet的生命周期\"><a href=\"#Servlet的生命周期\" class=\"headerlink\" title=\"==Servlet的生命周期==\"></a>==Servlet的生命周期==</h5><p>Servlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：</p>\n<ol>\n<li>加载</li>\n<li>实例化</li>\n<li>初始化</li>\n<li>服务</li>\n<li>销毁</li>\n</ol>\n<h3 id=\"6-3、Servlet原理\"><a href=\"#6-3、Servlet原理\" class=\"headerlink\" title=\"6.3、Servlet原理\"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567913793252.png\" alt=\"1567913793252\"></p>\n<h3 id=\"6-4、Mapping问题\"><a href=\"#6-4、Mapping问题\" class=\"headerlink\" title=\"6.4、Mapping问题\"></a>6.4、Mapping问题</h3><ol>\n<li><p>一个Servlet可以指定一个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>一个Servlet可以指定多个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello2<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello3<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello4<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello5<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>一个Servlet可以指定通用映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>默认请求路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--默认请求路径--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>指定一些后缀或者前缀等等….</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.qinjiang<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--404--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"6-5、ServletContext\"><a href=\"#6-5、ServletContext\" class=\"headerlink\" title=\"6.5、ServletContext\"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>\n<h4 id=\"1、共享数据\"><a href=\"#1、共享数据\" class=\"headerlink\" title=\"1、共享数据\"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;                <span class=\"comment\">//this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = &quot;秦疆&quot;; //数据        context.setAttribute(&quot;username&quot;,username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        ServletContext context = <span class=\"keyword\">this</span>.getServletContext();        String username = (String) context.getAttribute(<span class=\"string\">&quot;username&quot;</span>);        resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);        resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);        resp.getWriter().print(<span class=\"string\">&quot;名字&quot;</span>+username);    &#125;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/getc<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试访问结果；</p>\n<h4 id=\"2、获取初始化参数\"><a href=\"#2、获取初始化参数\" class=\"headerlink\" title=\"2、获取初始化参数\"></a>2、获取初始化参数</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置一些web应用初始化参数--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class=\"keyword\">this</span>.getServletContext();    String url = context.getInitParameter(<span class=\"string\">&quot;url&quot;</span>);    resp.getWriter().print(url);&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、请求转发\"><a href=\"#3、请求转发\" class=\"headerlink\" title=\"3、请求转发\"></a>3、请求转发</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class=\"keyword\">this</span>.getServletContext();    System.out.println(<span class=\"string\">&quot;进入了ServletDemo04&quot;</span>);    <span class=\"comment\">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(&quot;/gp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/img/javaweb/狂神web/1567924457532.png\" alt=\"1567924457532\" style=\"zoom: 80%;\" />\n\n<h4 id=\"4、读取资源文件\"><a href=\"#4、读取资源文件\" class=\"headerlink\" title=\"4、读取资源文件\"></a>4、读取资源文件</h4><p>Properties</p>\n<ul>\n<li>在java目录下新建properties</li>\n<li>在resources目录下新建properties</li>\n</ul>\n<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p>\n<p>思路：需要一个文件流；</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root12312password=zxczxczxc</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo05</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        InputStream is = <span class=\"keyword\">this</span>.getServletContext().getResourceAsStream(<span class=\"string\">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);        Properties prop = <span class=\"keyword\">new</span> Properties();        prop.load(is);        String user = prop.getProperty(<span class=\"string\">&quot;username&quot;</span>);        String pwd = prop.getProperty(<span class=\"string\">&quot;password&quot;</span>);        resp.getWriter().print(user+<span class=\"string\">&quot;:&quot;</span>+pwd);    &#125;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问测试即可ok；</p>\n<h3 id=\"6-6、HttpServletResponse\"><a href=\"#6-6、HttpServletResponse\" class=\"headerlink\" title=\"6.6、HttpServletResponse\"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>\n<ul>\n<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>\n<li>如果要给客户端响应一些信息：找HttpServletResponse</li>\n</ul>\n<h4 id=\"1、简单分类\"><a href=\"#1、简单分类\" class=\"headerlink\" title=\"1、简单分类\"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ServletOutputStream <span class=\"title\">getOutputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;<span class=\"function\">PrintWriter <span class=\"title\">getWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p>负责向浏览器发送响应头的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterEncoding</span><span class=\"params\">(String var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLength</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLengthLong</span><span class=\"params\">(<span class=\"keyword\">long</span> var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentType</span><span class=\"params\">(String var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String var1, String var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addHeader</span><span class=\"params\">(String var1, String var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>响应的状态码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> SC_CONTINUE = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SWITCHING_PROTOCOLS = <span class=\"number\">101</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_OK = <span class=\"number\">200</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_CREATED = <span class=\"number\">201</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_ACCEPTED = <span class=\"number\">202</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class=\"number\">203</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NO_CONTENT = <span class=\"number\">204</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_RESET_CONTENT = <span class=\"number\">205</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PARTIAL_CONTENT = <span class=\"number\">206</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MULTIPLE_CHOICES = <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MOVED_PERMANENTLY = <span class=\"number\">301</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MOVED_TEMPORARILY = <span class=\"number\">302</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_FOUND = <span class=\"number\">302</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SEE_OTHER = <span class=\"number\">303</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_MODIFIED = <span class=\"number\">304</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_USE_PROXY = <span class=\"number\">305</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_TEMPORARY_REDIRECT = <span class=\"number\">307</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_BAD_REQUEST = <span class=\"number\">400</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_UNAUTHORIZED = <span class=\"number\">401</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PAYMENT_REQUIRED = <span class=\"number\">402</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_FORBIDDEN = <span class=\"number\">403</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_FOUND = <span class=\"number\">404</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_METHOD_NOT_ALLOWED = <span class=\"number\">405</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_ACCEPTABLE = <span class=\"number\">406</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class=\"number\">407</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_TIMEOUT = <span class=\"number\">408</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_CONFLICT = <span class=\"number\">409</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_GONE = <span class=\"number\">410</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_LENGTH_REQUIRED = <span class=\"number\">411</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PRECONDITION_FAILED = <span class=\"number\">412</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class=\"number\">413</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_URI_TOO_LONG = <span class=\"number\">414</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class=\"number\">415</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class=\"number\">416</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_EXPECTATION_FAILED = <span class=\"number\">417</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_INTERNAL_SERVER_ERROR = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_IMPLEMENTED = <span class=\"number\">501</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_BAD_GATEWAY = <span class=\"number\">502</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SERVICE_UNAVAILABLE = <span class=\"number\">503</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_GATEWAY_TIMEOUT = <span class=\"number\">504</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class=\"number\">505</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、下载文件\"><a href=\"#2、下载文件\" class=\"headerlink\" title=\"2、下载文件\"></a>2、下载文件</h4><ol>\n<li>向浏览器输出消息 （一直在讲，就不说了）</li>\n<li>下载文件<ol>\n<li>要获取下载文件的路径</li>\n<li>下载的文件名是啥？</li>\n<li>设置想办法让浏览器能够支持下载我们需要的东西</li>\n<li>获取下载文件的输入流</li>\n<li>创建缓冲区</li>\n<li>获取OutputStream对象</li>\n<li>将FileOutputStream流写入到buffer缓冲区</li>\n<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 要获取下载文件的路径</span></span><br><span class=\"line\">    String realPath = <span class=\"string\">&quot;F:\\\\班级管理\\\\西开【19525】\\\\2、代码\\\\JavaWeb\\\\javaweb-02-servlet\\\\response\\\\target\\\\classes\\\\秦疆.png&quot;</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 下载的文件名是啥？</span></span><br><span class=\"line\">    String fileName = realPath.substring(realPath.lastIndexOf(<span class=\"string\">&quot;\\\\&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class=\"line\">    resp.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 4. 获取下载文件的输入流</span></span><br><span class=\"line\">    FileInputStream in = <span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">    <span class=\"comment\">// 5. 创建缓冲区</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 6. 获取OutputStream对象</span></span><br><span class=\"line\">    ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">    <span class=\"comment\">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((len=in.read(buffer))&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        out.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、验证码功能\"><a href=\"#3、验证码功能\" class=\"headerlink\" title=\"3、验证码功能\"></a>3、验证码功能</h4><p>验证怎么来的？</p>\n<ul>\n<li>前端实现</li>\n<li>后端实现，需要用到 Java 的图片类，生产一个图片</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.servlet;<span class=\"keyword\">import</span> javax.imageio.ImageIO;<span class=\"keyword\">import</span> javax.servlet.ServletException;<span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;<span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;<span class=\"keyword\">import</span> java.awt.*;<span class=\"keyword\">import</span> java.awt.image.BufferedImage;<span class=\"keyword\">import</span> java.io.IOException;<span class=\"keyword\">import</span> java.util.Random;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        <span class=\"comment\">//如何让浏览器3秒自动刷新一次;        resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(&quot;image/jpeg&quot;);        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(&quot;expires&quot;,-1);        resp.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);        resp.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);        //把图片写给浏览器        ImageIO.write(image,&quot;jpg&quot;, resp.getOutputStream());    &#125;    //生成随机数    private String makeNum()&#123;        Random random = new Random();        String num = random.nextInt(9999999) + &quot;&quot;;        StringBuffer sb = new StringBuffer();        for (int i = 0; i &lt; 7-num.length() ; i++) &#123;            sb.append(&quot;0&quot;);        &#125;        num = sb.toString() + num;        return num;    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、实现重定向\"><a href=\"#4、实现重定向\" class=\"headerlink\" title=\"4、实现重定向\"></a>4、实现重定向</h4><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567931587955.png\" alt=\"1567931587955\"></p>\n<p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p>\n<p>常见场景：</p>\n<ul>\n<li>用户登录</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendRedirect</span><span class=\"params\">(String var1)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    <span class=\"comment\">/*        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);        resp.setStatus(302);         */</span>    resp.sendRedirect(<span class=\"string\">&quot;/r/img&quot;</span>);<span class=\"comment\">//重定向&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>面试题：请你聊聊重定向和转发的区别？</p>\n<p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发的时候，url不会产生变化</li>\n<li>重定向时候，url地址栏会发生变化；</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567932163430.png\" alt=\"1567932163430\"></p>\n<h4 id=\"5、简单实现登录重定向\"><a href=\"#5、简单实现登录重定向\" class=\"headerlink\" title=\"5、简单实现登录重定向\"></a>5、简单实现登录重定向</h4><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;&lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;    用户名：&lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt; &lt;br&gt;    密码：&lt;input type=<span class=\"string\">&quot;password&quot;</span> name=<span class=\"string\">&quot;password&quot;</span>&gt; &lt;br&gt;    &lt;input type=<span class=\"string\">&quot;submit&quot;</span>&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        <span class=\"comment\">//处理请求        String username = req.getParameter(&quot;username&quot;);        String password = req.getParameter(&quot;password&quot;);        System.out.println(username+&quot;:&quot;+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(&quot;/r/success.jsp&quot;);    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>requset<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>requset<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/login<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Success&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-7、HttpServletRequest\"><a href=\"#6-7、HttpServletRequest\" class=\"headerlink\" title=\"6.7、HttpServletRequest\"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567933996830.png\" alt=\"1567933996830\"></p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567934023106.png\" alt=\"1567934023106\"></p>\n<h4 id=\"获取参数，请求转发\"><a href=\"#获取参数，请求转发\" class=\"headerlink\" title=\"获取参数，请求转发\"></a>获取参数，请求转发</h4><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1567934110794.png\" alt=\"1567934110794\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    req.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);    resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);    String username = req.getParameter(<span class=\"string\">&quot;username&quot;</span>);    String password = req.getParameter(<span class=\"string\">&quot;password&quot;</span>);    String[] hobbys = req.getParameterValues(<span class=\"string\">&quot;hobbys&quot;</span>);    System.out.println(<span class=\"string\">&quot;=============================&quot;</span>);    <span class=\"comment\">//后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(&quot;=============================&quot;);    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(&quot;/success.jsp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p>\n<p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发的时候，url不会产生变化   307</li>\n<li>重定向时候，url地址栏会发生变化； 302</li>\n</ul>\n<h3 id=\"6-8、处理中文乱码\"><a href=\"#6-8、处理中文乱码\" class=\"headerlink\" title=\"6.8、处理中文乱码\"></a>6.8、处理中文乱码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;show.jsp&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;注册&quot;</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>     &lt;%//脚本段   String name = request.getParameter(&quot;name&quot;);    %&gt;        name:&lt;%=name %&gt;   //表达式     This is my JSP page. <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>//处理中文乱码1.   &lt;%   request.setCharacterEncoding(&quot;UTF-8&quot;);   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);   %&gt;2.    &lt;%   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);      name = new String(name.getBytes(&quot;ISO-8859-1&quot;),&quot;utf-8&quot;);    %&gt;        name:&lt;%=name %&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7、Cookie、Session\"><a href=\"#7、Cookie、Session\" class=\"headerlink\" title=\"7、Cookie、Session\"></a>7、Cookie、Session</h2><h3 id=\"7-1、会话\"><a href=\"#7-1、会话\" class=\"headerlink\" title=\"7.1、会话\"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p>\n<p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p>\n<p><strong>你能怎么证明你是西开的学生？</strong></p>\n<p>你              西开</p>\n<ol>\n<li>发票                西开给你发票</li>\n<li>学校登记        西开标记你来过了</li>\n</ol>\n<p><strong>一个网站，怎么证明你来过？</strong></p>\n<p>客户端              服务端</p>\n<ol>\n<li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li>\n<li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li>\n</ol>\n<h3 id=\"7-2、保存会话的两种技术\"><a href=\"#7-2、保存会话的两种技术\" class=\"headerlink\" title=\"7.2、保存会话的两种技术\"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p>\n<ul>\n<li>客户端技术   （响应，请求）</li>\n</ul>\n<p><strong>session</strong></p>\n<ul>\n<li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li>\n</ul>\n<p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p>\n<h3 id=\"7-3、Cookie\"><a href=\"#7-3、Cookie\" class=\"headerlink\" title=\"7.3、Cookie\"></a>7.3、Cookie</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568344447291.png\" alt=\"1568344447291\"></p>\n<ol>\n<li>从请求中拿到cookie信息</li>\n<li>服务器响应给客户端cookie</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie[] cookies = req.getCookies(); <span class=\"comment\">//获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis()+&quot;&quot;); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p>\n<p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p>\n<ul>\n<li>一个Cookie只能保存一个信息；</li>\n<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>\n<li>Cookie大小有限制4kb；</li>\n<li>300个cookie浏览器上限</li>\n</ul>\n<p><strong>删除Cookie；</strong></p>\n<ul>\n<li>不设置有效期，关闭浏览器，自动失效；</li>\n<li>设置有效期时间为 0 ；</li>\n</ul>\n<p><strong>编码解码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URLEncoder.encode(<span class=\"string\">&quot;秦疆&quot;</span>,<span class=\"string\">&quot;utf-8&quot;</span>)URLDecoder.decode(cookie.getValue(),<span class=\"string\">&quot;UTF-8&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-4、Session（重点）\"><a href=\"#7-4、Session（重点）\" class=\"headerlink\" title=\"7.4、Session（重点）\"></a>7.4、Session（重点）</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568344560794.png\" alt=\"1568344560794\"></p>\n<p>什么是Session：</p>\n<ul>\n<li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li>\n<li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li>\n<li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568342773861.png\" alt=\"1568342773861\"></p>\n<p>Session和cookie的区别：</p>\n<ul>\n<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li>\n<li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li>\n<li>Session对象由服务创建；</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>保存一个登录用户的信息；</li>\n<li>购物车信息；</li>\n<li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li>\n</ul>\n<p>使用Session：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.kuang.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionDemo01</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//解决乱码问题</span></span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        resp.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//得到Session</span></span><br><span class=\"line\">        HttpSession session = req.getSession();</span><br><span class=\"line\">        <span class=\"comment\">//给Session中存东西</span></span><br><span class=\"line\">        session.setAttribute(<span class=\"string\">&quot;name&quot;</span>,<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;秦疆&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"comment\">//获取Session的ID</span></span><br><span class=\"line\">        String sessionId = session.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断Session是不是新创建</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session.isNew())&#123;</span><br><span class=\"line\">            resp.getWriter().write(<span class=\"string\">&quot;session创建成功,ID:&quot;</span>+sessionId);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.getWriter().write(<span class=\"string\">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Session创建的时候做了什么事情；</span></span><br><span class=\"line\"><span class=\"comment\">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span></span><br><span class=\"line\"><span class=\"comment\">//        resp.addCookie(cookie);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//得到Session</span></span><br><span class=\"line\">HttpSession session = req.getSession();</span><br><span class=\"line\"></span><br><span class=\"line\">Person person = (Person) session.getAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(person.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">HttpSession session = req.getSession();</span><br><span class=\"line\">session.removeAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//手动注销Session</span></span><br><span class=\"line\">session.invalidate();</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>会话自动过期：web.xml配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--设置Session默认的失效时间--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span>    <span class=\"comment\">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568344679763.png\" alt=\"1568344679763\"></p>\n<h2 id=\"8、JSP\"><a href=\"#8、JSP\" class=\"headerlink\" title=\"8、JSP\"></a>8、JSP</h2><p>==<strong>静态网页&amp;动态网页</strong>==</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>静态网页</strong></th>\n<th><strong>动态网页</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组成</td>\n<td>html+js+css</td>\n<td>jsp+html;asp+html;php+html;</td>\n</tr>\n<tr>\n<td>交互</td>\n<td>不可交互</td>\n<td>可交互</td>\n</tr>\n<tr>\n<td>运行方式</td>\n<td>客户端运行</td>\n<td>服务端生成，客户端运行</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td>无数据库连接</td>\n<td>连接数据库</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-1、什么是JSP\"><a href=\"#8-1、什么是JSP\" class=\"headerlink\" title=\"8.1、什么是JSP\"></a>8.1、什么是JSP</h3><ul>\n<li><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p>\n</li>\n<li><p><a href=\"http://127.0.0.1:8080/login/index.jsp\">http://127.0.0.1:8080/login/index.jsp</a></p>\n</li>\n<li><p>最大的特点：</p>\n<ul>\n<li>写JSP就像在写HTML</li>\n<li>区别：<ul>\n<li>HTML只给用户提供静态的数据</li>\n<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>工作原理</strong></p>\n<ul>\n<li><p>客户端请求</p>\n</li>\n<li><p>把 *.jsp 翻译成 *.java </p>\n</li>\n<li><p>编译为 *.class</p>\n</li>\n<li><p>执行生成servlet</p>\n</li>\n<li><p>反馈结果给客户端显示</p>\n<pre><code>第二次访问 有改动 执行上述过程 \n无改动 直接执行\n</code></pre>\n</li>\n<li><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305097106.png\" alt=\"123\"></p>\n</li>\n<li><img src=\"/img/javaweb/狂神web/clip_image001-1583305111348.png\" alt=\"112\" style=\"zoom:80%;\" /></li>\n<li><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305154041.png\" alt=\"44\"></p>\n</li>\n<li><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305166669.png\" alt=\"54\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-2、JSP原理\"><a href=\"#8-2、JSP原理\" class=\"headerlink\" title=\"8.2、JSP原理\"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p>\n<ul>\n<li><p>代码层面没有任何问题</p>\n</li>\n<li><p>服务器内部工作</p>\n<p>tomcat中有一个work目录；</p>\n<p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568345873736.png\" alt=\"1568345873736\"></p>\n<p>我电脑的地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\.IntelliJIdea2018<span class=\"number\">.1</span>\\system\\tomcat\\Unnamed_javaweb-session-cookie\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp</span><br></pre></td></tr></table></figure>\n\n<p>发现页面转变成了Java程序！</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568345948307.png\" alt=\"1568345948307\"></p>\n</li>\n</ul>\n<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p>\n<p>JSP最终也会被转换成为一个Java类！</p>\n<p><strong>JSP 本质上就是一个Servlet</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化  public void _jspInit() &#123;        &#125;//销毁  public void _jspDestroy() &#123;  &#125;//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      </span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>判断请求</p>\n</li>\n<li><p>内置一些对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> javax.servlet.jsp.PageContext pageContext;  <span class=\"comment\">//页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应</span></span><br></pre></td></tr></table></figure></li>\n<li><p>输出页面前增加的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);       <span class=\"comment\">//设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p>\n</li>\n</ol>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568347078207.png\" alt=\"1568347078207\"></p>\n<p>在JSP页面中；</p>\n<p>只要是 JAVA代码就会原封不动的输出；</p>\n<p>如果是HTML代码，就会被转换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out.write(<span class=\"string\">&quot;&lt;html&gt;\\r\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样的格式，输出到前端！</p>\n<h3 id=\"8-3、JSP基础语法\"><a href=\"#8-3、JSP基础语法\" class=\"headerlink\" title=\"8.3、JSP基础语法\"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p>\n<h4 id=\"JSP-的组成-JSP页面的构成\"><a href=\"#JSP-的组成-JSP页面的构成\" class=\"headerlink\" title=\"JSP 的组成 JSP页面的构成\"></a>JSP 的组成 <a href=\"https://www.cnblogs.com/yangyquin/p/5430231.html\"><strong>JSP页面的构成</strong></a></h4> <img src=\"/img/javaweb/狂神web/clip_image001-1583305406375.png\" alt=\"54\" style=\"zoom:50%;\" />\n\n<p><strong>==1 静态页面==</strong></p>\n<h5 id=\"2-指令\"><a href=\"#2-指令\" class=\"headerlink\" title=\"==2 指令==\"></a>==2 指令==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ %&gt;<span class=\"comment\">&lt;!--page--&gt;</span>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;  contentType=&quot;text/html; charset=UTF-8&quot; isErrorPage=&quot;true&quot;%&gt;<span class=\"comment\">&lt;!--include--&gt;</span>&lt;%@ include file=&quot;foot.html&quot; %&gt;   静态引入/静态包含&lt;%@ include file=&quot;foot.jsp&quot; %&gt;使用jsp要删除&lt;% String path = request.getContextPath( );   String basePath = request.getScheme( )+&quot;://&quot;+request %&gt;<span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span>   动态引入/动态包含<span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.jsp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span> (可使用html/jsp)    <span class=\"comment\">&lt;!--taglib--&gt;</span>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;     <span class=\"comment\">&lt;!--======================================================================--&gt;</span>    &lt;%@page args.... %&gt;&lt;%@include file=&quot;&quot;%&gt;&lt;%--@include会将两个页面合二为一--%&gt;&lt;%@include file=&quot;common/header.jsp&quot;%&gt;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网页主体<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&lt;%@include file=&quot;common/footer.jsp&quot;%&gt;<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>&lt;%--jSP标签    jsp:include：拼接页面，本质还是三个    --%&gt;<span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;/common/header.jsp&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网页主体<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;/common/footer.jsp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-声明\"><a href=\"#3-声明\" class=\"headerlink\" title=\"==3 声明==\"></a>==3 声明==</h5><ul>\n<li>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在JSP页面中定义变量,方法或类  &lt;%!  %&gt;&lt;%!  String s = &quot;这是一个声明&quot; ;    public  int  add(int x,int y )&#123;         return x+y;     &#125; %&gt;=========================================&lt;%!static &#123;  System.out.println(&quot;Loading Servlet!&quot;);&#125;private int globalVar = 0;public void kuang()&#123;  System.out.println(&quot;进入了方法Kuang！&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-表达式\"><a href=\"#4-表达式\" class=\"headerlink\" title=\"==4 表达式==\"></a>==4 表达式==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= 变量或表达式%&gt; basePath:&lt;%=basePath%&gt;<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>当前时间： <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>    &lt;%= new Date() %&gt;<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>================================&lt;%--JSP表达式作用：用来将程序的输出，输出到客户端&lt;%= 变量或者表达式%&gt;--%&gt;&lt;%= new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-脚本段-（小脚本-代码块）\"><a href=\"#5-脚本段-（小脚本-代码块）\" class=\"headerlink\" title=\"==5 脚本段==（小脚本/代码块）\"></a>==5 脚本段==（小脚本/代码块）</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在JSP页面中执行的Java代码 语法： &lt;% Java代码 %&gt;&lt;%  System.out.println(&quot;这是一个代码块&quot;);%&gt;================================================== &lt;%--jsp脚本片段--%&gt;&lt;%int sum = 0;for (int i = 1; i &lt;=100 ; i++) &#123;  sum+=i;&#125;out.println(&quot;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Sum=&quot;+sum+&quot;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&quot;);%&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--脚本片段的再实现--&gt;</span>&lt;%int x = 10;out.println(x);%&gt;<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个JSP文档<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&lt;%int y = 2;out.println(y);%&gt;<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>&lt;%--在代码嵌入HTML元素--%&gt;&lt;%for (int i = 0; i &lt; 5; i++) &#123;%&gt;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello,World  &lt;%=i%&gt; <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-标准动作\"><a href=\"#6-标准动作\" class=\"headerlink\" title=\"==6 标准动作==\"></a>==6 标准动作==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span>   动态引入/动态包含<span class=\"tag\">&lt;<span class=\"name\">jsp:forward</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;encoding.jsp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:forward</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-注释\"><a href=\"#7-注释\" class=\"headerlink\" title=\"==7 注释==\"></a>==7 注释==</h5><ul>\n<li>JSP的注释，不会在客户端显示，HTML就会！</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- This is my JSP page. &lt;br&gt; --&gt;</span>&lt;%--  &lt;% System.out.println(&quot;这是一个代码块&quot;);%&gt;--%&gt;//System.out.println(&quot;这是一个代码块&quot;); /* System.out.println(&quot;这是一个代码块1&quot;); */</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-4、9大内置对象\"><a href=\"#8-4、9大内置对象\" class=\"headerlink\" title=\"8.4、9大内置对象\"></a>8.4、9大内置对象</h3><ul>\n<li>PageContext    存东西</li>\n<li>Request     存东西</li>\n<li>Response</li>\n<li>Session      存东西</li>\n<li>Application   【SerlvetContext】   存东西</li>\n<li>config    【SerlvetConfig】</li>\n<li>out</li>\n<li>page ，不用了解</li>\n<li>exception</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageContext.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;秦疆1号&quot;</span>); <span class=\"comment\">//保存的数据只在一个页面中有效request.setAttribute(&quot;name2&quot;,&quot;秦疆2号&quot;); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(&quot;name3&quot;,&quot;秦疆3号&quot;); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(&quot;name4&quot;,&quot;秦疆4号&quot;);  //保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>\n\n<p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p>\n<p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p>\n<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p>\n<h3 id=\"8-5、JSP标签、JSTL标签、EL表达式\"><a href=\"#8-5、JSP标签、JSTL标签、EL表达式\" class=\"headerlink\" title=\"8.5、JSP标签、JSTL标签、EL表达式\"></a>8.5、JSP标签、JSTL标签、EL表达式</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- JSTL表达式的依赖 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span><span class=\"comment\">&lt;!-- standard标签库 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>EL表达式：  ${ }</p>\n<ul>\n<li><strong>获取数据</strong></li>\n<li><strong>执行运算</strong></li>\n<li><strong>获取web开发的常用对象</strong></li>\n</ul>\n<p><strong>JSP标签</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--jsp:include--%&gt;&lt;%--http:<span class=\"comment\">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12--%&gt;&lt;jsp:forward page=&quot;/jsptag2.jsp&quot;&gt;    &lt;jsp:param name=&quot;name&quot; value=&quot;kuangshen&quot;&gt;&lt;/jsp:param&gt;    &lt;jsp:param name=&quot;age&quot; value=&quot;12&quot;&gt;&lt;/jsp:param&gt;&lt;/jsp:forward&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>JSTL表达式</strong></p>\n<p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>\n<p><strong>格式化标签</strong></p>\n<p><strong>SQL标签</strong></p>\n<p><strong>XML 标签</strong></p>\n<p><strong>核心标签</strong> （掌握部分）</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568362473764.png\" alt=\"1568362473764\"></p>\n<p><strong>JSTL标签库使用步骤</strong></p>\n<ul>\n<li>引入对应的 taglib</li>\n<li>使用其中的方法</li>\n<li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li>\n</ul>\n<p>c：if</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h4&gt;<span class=\"keyword\">if</span>测试&lt;/h4&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;coreif.jsp&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;</span><br><span class=\"line\">    &lt;%--</span><br><span class=\"line\">    EL表达式获取表单中的数据</span><br><span class=\"line\">    $&#123;param.参数名&#125;</span><br><span class=\"line\">    --%&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;登录&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class=\"keyword\">var</span>=<span class=\"string\">&quot;isAdmin&quot;</span>&gt;</span><br><span class=\"line\">    &lt;c:out value=<span class=\"string\">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%--自闭合标签--%&gt;</span><br><span class=\"line\">&lt;c:out value=<span class=\"string\">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>c:choose   c:when</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;&lt;%--定义一个变量score，值为<span class=\"number\">85</span>--%&gt;&lt;c:set <span class=\"keyword\">var</span>=<span class=\"string\">&quot;score&quot;</span> value=<span class=\"string\">&quot;55&quot;</span>/&gt;&lt;c:choose&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;        你的成绩为优秀    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;        你的成绩为一般    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;        你的成绩为良好    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;        你的成绩为不及格    &lt;/c:when&gt;&lt;/c:choose&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>c:forEach</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%    ArrayList&lt;String&gt; people = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();    people.add(<span class=\"number\">0</span>,<span class=\"string\">&quot;张三&quot;</span>);    people.add(<span class=\"number\">1</span>,<span class=\"string\">&quot;李四&quot;</span>);    people.add(<span class=\"number\">2</span>,<span class=\"string\">&quot;王五&quot;</span>);    people.add(<span class=\"number\">3</span>,<span class=\"string\">&quot;赵六&quot;</span>);    people.add(<span class=\"number\">4</span>,<span class=\"string\">&quot;田六&quot;</span>);    request.setAttribute(<span class=\"string\">&quot;list&quot;</span>,people);%&gt;&lt;%--<span class=\"keyword\">var</span> , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%&gt;&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;people&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span>&gt;    &lt;c:out value=<span class=\"string\">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;&lt;hr&gt;&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;people&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span> begin=<span class=\"string\">&quot;1&quot;</span> end=<span class=\"string\">&quot;3&quot;</span> step=<span class=\"string\">&quot;1&quot;</span> &gt;    &lt;c:out value=<span class=\"string\">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、JavaBean\"><a href=\"#9、JavaBean\" class=\"headerlink\" title=\"9、JavaBean\"></a>9、JavaBean</h2><p>实体类</p>\n<p>JavaBean有特定的写法：</p>\n<ul>\n<li>必须要有一个无参构造</li>\n<li>属性必须私有化</li>\n<li>必须有对应的get/set方法；</li>\n</ul>\n<p>一般用来和数据库的字段做映射  ORM；</p>\n<p>ORM ：对象关系映射</p>\n<ul>\n<li>表—&gt;类</li>\n<li>字段–&gt;属性</li>\n<li>行记录—-&gt;对象</li>\n</ul>\n<p><strong>people表</strong></p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>秦疆1号</td>\n<td>3</td>\n<td>西安</td>\n</tr>\n<tr>\n<td>2</td>\n<td>秦疆2号</td>\n<td>18</td>\n<td>西安</td>\n</tr>\n<tr>\n<td>3</td>\n<td>秦疆3号</td>\n<td>100</td>\n<td>西安</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;    <span class=\"keyword\">private</span> String name;    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;    <span class=\"keyword\">private</span> String address;&#125;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;    <span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,<span class=\"string\">&quot;秦疆1号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);    <span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,<span class=\"string\">&quot;秦疆2号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);    <span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,<span class=\"string\">&quot;秦疆3号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>过滤器</li>\n<li>文件上传</li>\n<li>邮件发送</li>\n<li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li>\n</ul>\n<h2 id=\"10、MVC三层架构\"><a href=\"#10、MVC三层架构\" class=\"headerlink\" title=\"10、MVC三层架构\"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p>\n<h3 id=\"10-1、早些年\"><a href=\"#10-1、早些年\" class=\"headerlink\" title=\"10.1、早些年\"></a>10.1、早些年</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568423664332.png\" alt=\"1568423664332\"></p>\n<p>用户直接访问控制层，控制层就可以直接操作数据库；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">servlet--CRUD--&gt;数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2、MVC三层架构\"><a href=\"#10-2、MVC三层架构\" class=\"headerlink\" title=\"10.2、MVC三层架构\"></a>10.2、MVC三层架构</h3><p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568424227281.png\" alt=\"1568424227281\"></p>\n<p>Model</p>\n<ul>\n<li>业务处理 ：业务逻辑（Service）</li>\n<li>数据持久层：CRUD   （Dao）</li>\n</ul>\n<p>View</p>\n<ul>\n<li>展示数据</li>\n<li>提供链接发起Servlet请求 （a，form，img…）</li>\n</ul>\n<p>Controller  （Servlet）</p>\n<ul>\n<li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p>\n</li>\n<li><p>交给业务层处理对应的代码 </p>\n</li>\n<li><p>控制视图的跳转  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"11、Filter-（重点）\"><a href=\"#11、Filter-（重点）\" class=\"headerlink\" title=\"11、Filter （重点）\"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p>\n<ul>\n<li>处理中文乱码</li>\n<li>登录验证….</li>\n</ul>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568424858708.png\" alt=\"1568424858708\"></p>\n<p>Filter开发步骤：</p>\n<ol>\n<li><p>导包</p>\n</li>\n<li><p>编写过滤器</p>\n<ol>\n<li><p>导包不要错</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568425162525.png\" alt=\"1568425162525\"></p>\n<p>实现Filter接口，重写对应的方法即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;    <span class=\"comment\">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException &#123;        System.out.println(&quot;CharacterEncodingFilter初始化&quot;);    &#125;    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;        request.setCharacterEncoding(&quot;utf-8&quot;);        response.setCharacterEncoding(&quot;utf-8&quot;);        response.setContentType(&quot;text/html;charset=UTF-8&quot;);        System.out.println(&quot;CharacterEncodingFilter执行前....&quot;);        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(&quot;CharacterEncodingFilter执行后....&quot;);    &#125;    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() &#123;        System.out.println(&quot;CharacterEncodingFilter销毁&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>在web.xml中配置 Filter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>    <span class=\"comment\">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/servlet/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"comment\">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"12、监听器\"><a href=\"#12、监听器\" class=\"headerlink\" title=\"12、监听器\"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p>\n<ol>\n<li><p>编写一个监听器</p>\n<p>实现监听器的接口…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener &#123;    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(1);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(0);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>web.xml中注册监听器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册监听器--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>看情况是否使用！</p>\n</li>\n</ol>\n<h2 id=\"13、过滤器、监听器常见应用\"><a href=\"#13、过滤器、监听器常见应用\" class=\"headerlink\" title=\"13、过滤器、监听器常见应用\"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPanel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Frame frame = <span class=\"keyword\">new</span> Frame(<span class=\"string\">&quot;中秋节快乐&quot;</span>);  <span class=\"comment\">//新建一个窗体</span></span><br><span class=\"line\">        Panel panel = <span class=\"keyword\">new</span> Panel(<span class=\"keyword\">null</span>); <span class=\"comment\">//面板</span></span><br><span class=\"line\">        frame.setLayout(<span class=\"keyword\">null</span>); <span class=\"comment\">//设置窗体的布局</span></span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setBounds(<span class=\"number\">300</span>,<span class=\"number\">300</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        frame.setBackground(<span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>)); <span class=\"comment\">//设置背景颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        panel.setBounds(<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        panel.setBackground(<span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>)); <span class=\"comment\">//设置背景颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(panel);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//监听事件，监听关闭事件</span></span><br><span class=\"line\">        frame.addWindowListener(<span class=\"keyword\">new</span> WindowAdapter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">windowClosing</span><span class=\"params\">(WindowEvent e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.windowClosing(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>\n<ol>\n<li><p>用户登录之后，向Sesison中放入用户的数据</p>\n</li>\n<li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    response.sendRedirect(<span class=\"string\">&quot;/error.jsp&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"14、JDBC\"><a href=\"#14、JDBC\" class=\"headerlink\" title=\"14、JDBC\"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568439601825.png\" alt=\"1568439601825\"></p>\n<p>需要jar包的支持：</p>\n<ul>\n<li>java.sql</li>\n<li>javax.sql</li>\n<li>mysql-conneter-java…  连接驱动（必须要导入）</li>\n</ul>\n<p><strong>实验环境搭建</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users(    id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,    `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),    `password` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),    email <span class=\"type\">VARCHAR</span>(<span class=\"number\">60</span>),    birthday <span class=\"type\">DATE</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;zs@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ls@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;王五&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ww@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">SELECT</span>\t<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>导入数据库依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--mysql的驱动--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>IDEA中连接数据库：</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568440926845.png\" alt=\"1568440926845\"></p>\n<p><strong>JDBC 固定步骤：</strong></p>\n<ol>\n<li>加载驱动</li>\n<li>连接数据库,代表数据库</li>\n<li>向数据库发送SQL的对象Statement : CRUD</li>\n<li>编写SQL （根据业务，不同的SQL）</li>\n<li>执行SQL</li>\n<li>关闭连接</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJdbc</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;        <span class=\"comment\">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = &quot;select * from users&quot;;        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next())&#123;            System.out.println(&quot;id=&quot;+rs.getObject(&quot;id&quot;));            System.out.println(&quot;name=&quot;+rs.getObject(&quot;name&quot;));            System.out.println(&quot;password=&quot;+rs.getObject(&quot;password&quot;));            System.out.println(&quot;email=&quot;+rs.getObject(&quot;email&quot;));            System.out.println(&quot;birthday=&quot;+rs.getObject(&quot;birthday&quot;));        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>预编译SQL</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJDBC2</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;        <span class=\"comment\">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = &quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;;        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,&quot;狂神说Java&quot;);//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,&quot;123456&quot;);//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,&quot;24736743@qq.com&quot;);//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i&gt;0)&#123;            System.out.println(&quot;插入成功@&quot;);        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>事务</strong></p>\n<p>要么都成功，要么都失败！</p>\n<p>ACID原则：保证数据的安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:<span class=\"number\">1000</span>    A(<span class=\"number\">900</span>)   --<span class=\"number\">100</span>--&gt;   B(<span class=\"number\">1100</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Junit单元测试</strong></p>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--单元测试--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>简单使用</p>\n<p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568442261610.png\" alt=\"1568442261610\"></p>\n<p>失败的时候是红色：</p>\n<p><img src=\"/img/javaweb/%E7%8B%82%E7%A5%9Eweb/1568442289597.png\" alt=\"1568442289597\"></p>\n<p><strong>搭建一个环境</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> account(</span><br><span class=\"line\">   id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class=\"line\">   `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),</span><br><span class=\"line\">   money <span class=\"type\">FLOAT</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置信息</span></span><br><span class=\"line\">    <span class=\"comment\">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class=\"line\">    String url=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class=\"line\">    String username = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">    String password = <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.加载驱动</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.连接数据库,代表数据库</span></span><br><span class=\"line\">         connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.通知数据库开启事务,false 开启</span></span><br><span class=\"line\">        connection.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String sql = <span class=\"string\">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class=\"line\">        connection.prepareStatement(sql).executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//制造错误</span></span><br><span class=\"line\">        <span class=\"comment\">//int i = 1/0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String sql2 = <span class=\"string\">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">        connection.prepareStatement(sql2).executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        connection.commit();<span class=\"comment\">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果出现异常，就通知数据库回滚事务</span></span><br><span class=\"line\">            connection.rollback();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e1) &#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cksjr6j3g0001fgu90y3kfzm9","category_id":"cksjr6j3l0003fgu9gjulbakt","_id":"cksjr6j3r000bfgu9ezp5dfcz"},{"post_id":"cksjr6j3w000ffgu9h4p39mp3","category_id":"cksjr6j3l0003fgu9gjulbakt","_id":"cksjr6j3z000hfgu9f930dnit"},{"post_id":"cksjr6j4r000lfgu9ad156hxs","category_id":"cksjr6j4s000mfgu98fr30dkz","_id":"cksjr6j4v000pfgu9bti4cw68"}],"PostTag":[{"post_id":"cksjr6j3g0001fgu90y3kfzm9","tag_id":"cksjr6j3n0004fgu982yj5ubq","_id":"cksjr6j3t000dfgu9ggu431gx"},{"post_id":"cksjr6j3g0001fgu90y3kfzm9","tag_id":"cksjr6j3p0008fgu995at9yfq","_id":"cksjr6j3t000efgu9b9fy7dhr"},{"post_id":"cksjr6j3w000ffgu9h4p39mp3","tag_id":"cksjr6j3y000gfgu9g5ce4n5t","_id":"cksjr6j3z000jfgu90lclblu3"},{"post_id":"cksjr6j3w000ffgu9h4p39mp3","tag_id":"cksjr6j3z000ifgu98so7d3gh","_id":"cksjr6j3z000kfgu9dr8wcoon"},{"post_id":"cksjr6j4r000lfgu9ad156hxs","tag_id":"cksjr6j4s000nfgu94aidbtui","_id":"cksjr6j4u000ofgu99enz9123"}],"Tag":[{"name":"android","_id":"cksjr6j3n0004fgu982yj5ubq"},{"name":"drawable","_id":"cksjr6j3p0008fgu995at9yfq"},{"name":"hexo","_id":"cksjr6j3y000gfgu9g5ce4n5t"},{"name":"主题","_id":"cksjr6j3z000ifgu98so7d3gh"},{"name":"javaweb","_id":"cksjr6j4s000nfgu94aidbtui"}]}}